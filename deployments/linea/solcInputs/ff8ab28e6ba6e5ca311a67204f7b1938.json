{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = _allowances[owner][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "contracts/circle-usdc/CircleBridgeProxy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./FeeOperator.sol\";\nimport \"../interfaces/ICircleBridge.sol\";\nimport \"../safeguard/Governor.sol\";\nimport \"../safeguard/Pauser.sol\";\n\ncontract CircleBridgeProxy is FeeOperator, Governor, Pauser, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    address public immutable circleBridge;\n\n    uint32 public feePercGlobal; //in 1e6\n    // chainId => feePercOverride, support override fee perc by dst chain\n    mapping(uint64 => uint32) public feePercOverride;\n    /// per dest chain id executor fee in this chain's USDC token\n    mapping(uint64 => uint256) public dstTxFee;\n\n    // 0 is regarded as not registered. Set to a negative value if target domain is actually 0.\n    mapping(uint64 => int32) public chidToDomain;\n\n    event FeePercUpdated(uint64[] chainIds, uint32[] feePercs);\n    event TxFeeUpdated(uint64[] chainIds, uint256[] fees);\n    event ChidToDomainUpdated(uint64[] chainIds, int32[] domains);\n    event Deposited(\n        address sender,\n        bytes32 recipient,\n        uint64 dstChid,\n        uint256 amount,\n        uint256 txFee,\n        uint256 percFee,\n        uint64 nonce\n    );\n\n    constructor(address _circleBridge, address _feeCollector) FeeOperator(_feeCollector) {\n        circleBridge = _circleBridge;\n    }\n\n    function depositForBurn(\n        uint256 _amount,\n        uint64 _dstChid,\n        bytes32 _mintRecipient,\n        address _burnToken\n    ) external nonReentrant whenNotPaused returns (uint64 _nonce) {\n        int32 dstDomain = chidToDomain[_dstChid];\n        require(dstDomain != 0, \"dst domain not registered\");\n        if (dstDomain < 0) {\n            dstDomain = 0; // a negative value indicates the target domain is 0 actually.\n        }\n        (uint256 fee, uint256 txFee, uint256 percFee) = totalFee(_amount, _dstChid);\n        require(_amount > fee, \"fee not covered\");\n\n        IERC20(_burnToken).safeTransferFrom(msg.sender, address(this), _amount);\n        uint256 bridgeAmt = _amount - fee;\n        IERC20(_burnToken).safeIncreaseAllowance(circleBridge, bridgeAmt);\n        _nonce = ICircleBridge(circleBridge).depositForBurn(bridgeAmt, uint32(dstDomain), _mintRecipient, _burnToken);\n        IERC20(_burnToken).safeApprove(circleBridge, 0);\n        emit Deposited(msg.sender, _mintRecipient, _dstChid, _amount, txFee, percFee, _nonce);\n    }\n\n    function totalFee(uint256 _amount, uint64 _dstChid)\n        public\n        view\n        returns (\n            uint256 _fee,\n            uint256 _txFee,\n            uint256 _percFee\n        )\n    {\n        uint32 feePerc = feePercOverride[_dstChid];\n        if (feePerc == 0) {\n            feePerc = feePercGlobal;\n        }\n        _txFee = dstTxFee[_dstChid];\n        _percFee = (_amount * feePerc) / 1e6;\n        _fee = _txFee + _percFee;\n    }\n\n    function setFeePerc(uint64[] calldata _chainIds, uint32[] calldata _feePercs) external onlyGovernor {\n        require(_chainIds.length == _feePercs.length, \"length mismatch\");\n        for (uint256 i = 0; i < _chainIds.length; i++) {\n            require(_feePercs[i] < 1e6, \"fee percentage too large\");\n            if (_chainIds[i] == 0) {\n                feePercGlobal = _feePercs[i];\n            } else {\n                feePercOverride[_chainIds[i]] = _feePercs[i];\n            }\n        }\n        emit FeePercUpdated(_chainIds, _feePercs);\n    }\n\n    function setTxFee(uint64[] calldata _chainIds, uint256[] calldata _fees) external onlyGovernor {\n        require(_chainIds.length == _fees.length, \"length mismatch\");\n        for (uint256 i = 0; i < _chainIds.length; i++) {\n            dstTxFee[_chainIds[i]] = _fees[i];\n        }\n        emit TxFeeUpdated(_chainIds, _fees);\n    }\n\n    function setChidToDomain(uint64[] calldata _chainIds, int32[] calldata _domains) external onlyGovernor {\n        require(_chainIds.length == _domains.length, \"length mismatch\");\n        for (uint256 i = 0; i < _chainIds.length; i++) {\n            chidToDomain[_chainIds[i]] = _domains[i];\n        }\n        emit ChidToDomainUpdated(_chainIds, _domains);\n    }\n}\n"
    },
    "contracts/circle-usdc/FeeOperator.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../safeguard/Ownable.sol\";\n\nabstract contract FeeOperator is Ownable {\n    using SafeERC20 for IERC20;\n\n    address public feeCollector;\n\n    event FeeCollectorUpdated(address from, address to);\n\n    modifier onlyFeeCollector() {\n        require(msg.sender == feeCollector, \"not fee collector\");\n        _;\n    }\n\n    constructor(address _feeCollector) {\n        feeCollector = _feeCollector;\n    }\n\n    function collectFee(address[] calldata _tokens, address _to) external onlyFeeCollector {\n        for (uint256 i = 0; i < _tokens.length; i++) {\n            // use zero address to denote native token\n            if (_tokens[i] == address(0)) {\n                uint256 bal = address(this).balance;\n                (bool sent, ) = _to.call{value: bal, gas: 50000}(\"\");\n                require(sent, \"send native failed\");\n            } else {\n                uint256 balance = IERC20(_tokens[i]).balanceOf(address(this));\n                IERC20(_tokens[i]).safeTransfer(_to, balance);\n            }\n        }\n    }\n\n    function setFeeCollector(address _feeCollector) external onlyOwner {\n        address oldFeeCollector = feeCollector;\n        feeCollector = _feeCollector;\n        emit FeeCollectorUpdated(oldFeeCollector, _feeCollector);\n    }\n}\n"
    },
    "contracts/interfaces/IBridge.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface IBridge {\n    function send(\n        address _receiver,\n        address _token,\n        uint256 _amount,\n        uint64 _dstChainId,\n        uint64 _nonce,\n        uint32 _maxSlippage\n    ) external;\n\n    function sendNative(\n        address _receiver,\n        uint256 _amount,\n        uint64 _dstChainId,\n        uint64 _nonce,\n        uint32 _maxSlippage\n    ) external payable;\n\n    function relay(\n        bytes calldata _relayRequest,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external;\n\n    function transfers(bytes32 transferId) external view returns (bool);\n\n    function withdraws(bytes32 withdrawId) external view returns (bool);\n\n    function withdraw(\n        bytes calldata _wdmsg,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external;\n\n    /**\n     * @notice Verifies that a message is signed by a quorum among the signers.\n     * @param _msg signed message\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\n     * @param _signers sorted list of current signers\n     * @param _powers powers of current signers\n     */\n    function verifySigs(\n        bytes memory _msg,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external view;\n}\n"
    },
    "contracts/interfaces/ICircleBridge.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface ICircleBridge {\n    /**\n     * @notice Deposits and burns tokens from sender to be minted on destination domain.\n     * Emits a `DepositForBurn` event.\n     * @dev reverts if:\n     * - given burnToken is not supported\n     * - given destinationDomain has no CircleBridge registered\n     * - transferFrom() reverts. For example, if sender's burnToken balance or approved allowance\n     * to this contract is less than `amount`.\n     * - burn() reverts. For example, if `amount` is 0.\n     * - MessageTransmitter returns false or reverts.\n     * @param _amount amount of tokens to burn\n     * @param _destinationDomain destination domain (ETH = 0, AVAX = 1)\n     * @param _mintRecipient address of mint recipient on destination domain\n     * @param _burnToken address of contract to burn deposited tokens, on local domain\n     * @return _nonce unique nonce reserved by message\n     */\n    function depositForBurn(\n        uint256 _amount,\n        uint32 _destinationDomain,\n        bytes32 _mintRecipient,\n        address _burnToken\n    ) external returns (uint64 _nonce);\n}\n"
    },
    "contracts/interfaces/IDelayedTransfer.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.9;\n\ninterface IDelayedTransfer {\n    struct delayedTransfer {\n        address receiver;\n        address token;\n        uint256 amount;\n        uint256 timestamp;\n    }\n\n    function delayedTransfers(bytes32 transferId) external view returns (delayedTransfer memory);\n}\n"
    },
    "contracts/interfaces/IOriginalTokenVault.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface IOriginalTokenVault {\n    /**\n     * @notice Lock original tokens to trigger mint at a remote chain's PeggedTokenBridge\n     * @param _token local token address\n     * @param _amount locked token amount\n     * @param _mintChainId destination chainId to mint tokens\n     * @param _mintAccount destination account to receive minted tokens\n     * @param _nonce user input to guarantee unique depositId\n     */\n    function deposit(\n        address _token,\n        uint256 _amount,\n        uint64 _mintChainId,\n        address _mintAccount,\n        uint64 _nonce\n    ) external;\n\n    /**\n     * @notice Lock native token as original token to trigger mint at a remote chain's PeggedTokenBridge\n     * @param _amount locked token amount\n     * @param _mintChainId destination chainId to mint tokens\n     * @param _mintAccount destination account to receive minted tokens\n     * @param _nonce user input to guarantee unique depositId\n     */\n    function depositNative(\n        uint256 _amount,\n        uint64 _mintChainId,\n        address _mintAccount,\n        uint64 _nonce\n    ) external payable;\n\n    /**\n     * @notice Withdraw locked original tokens triggered by a burn at a remote chain's PeggedTokenBridge.\n     * @param _request The serialized Withdraw protobuf.\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\n     * +2/3 of the bridge's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function withdraw(\n        bytes calldata _request,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external;\n\n    function records(bytes32 recordId) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IOriginalTokenVaultV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface IOriginalTokenVaultV2 {\n    /**\n     * @notice Lock original tokens to trigger mint at a remote chain's PeggedTokenBridge\n     * @param _token local token address\n     * @param _amount locked token amount\n     * @param _mintChainId destination chainId to mint tokens\n     * @param _mintAccount destination account to receive minted tokens\n     * @param _nonce user input to guarantee unique depositId\n     */\n    function deposit(\n        address _token,\n        uint256 _amount,\n        uint64 _mintChainId,\n        address _mintAccount,\n        uint64 _nonce\n    ) external returns (bytes32);\n\n    /**\n     * @notice Lock native token as original token to trigger mint at a remote chain's PeggedTokenBridge\n     * @param _amount locked token amount\n     * @param _mintChainId destination chainId to mint tokens\n     * @param _mintAccount destination account to receive minted tokens\n     * @param _nonce user input to guarantee unique depositId\n     */\n    function depositNative(\n        uint256 _amount,\n        uint64 _mintChainId,\n        address _mintAccount,\n        uint64 _nonce\n    ) external payable returns (bytes32);\n\n    /**\n     * @notice Withdraw locked original tokens triggered by a burn at a remote chain's PeggedTokenBridge.\n     * @param _request The serialized Withdraw protobuf.\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\n     * +2/3 of the bridge's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function withdraw(\n        bytes calldata _request,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external returns (bytes32);\n\n    function records(bytes32 recordId) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IPeggedTokenBridge.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface IPeggedTokenBridge {\n    /**\n     * @notice Burn tokens to trigger withdrawal at a remote chain's OriginalTokenVault\n     * @param _token local token address\n     * @param _amount locked token amount\n     * @param _withdrawAccount account who withdraw original tokens on the remote chain\n     * @param _nonce user input to guarantee unique depositId\n     */\n    function burn(\n        address _token,\n        uint256 _amount,\n        address _withdrawAccount,\n        uint64 _nonce\n    ) external;\n\n    /**\n     * @notice Mint tokens triggered by deposit at a remote chain's OriginalTokenVault.\n     * @param _request The serialized Mint protobuf.\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function mint(\n        bytes calldata _request,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external;\n\n    function records(bytes32 recordId) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IPeggedTokenBridgeV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface IPeggedTokenBridgeV2 {\n    /**\n     * @notice Burn pegged tokens to trigger a cross-chain withdrawal of the original tokens at a remote chain's\n     * OriginalTokenVault, or mint at another remote chain\n     * @param _token The pegged token address.\n     * @param _amount The amount to burn.\n     * @param _toChainId If zero, withdraw from original vault; otherwise, the remote chain to mint tokens.\n     * @param _toAccount The account to receive tokens on the remote chain\n     * @param _nonce A number to guarantee unique depositId. Can be timestamp in practice.\n     */\n    function burn(\n        address _token,\n        uint256 _amount,\n        uint64 _toChainId,\n        address _toAccount,\n        uint64 _nonce\n    ) external returns (bytes32);\n\n    // same with `burn` above, use openzeppelin ERC20Burnable interface\n    function burnFrom(\n        address _token,\n        uint256 _amount,\n        uint64 _toChainId,\n        address _toAccount,\n        uint64 _nonce\n    ) external returns (bytes32);\n\n    /**\n     * @notice Mint tokens triggered by deposit at a remote chain's OriginalTokenVault.\n     * @param _request The serialized Mint protobuf.\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function mint(\n        bytes calldata _request,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external returns (bytes32);\n\n    function records(bytes32 recordId) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/ISigsVerifier.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface ISigsVerifier {\n    /**\n     * @notice Verifies that a message is signed by a quorum among the signers.\n     * @param _msg signed message\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\n     * @param _signers sorted list of current signers\n     * @param _powers powers of current signers\n     */\n    function verifySigs(\n        bytes memory _msg,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external view;\n}\n"
    },
    "contracts/interfaces/IUniswapV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface IUniswapV2 {\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n}\n"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface IWETH {\n    function deposit() external payable;\n\n    function withdraw(uint256) external;\n}\n"
    },
    "contracts/libraries/Utils.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\nlibrary Utils {\n    // https://ethereum.stackexchange.com/a/83577\n    // https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/base/Multicall.sol\n    function getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\n        if (_returnData.length < 68) return \"Transaction reverted silently\";\n        assembly {\n            // Slice the sighash.\n            _returnData := add(_returnData, 0x04)\n        }\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\n    }\n}\n"
    },
    "contracts/message/apps/adapter/MessageReceiverAdapter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.9;\n\nimport \"../../framework/MessageApp.sol\";\nimport \"../../safeguard/MessageAppPauser.sol\";\nimport \"../../safeguard/DelayedMessage.sol\";\nimport \"../../../libraries/Utils.sol\";\n\ncontract MessageReceiverAdapter is MessageApp, MessageAppPauser, DelayedMessage {\n    event ExternalCall(address srcContract, uint64 srcChainId, address dstContract, bytes callData);\n    event AllowedSenderUpdated(address dstContract, uint64 srcChainId, address srcContract, bool allowed);\n\n    // dstContract => srcChainId => srcContract => allowed or not\n    mapping(address => mapping(uint64 => mapping(address => bool))) public allowedSender;\n\n    constructor(address _messageBus) MessageApp(_messageBus) {}\n\n    // Called by MessageBus on destination chain to receive cross-chain messages.\n    // The message is abi.encode of (dst_contract_address, dst_contract_calldata).\n    // If a delayed period is configured, the message would be put in a delayed message queue,\n    // otherwise, the external call to the dst contract will be executed immediately\n    function executeMessage(\n        address _srcContract,\n        uint64 _srcChainId,\n        bytes calldata _message,\n        address // executor\n    ) external payable override onlyMessageBus whenNotMsgPaused returns (ExecutionStatus) {\n        (address dstContract, bytes memory callData) = abi.decode(_message, (address, bytes));\n        require(allowedSender[dstContract][_srcChainId][_srcContract], \"not allowed sender\");\n        if (delayPeriod > 0) {\n            _addDelayedMessage(_srcContract, _srcChainId, _message);\n        } else {\n            _externalCall(_srcContract, _srcChainId, dstContract, callData);\n        }\n        return ExecutionStatus.Success;\n    }\n\n    // execute external call to the dst contract after the message delay period is passed.\n    function executeDelayedMessage(\n        address _srcContract,\n        uint64 _srcChainId,\n        bytes calldata _message,\n        uint32 _nonce\n    ) external payable whenNotPaused {\n        _executeDelayedMessage(_srcContract, _srcChainId, _message, _nonce);\n        (address dstContract, bytes memory callData) = abi.decode(_message, (address, bytes));\n        _externalCall(_srcContract, _srcChainId, dstContract, callData);\n    }\n\n    function _externalCall(\n        address _srcContract,\n        uint64 _srcChainId,\n        address _dstContract,\n        bytes memory _callData\n    ) internal {\n        (bool ok, bytes memory returnData) = _dstContract.call{value: msg.value}(_callData);\n        if (!ok) {\n            revert(Utils.getRevertMsg(returnData));\n        }\n        emit ExternalCall(_srcContract, _srcChainId, _dstContract, _callData);\n    }\n\n    function setAllowedSender(\n        address _dstContract,\n        uint64 _srcChainId,\n        address[] calldata _srcContracts,\n        bool[] calldata _alloweds\n    ) external onlyOwner {\n        require(_srcContracts.length == _alloweds.length, \"length mismatch\");\n        for (uint256 i = 0; i < _srcContracts.length; i++) {\n            allowedSender[_dstContract][_srcChainId][_srcContracts[i]] = _alloweds[i];\n            emit AllowedSenderUpdated(_dstContract, _srcChainId, _srcContracts[i], _alloweds[i]);\n        }\n    }\n}\n"
    },
    "contracts/message/apps/examples/BatchTransfer.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.17;\n\nimport \"../../framework/MessageApp.sol\";\n\n/** @title Sample app to test message passing flow, not for production use */\ncontract BatchTransfer is MessageApp {\n    using SafeERC20 for IERC20;\n\n    struct TransferRequest {\n        uint64 nonce;\n        address[] accounts;\n        uint256[] amounts;\n        address sender;\n    }\n\n    enum TransferStatus {\n        Null,\n        Success,\n        Fail\n    }\n\n    struct TransferReceipt {\n        uint64 nonce;\n        TransferStatus status;\n    }\n\n    constructor(address _messageBus) MessageApp(_messageBus) {}\n\n    // ============== functions and states on source chain ==============\n\n    uint64 nonce;\n\n    struct BatchTransferStatus {\n        bytes32 h; // hash(receiver, dstChainId)\n        TransferStatus status;\n    }\n    mapping(uint64 => BatchTransferStatus) public status; // nonce -> BatchTransferStatus\n\n    modifier onlyEOA() {\n        require(msg.sender == tx.origin, \"Not EOA\");\n        _;\n    }\n\n    // called by sender on source chain to send tokens to a list of\n    // <_accounts, _amounts> on the destination chain\n    function batchTransfer(\n        address _dstContract, // BatchTransfer contract address at the dst chain\n        address _token,\n        uint256 _amount,\n        uint64 _dstChainId,\n        uint32 _maxSlippage,\n        MsgDataTypes.BridgeSendType _bridgeSendType,\n        address[] calldata _accounts,\n        uint256[] calldata _amounts\n    ) external payable onlyEOA {\n        uint256 totalAmt;\n        for (uint256 i = 0; i < _amounts.length; i++) {\n            totalAmt += _amounts[i];\n        }\n        // commented out the slippage check below to trigger failure case for handleFailedMessageWithTransfer testing\n        // uint256 minRecv = _amount - (_amount * _maxSlippage) / 1e6;\n        // require(minRecv > totalAmt, \"invalid maxSlippage\");\n        nonce += 1;\n        status[nonce] = BatchTransferStatus({\n            h: keccak256(abi.encodePacked(_dstContract, _dstChainId)),\n            status: TransferStatus.Null\n        });\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\n        bytes memory message = abi.encode(\n            TransferRequest({nonce: nonce, accounts: _accounts, amounts: _amounts, sender: msg.sender})\n        );\n        // send token and message to the destination chain\n        sendMessageWithTransfer(\n            _dstContract,\n            _token,\n            _amount,\n            _dstChainId,\n            nonce,\n            _maxSlippage,\n            message,\n            _bridgeSendType,\n            msg.value\n        );\n    }\n\n    // called by MessageBus on source chain to handle message with token transfer failures (e.g., due to bad slippage).\n    // the associated token transfer is guaranteed to have already been refunded\n    function executeMessageWithTransferRefund(\n        address _token,\n        uint256 _amount,\n        bytes calldata _message,\n        address // executor\n    ) external payable override onlyMessageBus returns (ExecutionStatus) {\n        TransferRequest memory transfer = abi.decode((_message), (TransferRequest));\n        IERC20(_token).safeTransfer(transfer.sender, _amount);\n        return ExecutionStatus.Success;\n    }\n\n    // called by MessageBus on source chain to receive receipts\n    function executeMessage(\n        address _sender,\n        uint64 _srcChainId,\n        bytes memory _message,\n        address // executor\n    ) external payable override onlyMessageBus returns (ExecutionStatus) {\n        TransferReceipt memory receipt = abi.decode((_message), (TransferReceipt));\n        require(status[receipt.nonce].h == keccak256(abi.encodePacked(_sender, _srcChainId)), \"invalid message\");\n        status[receipt.nonce].status = receipt.status;\n        return ExecutionStatus.Success;\n    }\n\n    // ============== functions on destination chain ==============\n\n    // called by MessageBus on destination chain to handle batchTransfer message by\n    // distributing tokens to receivers and sending receipt.\n    // the lump sum token transfer associated with the message is guaranteed to have already been received.\n    function executeMessageWithTransfer(\n        address _srcContract,\n        address _token,\n        uint256 _amount,\n        uint64 _srcChainId,\n        bytes memory _message,\n        address // executor\n    ) external payable override onlyMessageBus returns (ExecutionStatus) {\n        TransferRequest memory transfer = abi.decode((_message), (TransferRequest));\n        uint256 totalAmt;\n        for (uint256 i = 0; i < transfer.accounts.length; i++) {\n            IERC20(_token).safeTransfer(transfer.accounts[i], transfer.amounts[i]);\n            totalAmt += transfer.amounts[i];\n        }\n        uint256 remainder = _amount - totalAmt;\n        if (_amount > totalAmt) {\n            // transfer the remainder of the money to sender as fee for executing this transfer\n            IERC20(_token).safeTransfer(transfer.sender, remainder);\n        }\n        bytes memory message = abi.encode(TransferReceipt({nonce: transfer.nonce, status: TransferStatus.Success}));\n        // send receipt back to the source chain contract\n        sendMessage(_srcContract, _srcChainId, message, msg.value);\n        return ExecutionStatus.Success;\n    }\n\n    // called by MessageBus if handleMessageWithTransfer above got reverted\n    function executeMessageWithTransferFallback(\n        address _srcContract,\n        address _token,\n        uint256 _amount,\n        uint64 _srcChainId,\n        bytes memory _message,\n        address // executor\n    ) external payable override onlyMessageBus returns (ExecutionStatus) {\n        TransferRequest memory transfer = abi.decode((_message), (TransferRequest));\n        IERC20(_token).safeTransfer(transfer.sender, _amount);\n        bytes memory message = abi.encode(TransferReceipt({nonce: transfer.nonce, status: TransferStatus.Fail}));\n        // send receipt back to the source chain contract\n        sendMessage(_srcContract, _srcChainId, message, msg.value);\n        return ExecutionStatus.Success;\n    }\n}\n"
    },
    "contracts/message/apps/examples/MsgExampleBasic.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.9;\n\nimport \"../../framework/MessageApp.sol\";\n\n// A HelloWorld example for basic cross-chain message passing\ncontract MsgExampleBasic is MessageApp {\n    event MessageReceived(address srcContract, uint64 srcChainId, address sender, bytes message);\n\n    constructor(address _messageBus) MessageApp(_messageBus) {}\n\n    // called by user on source chain to send cross-chain messages\n    function sendMessage(\n        address _dstContract,\n        uint64 _dstChainId,\n        bytes calldata _message\n    ) external payable {\n        bytes memory message = abi.encode(msg.sender, _message);\n        sendMessage(_dstContract, _dstChainId, message, msg.value);\n    }\n\n    // called by MessageBus on destination chain to receive cross-chain messages\n    function executeMessage(\n        address _srcContract,\n        uint64 _srcChainId,\n        bytes calldata _message,\n        address // executor\n    ) external payable override onlyMessageBus returns (ExecutionStatus) {\n        (address sender, bytes memory message) = abi.decode((_message), (address, bytes));\n        emit MessageReceived(_srcContract, _srcChainId, sender, message);\n        return ExecutionStatus.Success;\n    }\n}\n"
    },
    "contracts/message/apps/examples/MsgExampleBasicTransfer.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../../framework/MessageApp.sol\";\n\n// A HelloWorld example for basic cross-chain message passing with associate cross-chain token transfer\ncontract MsgExampleBasicTransfer is MessageApp {\n    using SafeERC20 for IERC20;\n\n    event MessageWithTransferReceived(address sender, address token, uint256 amount, uint64 srcChainId, bytes note);\n    event MessageWithTransferRefunded(address sender, address token, uint256 amount, bytes note);\n\n    // acccount, token -> balance\n    mapping(address => mapping(address => uint256)) public balances;\n\n    constructor(address _messageBus) MessageApp(_messageBus) {}\n\n    // called by user on source chain to send token with note to destination chain\n    function sendTokenWithNote(\n        address _dstContract,\n        address _token,\n        uint256 _amount,\n        uint64 _dstChainId,\n        uint64 _nonce,\n        uint32 _maxSlippage,\n        bytes calldata _note,\n        MsgDataTypes.BridgeSendType _bridgeSendType\n    ) external payable {\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\n        bytes memory message = abi.encode(msg.sender, _note);\n        sendMessageWithTransfer(\n            _dstContract,\n            _token,\n            _amount,\n            _dstChainId,\n            _nonce,\n            _maxSlippage,\n            message,\n            _bridgeSendType,\n            msg.value\n        );\n    }\n\n    // called by MessageBus on destination chain to receive message, record and emit info.\n    // the associated token transfer is guaranteed to have already been received\n    function executeMessageWithTransfer(\n        address, // srcContract\n        address _token,\n        uint256 _amount,\n        uint64 _srcChainId,\n        bytes memory _message,\n        address // executor\n    ) external payable override onlyMessageBus returns (ExecutionStatus) {\n        (address sender, bytes memory note) = abi.decode((_message), (address, bytes));\n        balances[sender][_token] += _amount;\n        emit MessageWithTransferReceived(sender, _token, _amount, _srcChainId, note);\n        return ExecutionStatus.Success;\n    }\n\n    // called by MessageBus on source chain to handle message with failed token transfer\n    // the associated token transfer is guaranteed to have already been refunded\n    function executeMessageWithTransferRefund(\n        address _token,\n        uint256 _amount,\n        bytes calldata _message,\n        address // executor\n    ) external payable override onlyMessageBus returns (ExecutionStatus) {\n        (address sender, bytes memory note) = abi.decode((_message), (address, bytes));\n        IERC20(_token).safeTransfer(sender, _amount);\n        emit MessageWithTransferRefunded(sender, _token, _amount, note);\n        return ExecutionStatus.Success;\n    }\n\n    // called by user on destination chain to withdraw tokens\n    function withdraw(address _token, uint256 _amount) external {\n        balances[msg.sender][_token] -= _amount;\n        IERC20(_token).safeTransfer(msg.sender, _amount);\n    }\n}\n"
    },
    "contracts/message/apps/examples/MsgExampleInOrder.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.9;\n\nimport \"../../framework/MessageApp.sol\";\n\n// a simple example to enforce in-order message delivery\ncontract MsgExampleInOrder is MessageApp {\n    event MessageReceived(address srcContract, uint64 srcChainId, address sender, uint64 seq, bytes message);\n\n    // map at source chain. (dstChainId, dstContract) -> seq\n    mapping(uint64 => mapping(address => uint64)) public sendSeq;\n\n    // map at destination chain (srcChainId, srcContract) -> seq\n    mapping(uint64 => mapping(address => uint64)) public recvSeq;\n\n    constructor(address _messageBus) MessageApp(_messageBus) {}\n\n    // called by user on source chain to send cross-chain message\n    function sendMessage(\n        address _dstContract,\n        uint64 _dstChainId,\n        bytes calldata _message\n    ) external payable {\n        uint64 seq = sendSeq[_dstChainId][_dstContract];\n        bytes memory message = abi.encode(msg.sender, seq, _message);\n        sendMessage(_dstContract, _dstChainId, message, msg.value);\n        sendSeq[_dstChainId][_dstContract] += 1;\n    }\n\n    // called by MessageBus on destination chain to receive message\n    function executeMessage(\n        address _srcContract,\n        uint64 _srcChainId,\n        bytes calldata _message,\n        address // executor\n    ) external payable override onlyMessageBus returns (ExecutionStatus) {\n        (address sender, uint64 seq, bytes memory message) = abi.decode((_message), (address, uint64, bytes));\n        uint64 expectedSeq = recvSeq[_srcChainId][_srcContract];\n        if (seq != expectedSeq) {\n            // sequence number not expected, let executor retry.\n            // Note: cannot revert here, because once a message execute tx is reverted, it cannot be retried later.\n            return ExecutionStatus.Retry;\n        }\n        emit MessageReceived(_srcContract, _srcChainId, sender, seq, message);\n        recvSeq[_srcChainId][_srcContract] += 1;\n        return ExecutionStatus.Success;\n    }\n}\n"
    },
    "contracts/message/apps/examples/MsgTest.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../../framework/MessageApp.sol\";\nimport \"../../../safeguard/Ownable.sol\";\n\n/** @title Application to test message with transfer refund flow */\ncontract MsgTest is MessageApp, Ownable {\n    using SafeERC20 for IERC20;\n    uint64 nonce;\n\n    event MessageReceivedWithTransfer(\n        address token,\n        uint256 amount,\n        address sender,\n        uint64 srcChainId,\n        address receiver,\n        bytes message\n    );\n    event Refunded(address receiver, address token, uint256 amount, bytes message);\n    event MessageReceived(address sender, uint64 srcChainId, uint64 nonce, bytes message);\n    event Message2Received(bytes sender, uint64 srcChainId, uint64 nonce, bytes message);\n\n    constructor(address _messageBus) MessageApp(_messageBus) {}\n\n    function sendMessageWithTransfer(\n        address _receiver,\n        address _token,\n        uint256 _amount,\n        uint64 _dstChainId,\n        uint32 _maxSlippage,\n        bytes calldata _message,\n        MsgDataTypes.BridgeSendType _bridgeSendType\n    ) external payable {\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\n        bytes memory message = abi.encode(msg.sender, _message);\n        sendMessageWithTransfer(\n            _receiver,\n            _token,\n            _amount,\n            _dstChainId,\n            nonce,\n            _maxSlippage,\n            message,\n            _bridgeSendType,\n            msg.value\n        );\n        nonce++;\n    }\n\n    function executeMessageWithTransfer(\n        address _sender,\n        address _token,\n        uint256 _amount,\n        uint64 _srcChainId,\n        bytes memory _message,\n        address // executor\n    ) external payable override onlyMessageBus returns (ExecutionStatus) {\n        (address receiver, bytes memory message) = abi.decode((_message), (address, bytes));\n        IERC20(_token).safeTransfer(receiver, _amount);\n        emit MessageReceivedWithTransfer(_token, _amount, _sender, _srcChainId, receiver, message);\n        return ExecutionStatus.Success;\n    }\n\n    function executeMessageWithTransferRefund(\n        address _token,\n        uint256 _amount,\n        bytes calldata _message,\n        address // executor\n    ) external payable override onlyMessageBus returns (ExecutionStatus) {\n        (address receiver, bytes memory message) = abi.decode((_message), (address, bytes));\n        IERC20(_token).safeTransfer(receiver, _amount);\n        emit Refunded(receiver, _token, _amount, message);\n        return ExecutionStatus.Success;\n    }\n\n    function sendMessage(\n        address _receiver,\n        uint64 _dstChainId,\n        bytes calldata _message\n    ) external payable {\n        bytes memory message = abi.encode(nonce, _message);\n        nonce++;\n        sendMessage(_receiver, _dstChainId, message, msg.value);\n    }\n\n    function sendMessage(\n        bytes calldata _receiver,\n        uint64 _dstChainId,\n        bytes calldata _message\n    ) external payable {\n        bytes memory message = abi.encode(nonce, _message);\n        nonce++;\n        sendMessage(_receiver, _dstChainId, message, msg.value);\n    }\n\n    function sendMessages(\n        address _receiver,\n        uint64 _dstChainId,\n        bytes[] calldata _messages,\n        uint256[] calldata _fees\n    ) external payable {\n        for (uint256 i = 0; i < _messages.length; i++) {\n            bytes memory message = abi.encode(nonce, _messages[i]);\n            nonce++;\n            sendMessage(_receiver, _dstChainId, message, _fees[i]);\n        }\n    }\n\n    function sendMessageWithNonce(\n        address _receiver,\n        uint64 _dstChainId,\n        bytes calldata _message,\n        uint64 _nonce\n    ) external payable {\n        bytes memory message = abi.encode(_nonce, _message);\n        sendMessage(_receiver, _dstChainId, message, msg.value);\n    }\n\n    function executeMessage(\n        address _sender,\n        uint64 _srcChainId,\n        bytes calldata _message,\n        address // executor\n    ) external payable override onlyMessageBus returns (ExecutionStatus) {\n        (uint64 n, bytes memory message) = abi.decode((_message), (uint64, bytes));\n        require(n != 100000000000001, \"invalid nonce\"); // test revert with reason\n        if (n == 100000000000002) {\n            // test revert without reason\n            revert();\n        } else if (n == 100000000000003) {\n            return ExecutionStatus.Retry;\n        }\n        // test execution revert\n        require(n != 100000000000004, _abortReason(\"invalid nonce\"));\n        emit MessageReceived(_sender, _srcChainId, n, message);\n        return ExecutionStatus.Success;\n    }\n\n    function executeMessage(\n        bytes calldata _sender,\n        uint64 _srcChainId,\n        bytes calldata _message,\n        address // executor\n    ) external payable override onlyMessageBus returns (ExecutionStatus) {\n        (uint64 n, bytes memory message) = abi.decode((_message), (uint64, bytes));\n        emit Message2Received(_sender, _srcChainId, n, message);\n        return ExecutionStatus.Success;\n    }\n\n    function drainToken(address _token, uint256 _amount) external onlyOwner {\n        IERC20(_token).safeTransfer(msg.sender, _amount);\n    }\n}\n"
    },
    "contracts/message/apps/examples/TransferSwap.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../../framework/MessageApp.sol\";\nimport \"../../../safeguard/Ownable.sol\";\nimport \"../../../interfaces/IWETH.sol\";\nimport \"../../../interfaces/IUniswapV2.sol\";\n\n/**\n * @title Demo application contract that facilitates swapping on a chain, transferring to another chain,\n * and swapping another time on the destination chain before sending the result tokens to a user\n */\ncontract TransferSwap is MessageApp, Ownable {\n    using SafeERC20 for IERC20;\n\n    modifier onlyEOA() {\n        require(msg.sender == tx.origin, \"Not EOA\");\n        _;\n    }\n\n    struct SwapInfo {\n        // if this array has only one element, it means no need to swap\n        address[] path;\n        // the following fields are only needed if path.length > 1\n        address dex; // the DEX to use for the swap\n        uint256 deadline; // deadline for the swap\n        uint256 minRecvAmt; // minimum receive amount for the swap\n    }\n\n    struct SwapRequest {\n        SwapInfo swap;\n        // the receiving party (the user) of the final output token\n        address receiver;\n        // this field is best to be per-user per-transaction unique so that\n        // a nonce that is specified by the calling party (the user),\n        uint64 nonce;\n        // indicates whether the output token coming out of the swap on destination\n        // chain should be unwrapped before sending to the user\n        bool nativeOut;\n    }\n\n    enum SwapStatus {\n        Null,\n        Succeeded,\n        Failed,\n        Fallback\n    }\n\n    // emitted when requested dstChainId == srcChainId, no bridging\n    event DirectSwap(\n        bytes32 id,\n        uint64 srcChainId,\n        uint256 amountIn,\n        address tokenIn,\n        uint256 amountOut,\n        address tokenOut\n    );\n    event SwapRequestSent(bytes32 id, uint64 dstChainId, uint256 srcAmount, address srcToken, address dstToken);\n    event SwapRequestDone(bytes32 id, uint256 dstAmount, SwapStatus status);\n\n    mapping(address => uint256) public minSwapAmounts;\n    mapping(address => bool) supportedDex;\n\n    // erc20 wrap of gas token of this chain, eg. WETH\n    address public nativeWrap;\n\n    constructor(\n        address _messageBus,\n        address _supportedDex,\n        address _nativeWrap\n    ) MessageApp(_messageBus) {\n        supportedDex[_supportedDex] = true;\n        nativeWrap = _nativeWrap;\n    }\n\n    function transferWithSwapNative(\n        address _receiver,\n        uint256 _amountIn,\n        uint64 _dstChainId,\n        SwapInfo calldata _srcSwap,\n        SwapInfo calldata _dstSwap,\n        uint32 _maxBridgeSlippage,\n        uint64 _nonce,\n        bool _nativeOut\n    ) external payable onlyEOA {\n        require(msg.value >= _amountIn, \"Amount insufficient\");\n        require(_srcSwap.path[0] == nativeWrap, \"token mismatch\");\n        IWETH(nativeWrap).deposit{value: _amountIn}();\n        _transferWithSwap(\n            _receiver,\n            _amountIn,\n            _dstChainId,\n            _srcSwap,\n            _dstSwap,\n            _maxBridgeSlippage,\n            _nonce,\n            _nativeOut,\n            msg.value - _amountIn\n        );\n    }\n\n    function transferWithSwap(\n        address _receiver,\n        uint256 _amountIn,\n        uint64 _dstChainId,\n        SwapInfo calldata _srcSwap,\n        SwapInfo calldata _dstSwap,\n        uint32 _maxBridgeSlippage,\n        uint64 _nonce\n    ) external payable onlyEOA {\n        IERC20(_srcSwap.path[0]).safeTransferFrom(msg.sender, address(this), _amountIn);\n        _transferWithSwap(\n            _receiver,\n            _amountIn,\n            _dstChainId,\n            _srcSwap,\n            _dstSwap,\n            _maxBridgeSlippage,\n            _nonce,\n            false,\n            msg.value\n        );\n    }\n\n    /**\n     * @notice Sends a cross-chain transfer via the liquidity pool-based bridge and sends a message specifying a wanted swap action on the\n               destination chain via the message bus\n     * @param _receiver the app contract that implements the MessageReceiver abstract contract\n     *        NOTE not to be confused with the receiver field in SwapInfo which is an EOA address of a user\n     * @param _amountIn the input amount that the user wants to swap and/or bridge\n     * @param _dstChainId destination chain ID\n     * @param _srcSwap a struct containing swap related requirements\n     * @param _dstSwap a struct containing swap related requirements\n     * @param _maxBridgeSlippage the max acceptable slippage at bridge, given as percentage in point (pip). Eg. 5000 means 0.5%.\n     *        Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the\n     *        transfer can be refunded.\n     * @param _fee the fee to pay to MessageBus.\n     */\n    function _transferWithSwap(\n        address _receiver,\n        uint256 _amountIn,\n        uint64 _dstChainId,\n        SwapInfo memory _srcSwap,\n        SwapInfo memory _dstSwap,\n        uint32 _maxBridgeSlippage,\n        uint64 _nonce,\n        bool _nativeOut,\n        uint256 _fee\n    ) private {\n        require(_srcSwap.path.length > 0, \"empty src swap path\");\n        address srcTokenOut = _srcSwap.path[_srcSwap.path.length - 1];\n\n        require(_amountIn > minSwapAmounts[_srcSwap.path[0]], \"amount must be greater than min swap amount\");\n        uint64 chainId = uint64(block.chainid);\n        require(_srcSwap.path.length > 1 || _dstChainId != chainId, \"noop is not allowed\"); // revert early to save gas\n\n        uint256 srcAmtOut = _amountIn;\n\n        // swap source token for intermediate token on the source DEX\n        if (_srcSwap.path.length > 1) {\n            bool ok = true;\n            (ok, srcAmtOut) = _trySwap(_srcSwap, _amountIn);\n            if (!ok) revert(\"src swap failed\");\n        }\n\n        if (_dstChainId == chainId) {\n            _directSend(_receiver, _amountIn, chainId, _srcSwap, _nonce, srcTokenOut, srcAmtOut);\n        } else {\n            _crossChainTransferWithSwap(\n                _receiver,\n                _amountIn,\n                chainId,\n                _dstChainId,\n                _srcSwap,\n                _dstSwap,\n                _maxBridgeSlippage,\n                _nonce,\n                _nativeOut,\n                _fee,\n                srcTokenOut,\n                srcAmtOut\n            );\n        }\n    }\n\n    function _directSend(\n        address _receiver,\n        uint256 _amountIn,\n        uint64 _chainId,\n        SwapInfo memory _srcSwap,\n        uint64 _nonce,\n        address srcTokenOut,\n        uint256 srcAmtOut\n    ) private {\n        // no need to bridge, directly send the tokens to user\n        IERC20(srcTokenOut).safeTransfer(_receiver, srcAmtOut);\n        // use uint64 for chainid to be consistent with other components in the system\n        bytes32 id = keccak256(abi.encode(msg.sender, _chainId, _receiver, _nonce, _srcSwap));\n        emit DirectSwap(id, _chainId, _amountIn, _srcSwap.path[0], srcAmtOut, srcTokenOut);\n    }\n\n    function _crossChainTransferWithSwap(\n        address _receiver,\n        uint256 _amountIn,\n        uint64 _chainId,\n        uint64 _dstChainId,\n        SwapInfo memory _srcSwap,\n        SwapInfo memory _dstSwap,\n        uint32 _maxBridgeSlippage,\n        uint64 _nonce,\n        bool _nativeOut,\n        uint256 _fee,\n        address srcTokenOut,\n        uint256 srcAmtOut\n    ) private {\n        require(_dstSwap.path.length > 0, \"empty dst swap path\");\n        bytes memory message = abi.encode(\n            SwapRequest({swap: _dstSwap, receiver: msg.sender, nonce: _nonce, nativeOut: _nativeOut})\n        );\n        bytes32 id = _computeSwapRequestId(msg.sender, _chainId, _dstChainId, message);\n        // bridge the intermediate token to destination chain along with the message\n        // NOTE In production, it's better use a per-user per-transaction nonce so that it's less likely transferId collision\n        // would happen at Bridge contract. Currently this nonce is a timestamp supplied by frontend\n        sendMessageWithTransfer(\n            _receiver,\n            srcTokenOut,\n            srcAmtOut,\n            _dstChainId,\n            _nonce,\n            _maxBridgeSlippage,\n            message,\n            MsgDataTypes.BridgeSendType.Liquidity,\n            _fee\n        );\n        emit SwapRequestSent(id, _dstChainId, _amountIn, _srcSwap.path[0], _dstSwap.path[_dstSwap.path.length - 1]);\n    }\n\n    /**\n     * @notice called by MessageBus when the tokens are checked to be arrived at this contract's address.\n               sends the amount received to the receiver. swaps beforehand if swap behavior is defined in message\n     * NOTE: if the swap fails, it sends the tokens received directly to the receiver as fallback behavior\n     * @param _token the address of the token sent through the bridge\n     * @param _amount the amount of tokens received at this contract through the cross-chain bridge\n     * @param _srcChainId source chain ID\n     * @param _message SwapRequest message that defines the swap behavior on this destination chain\n     */\n    function executeMessageWithTransfer(\n        address, // _sender\n        address _token,\n        uint256 _amount,\n        uint64 _srcChainId,\n        bytes memory _message,\n        address // executor\n    ) external payable override onlyMessageBus returns (ExecutionStatus) {\n        SwapRequest memory m = abi.decode((_message), (SwapRequest));\n        require(_token == m.swap.path[0], \"bridged token must be the same as the first token in destination swap path\");\n        bytes32 id = _computeSwapRequestId(m.receiver, _srcChainId, uint64(block.chainid), _message);\n        uint256 dstAmount;\n        SwapStatus status = SwapStatus.Succeeded;\n\n        if (m.swap.path.length > 1) {\n            bool ok = true;\n            (ok, dstAmount) = _trySwap(m.swap, _amount);\n            if (ok) {\n                _sendToken(m.swap.path[m.swap.path.length - 1], dstAmount, m.receiver, m.nativeOut);\n                status = SwapStatus.Succeeded;\n            } else {\n                // handle swap failure, send the received token directly to receiver\n                _sendToken(_token, _amount, m.receiver, false);\n                dstAmount = _amount;\n                status = SwapStatus.Fallback;\n            }\n        } else {\n            // no need to swap, directly send the bridged token to user\n            _sendToken(m.swap.path[0], _amount, m.receiver, m.nativeOut);\n            dstAmount = _amount;\n            status = SwapStatus.Succeeded;\n        }\n        emit SwapRequestDone(id, dstAmount, status);\n        // always return success since swap failure is already handled in-place\n        return ExecutionStatus.Success;\n    }\n\n    /**\n     * @notice called by MessageBus when the executeMessageWithTransfer call fails. does nothing but emitting a \"fail\" event\n     * @param _srcChainId source chain ID\n     * @param _message SwapRequest message that defines the swap behavior on this destination chain\n     */\n    function executeMessageWithTransferFallback(\n        address, // _sender\n        address, // _token\n        uint256, // _amount\n        uint64 _srcChainId,\n        bytes memory _message,\n        address // executor\n    ) external payable override onlyMessageBus returns (ExecutionStatus) {\n        SwapRequest memory m = abi.decode((_message), (SwapRequest));\n        bytes32 id = _computeSwapRequestId(m.receiver, _srcChainId, uint64(block.chainid), _message);\n        emit SwapRequestDone(id, 0, SwapStatus.Failed);\n        // always return fail to mark this transfer as failed since if this function is called then there nothing more\n        // we can do in this app as the swap failures are already handled in executeMessageWithTransfer\n        return ExecutionStatus.Fail;\n    }\n\n    function _trySwap(SwapInfo memory _swap, uint256 _amount) private returns (bool ok, uint256 amountOut) {\n        uint256 zero;\n        if (!supportedDex[_swap.dex]) {\n            return (false, zero);\n        }\n        IERC20(_swap.path[0]).safeIncreaseAllowance(_swap.dex, _amount);\n        try\n            IUniswapV2(_swap.dex).swapExactTokensForTokens(\n                _amount,\n                _swap.minRecvAmt,\n                _swap.path,\n                address(this),\n                _swap.deadline\n            )\n        returns (uint256[] memory amounts) {\n            return (true, amounts[amounts.length - 1]);\n        } catch {\n            return (false, zero);\n        }\n    }\n\n    function _sendToken(\n        address _token,\n        uint256 _amount,\n        address _receiver,\n        bool _nativeOut\n    ) private {\n        if (_nativeOut) {\n            require(_token == nativeWrap, \"token mismatch\");\n            IWETH(nativeWrap).withdraw(_amount);\n            (bool sent, ) = _receiver.call{value: _amount, gas: 50000}(\"\");\n            require(sent, \"failed to send native\");\n        } else {\n            IERC20(_token).safeTransfer(_receiver, _amount);\n        }\n    }\n\n    function _computeSwapRequestId(\n        address _sender,\n        uint64 _srcChainId,\n        uint64 _dstChainId,\n        bytes memory _message\n    ) private pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_sender, _srcChainId, _dstChainId, _message));\n    }\n\n    function setMinSwapAmount(address _token, uint256 _minSwapAmount) external onlyOwner {\n        minSwapAmounts[_token] = _minSwapAmount;\n    }\n\n    function setSupportedDex(address _dex, bool _enabled) external onlyOwner {\n        supportedDex[_dex] = _enabled;\n    }\n\n    function setNativeWrap(address _nativeWrap) external onlyOwner {\n        nativeWrap = _nativeWrap;\n    }\n\n    function setMessageBus(address _messageBus) public onlyOwner {\n        messageBus = _messageBus;\n    }\n\n    // This is needed to receive ETH when calling `IWETH.withdraw`\n    receive() external payable {}\n}\n"
    },
    "contracts/message/apps/examples/TransferSwapSendBack.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.9;\n\nimport \"../../framework/MessageApp.sol\";\n\ninterface ISwapToken {\n    // function sellBase(address to) external returns (uint256);\n    // uniswap v2\n    function swapExactTokensForTokens(\n        uint256,\n        uint256,\n        address[] calldata,\n        address,\n        uint256\n    ) external returns (uint256[] memory);\n}\n\ncontract CrossChainSwap is MessageApp {\n    using SafeERC20 for IERC20;\n\n    address public dex; // needed on swap chain\n\n    struct SwapInfo {\n        address wantToken; // token user want to receive on dest chain\n        address user;\n        bool sendBack; // if true, send wantToken back to start chain\n        uint32 cbrMaxSlippage; // _maxSlippage for cbridge send\n    }\n\n    constructor(address _messageBus, address dex_) MessageApp(_messageBus) {\n        dex = dex_;\n    }\n\n    // ========== on start chain ==========\n\n    uint64 nonce; // required by IBridge.send\n\n    // this func could be called by a router contract\n    function startCrossChainSwap(\n        address _receiver,\n        address _token,\n        uint256 _amount,\n        uint64 _dstChainId,\n        SwapInfo calldata swapInfo // wantToken on destChain and actual user address as receiver when send back\n    ) external payable {\n        nonce += 1;\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\n        bytes memory message = abi.encode(swapInfo);\n        sendMessageWithTransfer(\n            _receiver,\n            _token,\n            _amount,\n            _dstChainId,\n            nonce,\n            swapInfo.cbrMaxSlippage,\n            message,\n            MsgDataTypes.BridgeSendType.Liquidity,\n            msg.value\n        );\n    }\n\n    // ========== on swap chain ==========\n    // do dex, send received asset to src chain via bridge\n    function executeMessageWithTransfer(\n        address, // _sender\n        address _token,\n        uint256 _amount,\n        uint64 _srcChainId,\n        bytes memory _message,\n        address // executor\n    ) external payable override onlyMessageBus returns (ExecutionStatus) {\n        SwapInfo memory swapInfo = abi.decode((_message), (SwapInfo));\n        IERC20(_token).approve(dex, _amount);\n        address[] memory path = new address[](2);\n        path[0] = _token;\n        path[1] = swapInfo.wantToken;\n        if (swapInfo.sendBack) {\n            nonce += 1;\n            uint256[] memory swapReturn = ISwapToken(dex).swapExactTokensForTokens(\n                _amount,\n                0,\n                path,\n                address(this),\n                type(uint256).max\n            );\n            // send received token back to start chain. swapReturn[1] is amount of wantToken\n            sendTokenTransfer(\n                swapInfo.user,\n                swapInfo.wantToken,\n                swapReturn[1],\n                _srcChainId,\n                nonce,\n                swapInfo.cbrMaxSlippage,\n                MsgDataTypes.BridgeSendType.Liquidity\n            );\n        } else {\n            // swap to wantToken and send to user\n            ISwapToken(dex).swapExactTokensForTokens(_amount, 0, path, swapInfo.user, type(uint256).max);\n        }\n        // bytes memory notice; // send back to src chain to handleMessage\n        // sendMessage(_sender, _srcChainId, notice);\n        return ExecutionStatus.Success;\n    }\n}\n"
    },
    "contracts/message/apps/nft-bridge/NFTBridge.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity 0.8.17;\n\nimport \"../../framework/MessageReceiverApp.sol\";\nimport \"../../interfaces/IMessageBus.sol\";\nimport \"../../../safeguard/Pauser.sol\";\n\n// interface for NFT contract, ERC721 and metadata, only funcs needed by NFTBridge\ninterface INFT {\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    // we do not support NFT that charges transfer fees\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    // impl by NFToken contract, mint an NFT with id and uri to user or burn\n    function bridgeMint(\n        address to,\n        uint256 id,\n        string memory uri\n    ) external;\n\n    function burn(uint256 id) external;\n}\n\n/** @title NFT Bridge */\ncontract NFTBridge is MessageReceiverApp, Pauser {\n    /// per dest chain id executor fee in this chain's gas token\n    mapping(uint64 => uint256) public destTxFee;\n    /// per dest chain id NFTBridge address\n    mapping(uint64 => address) public destBridge;\n    /// first key is NFT address on this chain, 2nd key is dest chain id, value is address on dest chain\n    mapping(address => mapping(uint64 => address)) public destNFTAddr;\n\n    /// only set to true if NFT addr on this chain is the orig, so we will use deposit/withdraw instead of burn/mint.\n    /// not applicable for mcn nft (always burn/mint)\n    mapping(address => bool) public origNFT;\n\n    /// only for non-evm chains and address can't fit 20bytes\n    mapping(uint64 => bytes) public destBridge2;\n    mapping(address => mapping(uint64 => bytes)) public destNFTAddr2;\n\n    struct NFTMsg {\n        address user; // receiver of minted or withdrawn NFT\n        address nft; // NFT contract on mint/withdraw chain\n        uint256 id; // token ID\n        string uri; // tokenURI from source NFT\n    }\n    // for non-evm dst chain, address type is bytes\n    struct NFTMsg2 {\n        bytes user; // receiver of minted or withdrawn NFT\n        bytes nft; // NFT contract on mint/withdraw chain\n        uint256 id; // token ID\n        string uri; // tokenURI from source NFT\n    }\n    // emit in deposit or burn\n    event Sent(address sender, address srcNft, uint256 id, uint64 dstChid, address receiver, address dstNft);\n    // bytes type for receiver and dstNft\n    event Sent2(address sender, address srcNft, uint256 id, uint64 dstChid, bytes receiver, bytes dstNft);\n    // emit for mint or withdraw message\n    event Received(address receiver, address nft, uint256 id, uint64 srcChid);\n\n    // emit when params change\n    event SetDestNFT(address srcNft, uint64 dstChid, address dstNft);\n    event SetTxFee(uint64 chid, uint256 fee);\n    event SetDestBridge(uint64 dstChid, address dstNftBridge);\n    event FeeClaimed(uint256 amount);\n    event SetOrigNFT(address nft, bool isOrig);\n    // emit if executeMessage calls nft transfer or bridgeMint returns error\n    event ExtCallErr(bytes returnData);\n\n    event SetDestNFT2(address srcNft, uint64 dstChid, bytes dstNft);\n    event SetDestBridge2(uint64 dstChid, bytes dstNftBridge);\n\n    constructor(address _msgBus) {\n        messageBus = _msgBus;\n    }\n\n    // only to be called by Proxy via delegatecall and will modify Proxy state\n    // initOwner will fail if owner is already set, so only delegateCall will work\n    function init(address _msgBus) external {\n        initOwner();\n        messageBus = _msgBus;\n    }\n\n    /**\n     * @notice totalFee returns gas token value to be set in user tx, includes both msg fee and executor fee for dest chain\n     * @dev we assume if dst chain address are bytes, user and nft are same length, otherwise we need to add receiver to args\n     * @param _dstChid dest chain ID\n     * @param _nft address of source NFT contract\n     * @param _id token ID to bridge (need to get accurate tokenURI length)\n     * @return total fee needed for user tx\n     */\n    function totalFee(\n        uint64 _dstChid,\n        address _nft,\n        uint256 _id\n    ) external view returns (uint256) {\n        string memory _uri = INFT(_nft).tokenURI(_id);\n        bytes memory message;\n        // try non-evm first\n        bytes memory dstNft = destNFTAddr2[_nft][_dstChid];\n        if (dstNft.length > 0) {\n            message = abi.encode(NFTMsg2(dstNft, dstNft, _id, _uri));\n        } else {\n            // evm chains or not configured, assume to be evm, 20 bytes address\n            message = abi.encode(NFTMsg(_nft, _nft, _id, _uri));\n        }\n        return IMessageBus(messageBus).calcFee(message) + destTxFee[_dstChid];\n    }\n\n    // ===== called by user\n    /**\n     * @notice locks or burn user's NFT in this contract and send message to mint (or withdraw) on dest chain\n     * @param _nft address of source NFT contract\n     * @param _id nft token ID to bridge\n     * @param _dstChid dest chain ID\n     * @param _receiver receiver address on dest chain\n     */\n    function sendTo(\n        address _nft,\n        uint256 _id,\n        uint64 _dstChid,\n        address _receiver\n    ) external payable whenNotPaused {\n        require(msg.sender == INFT(_nft).ownerOf(_id), \"not token owner\");\n        // must save _uri before burn\n        string memory _uri = INFT(_nft).tokenURI(_id);\n        lockOrBurn(_nft, _id);\n        (address _dstBridge, address _dstNft) = checkAddr(_nft, _dstChid);\n        msgBus(_dstBridge, _dstChid, abi.encode(NFTMsg(_receiver, _dstNft, _id, _uri)));\n        emit Sent(msg.sender, _nft, _id, _dstChid, _receiver, _dstNft);\n    }\n\n    /**\n     * @notice locks or burn user's NFT in this contract and send message to mint (or withdraw) on dest chain\n     * @param _nft address of source NFT contract\n     * @param _id nft token ID to bridge\n     * @param _dstChid dest chain ID\n     * @param _receiver receiver address on dest chain, arbitrary bytes\n     */\n    function sendTo(\n        address _nft,\n        uint256 _id,\n        uint64 _dstChid,\n        bytes calldata _receiver\n    ) external payable whenNotPaused {\n        require(msg.sender == INFT(_nft).ownerOf(_id), \"not token owner\");\n        // must save _uri before burn\n        string memory _uri = INFT(_nft).tokenURI(_id);\n        lockOrBurn(_nft, _id);\n        (bytes memory _dstBridge, bytes memory _dstNft) = checkAddr2(_nft, _dstChid);\n        msgBus(_dstBridge, _dstChid, abi.encode(NFTMsg2(_receiver, _dstNft, _id, _uri)));\n        emit Sent2(msg.sender, _nft, _id, _dstChid, _receiver, _dstNft);\n    }\n\n    // ===== called by MCN NFT after NFT is burnt\n    function sendMsg(\n        uint64 _dstChid,\n        address _sender,\n        address _receiver,\n        uint256 _id,\n        string calldata _uri\n    ) external payable whenNotPaused {\n        address _nft = msg.sender;\n        (address _dstBridge, address _dstNft) = checkAddr(_nft, _dstChid);\n        msgBus(_dstBridge, _dstChid, abi.encode(NFTMsg(_receiver, _dstNft, _id, _uri)));\n        emit Sent(_sender, _nft, _id, _dstChid, _receiver, _dstNft);\n    }\n\n    // for non-evm chains and address can't fit 20bytes or non-hex\n    function sendMsg(\n        uint64 _dstChid,\n        address _sender,\n        bytes calldata _receiver,\n        uint256 _id,\n        string calldata _uri\n    ) external payable whenNotPaused {\n        address _nft = msg.sender;\n        (bytes memory _dstBridge, bytes memory _dstNft) = checkAddr2(_nft, _dstChid);\n        msgBus(_dstBridge, _dstChid, abi.encode(NFTMsg2(_receiver, _dstNft, _id, _uri)));\n        emit Sent2(_sender, _nft, _id, _dstChid, _receiver, _dstNft);\n    }\n\n    // ===== called by msgbus\n    function executeMessage(\n        address sender,\n        uint64 srcChid,\n        bytes calldata _message,\n        address // executor\n    ) external payable override onlyMessageBus returns (ExecutionStatus) {\n        // Must check sender to ensure msg is from another nft bridge\n        // but we allow retry later in case it's a temporary config error\n        // risk is invalid sender will be retried but this can be easily filtered\n        // in executor or require manual trigger for retry\n        if (paused() || sender != destBridge[srcChid]) {\n            return ExecutionStatus.Retry;\n        }\n        return xferOrMint(_message, srcChid);\n    }\n\n    function executeMessage(\n        bytes calldata sender,\n        uint64 srcChid,\n        bytes calldata _message,\n        address // executor\n    ) external payable override onlyMessageBus returns (ExecutionStatus) {\n        if (paused() || keccak256(sender) != keccak256(destBridge2[srcChid])) {\n            return ExecutionStatus.Retry;\n        }\n        return xferOrMint(_message, srcChid);\n    }\n\n    // ===== internal utils\n    // lockOrBurn on sender side\n    function lockOrBurn(address _nft, uint256 _id) internal {\n        if (origNFT[_nft] == true) {\n            // deposit\n            INFT(_nft).transferFrom(msg.sender, address(this), _id);\n            require(INFT(_nft).ownerOf(_id) == address(this), \"transfer NFT failed\");\n        } else {\n            // burn\n            INFT(_nft).burn(_id);\n        }\n    }\n\n    // xferOrMint on receiver side, transfer or mint NFT to receiver\n    function xferOrMint(bytes calldata _message, uint64 srcChid) internal returns (ExecutionStatus) {\n        // withdraw original locked nft back to user, or mint new nft depending on if this is the orig chain of nft\n        NFTMsg memory nftMsg = abi.decode((_message), (NFTMsg));\n        // if we are on nft orig chain, use transfer, otherwise, use mint\n        // we must never return fail because burnt nft will be lost forever\n        if (origNFT[nftMsg.nft] == true) {\n            try INFT(nftMsg.nft).transferFrom(address(this), nftMsg.user, nftMsg.id) {\n                // do nothing here to move on to emit Received event and return success\n            } catch (bytes memory returnData) {\n                emit ExtCallErr(returnData);\n                return ExecutionStatus.Retry;\n            }\n        } else {\n            try INFT(nftMsg.nft).bridgeMint(nftMsg.user, nftMsg.id, nftMsg.uri) {\n                // do nothing here to move on to emit Received event and return success\n            } catch (bytes memory returnData) {\n                emit ExtCallErr(returnData);\n                return ExecutionStatus.Retry;\n            }\n        }\n        emit Received(nftMsg.user, nftMsg.nft, nftMsg.id, srcChid);\n        return ExecutionStatus.Success;\n    }\n\n    // check _nft and destChid are valid, return dstBridge and dstNft\n    function checkAddr(address _nft, uint64 _dstChid) internal view returns (address dstBridge, address dstNft) {\n        dstBridge = destBridge[_dstChid];\n        require(dstBridge != address(0), \"dest NFT Bridge not found\");\n        dstNft = destNFTAddr[_nft][_dstChid];\n        require(dstNft != address(0), \"dest NFT not found\");\n    }\n\n    function checkAddr2(address _nft, uint64 _dstChid)\n        internal\n        view\n        returns (bytes memory dstBridge, bytes memory dstNft)\n    {\n        dstBridge = destBridge2[_dstChid];\n        require(dstBridge.length != 0, \"dest NFT Bridge not found\");\n        dstNft = destNFTAddr2[_nft][_dstChid];\n        require(dstNft.length != 0, \"dest NFT not found\");\n    }\n\n    // check fee and call msgbus sendMessage\n    function msgBus(\n        address _dstBridge,\n        uint64 _dstChid,\n        bytes memory message\n    ) internal {\n        uint256 fee = IMessageBus(messageBus).calcFee(message);\n        require(msg.value >= fee + destTxFee[_dstChid], \"insufficient fee\");\n        IMessageBus(messageBus).sendMessage{value: fee}(_dstBridge, _dstChid, message);\n    }\n\n    function msgBus(\n        bytes memory _dstBridge,\n        uint64 _dstChid,\n        bytes memory message\n    ) internal {\n        uint256 fee = IMessageBus(messageBus).calcFee(message);\n        require(msg.value >= fee + destTxFee[_dstChid], \"insufficient fee\");\n        IMessageBus(messageBus).sendMessage{value: fee}(_dstBridge, _dstChid, message);\n    }\n\n    // only owner\n    // set per NFT, per chain id, address\n    function setDestNFT(\n        address srcNft,\n        uint64 dstChid,\n        address dstNft\n    ) external onlyOwner {\n        destNFTAddr[srcNft][dstChid] = dstNft;\n        emit SetDestNFT(srcNft, dstChid, dstNft);\n    }\n\n    // add to destNFTAddr2\n    function setDestNFT(\n        address srcNft,\n        uint64 dstChid,\n        bytes calldata dstNft\n    ) external onlyOwner {\n        destNFTAddr2[srcNft][dstChid] = dstNft;\n        emit SetDestNFT2(srcNft, dstChid, dstNft);\n    }\n\n    // set all dest chains\n    function setDestNFTs(\n        address srcNft,\n        uint64[] calldata dstChid,\n        address[] calldata dstNft\n    ) external onlyOwner {\n        require(dstChid.length == dstNft.length, \"length mismatch\");\n        for (uint256 i = 0; i < dstChid.length; i++) {\n            destNFTAddr[srcNft][dstChid[i]] = dstNft[i];\n        }\n    }\n\n    // set destTxFee\n    function setTxFee(uint64 chid, uint256 fee) external onlyOwner {\n        destTxFee[chid] = fee;\n        emit SetTxFee(chid, fee);\n    }\n\n    // set per chain id, nft bridge address\n    function setDestBridge(uint64 dstChid, address dstNftBridge) external onlyOwner {\n        destBridge[dstChid] = dstNftBridge;\n        emit SetDestBridge(dstChid, dstNftBridge);\n    }\n\n    function setDestBridge(uint64 dstChid, bytes calldata dstNftBridge) external onlyOwner {\n        destBridge2[dstChid] = dstNftBridge;\n        emit SetDestBridge2(dstChid, dstNftBridge);\n    }\n\n    // batch set nft bridge addresses for multiple chainids\n    function setDestBridges(uint64[] calldata dstChid, address[] calldata dstNftBridge) external onlyOwner {\n        for (uint256 i = 0; i < dstChid.length; i++) {\n            destBridge[dstChid[i]] = dstNftBridge[i];\n        }\n    }\n\n    // only called on NFT's orig chain, not applicable for mcn nft\n    function setOrigNFT(address _nft) external onlyOwner {\n        origNFT[_nft] = true;\n        emit SetOrigNFT(_nft, true);\n    }\n\n    // remove origNFT entry\n    function delOrigNFT(address _nft) external onlyOwner {\n        delete origNFT[_nft];\n        emit SetOrigNFT(_nft, false);\n    }\n\n    // send all gas token this contract has to owner\n    function claimFee() external onlyOwner {\n        uint256 amount = address(this).balance;\n        payable(msg.sender).transfer(amount);\n        emit FeeClaimed(amount);\n    }\n}\n"
    },
    "contracts/message/apps/RFQ.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"../framework/MessageSenderApp.sol\";\nimport \"../framework/MessageReceiverApp.sol\";\nimport \"../../safeguard/Pauser.sol\";\nimport \"../../safeguard/Governor.sol\";\nimport \"../../message/interfaces/IMessageBus.sol\";\nimport \"../../interfaces/IWETH.sol\";\n\n/** @title rfq contract */\ncontract RFQ is MessageSenderApp, MessageReceiverApp, Pauser, Governor {\n    using SafeERC20 for IERC20;\n    using ECDSA for bytes32;\n\n    struct Quote {\n        uint64 srcChainId;\n        address srcToken;\n        uint256 srcAmount;\n        uint256 srcReleaseAmount;\n        uint64 dstChainId;\n        address dstToken;\n        uint256 dstAmount;\n        uint64 deadline;\n        uint64 nonce;\n        address sender;\n        address receiver;\n        address refundTo;\n        address liquidityProvider;\n    }\n\n    enum QuoteStatus {\n        Null,\n        SrcDeposited, // sender deposited\n        SrcReleased, // released ERC20 token to liquidity provider\n        SrcReleasedNative, // released native token to liquidity provider\n        SrcRefunded, // refunded ERC20 token to refundTo/sender\n        SrcRefundedNative, // refunded native token to refundTo/sender\n        DstRefundInitiated, // refund initiated\n        DstTransferred, // transferred ERC20 token to receiver\n        DstTransferredNative // transferred native token to reciever\n    }\n\n    enum MessageType {\n        Null,\n        Release,\n        Refund\n    }\n\n    address public nativeWrap;\n    mapping(uint64 => address) public remoteRfqContracts;\n    // msg => bool\n    mapping(bytes32 => bool) public unconsumedMsg;\n    // quoteHash => QuoteStatus\n    mapping(bytes32 => QuoteStatus) public quotes;\n\n    address public treasuryAddr;\n    uint32 public feePercGlobal;\n    // chainId => feePercOverride, support override fee perc of this chain\n    mapping(uint64 => uint32) public feePercOverride;\n    // tokenAddr => feeBalance\n    mapping(address => uint256) public protocolFee;\n\n    // market maker => allowed signer\n    mapping(address => address) public allowedSigner;\n\n    event SrcDeposited(bytes32 quoteHash, Quote quote);\n    event DstTransferred(bytes32 quoteHash, address receiver, address dstToken, uint256 amount);\n    event RefundInitiated(bytes32 quoteHash);\n    event SrcReleased(bytes32 quoteHash, address liquidityProvider, address srcToken, uint256 amount);\n    event Refunded(bytes32 quoteHash, address refundTo, address srcToken, uint256 amount);\n    event RfqContractsUpdated(uint64[] chainIds, address[] remoteRfqContracts);\n    event FeePercUpdated(uint64[] chainIds, uint32[] feePercs);\n    event TreasuryAddrUpdated(address treasuryAddr);\n    event FeeCollected(address treasuryAddr, address token, uint256 amount);\n\n    constructor(address _messageBus) {\n        messageBus = _messageBus;\n    }\n\n    function srcDeposit(Quote calldata _quote, uint64 _submissionDeadline)\n        external\n        payable\n        whenNotPaused\n        returns (bytes32)\n    {\n        bytes32 quoteHash = _srcDeposit(_quote, _submissionDeadline, msg.value);\n        IERC20(_quote.srcToken).safeTransferFrom(msg.sender, address(this), _quote.srcAmount);\n        return quoteHash;\n    }\n\n    function srcDepositNative(Quote calldata _quote, uint64 _submissionDeadline)\n        external\n        payable\n        whenNotPaused\n        returns (bytes32)\n    {\n        require(nativeWrap != address(0), \"Rfq: native wrap not set\");\n        require(_quote.srcToken == nativeWrap, \"Rfq: src token mismatch\");\n        require(msg.value >= _quote.srcAmount, \"Rfq: insufficient amount\");\n        bytes32 quoteHash = _srcDeposit(_quote, _submissionDeadline, msg.value - _quote.srcAmount);\n        IWETH(nativeWrap).deposit{value: _quote.srcAmount}();\n        return quoteHash;\n    }\n\n    function _srcDeposit(\n        Quote calldata _quote,\n        uint64 _submissionDeadline,\n        uint256 _msgFee\n    ) private returns (bytes32) {\n        require(\n            _submissionDeadline > block.timestamp && _quote.deadline > _submissionDeadline,\n            \"Rfq: inappropriate deadline\"\n        );\n        require(\n            _quote.receiver != address(0) && _quote.liquidityProvider != address(0),\n            \"Rfq: invalid receiver or liquidityProvider\"\n        );\n        require(_quote.srcChainId == uint64(block.chainid), \"Rfq: src chainId mismatch\");\n        require(_quote.sender == msg.sender, \"Rfq: sender mismatch\");\n        bytes32 quoteHash = getQuoteHash(_quote);\n        require(quotes[quoteHash] == QuoteStatus.Null, \"Rfq: quote hash exists\");\n        uint256 rfqFee = getRfqFee(_quote.dstChainId, _quote.srcAmount);\n        require(rfqFee <= _quote.srcAmount - _quote.srcReleaseAmount, \"Rfq: insufficient protocol fee\");\n\n        quotes[quoteHash] = QuoteStatus.SrcDeposited;\n        if (_quote.srcChainId != _quote.dstChainId) {\n            address msgReceiver = remoteRfqContracts[_quote.dstChainId];\n            require(msgReceiver != address(0), \"Rfq: dst contract not set\");\n            bytes memory message = abi.encodePacked(quoteHash);\n            sendMessage(msgReceiver, _quote.dstChainId, message, _msgFee);\n        }\n        emit SrcDeposited(quoteHash, _quote);\n        return quoteHash;\n    }\n\n    function dstTransfer(Quote calldata _quote) external payable whenNotPaused {\n        (bytes32 quoteHash, address msgReceiver) = _dstTransferCheck(_quote);\n        quotes[quoteHash] = QuoteStatus.DstTransferred;\n        bytes memory message = abi.encodePacked(keccak256(abi.encodePacked(quoteHash, MessageType.Release)));\n        sendMessage(msgReceiver, _quote.srcChainId, message, msg.value);\n        IERC20(_quote.dstToken).safeTransferFrom(msg.sender, _quote.receiver, _quote.dstAmount);\n        emit DstTransferred(quoteHash, _quote.receiver, _quote.dstToken, _quote.dstAmount);\n    }\n\n    function dstTransferNative(Quote calldata _quote) external payable whenNotPaused {\n        require(_quote.dstToken == nativeWrap, \"Rfq: dst token mismatch\");\n        require(msg.value >= _quote.dstAmount, \"Rfq: insufficient amount\");\n        (bytes32 quoteHash, address msgReceiver) = _dstTransferCheck(_quote);\n        quotes[quoteHash] = QuoteStatus.DstTransferredNative;\n        bytes memory message = abi.encodePacked(keccak256(abi.encodePacked(quoteHash, MessageType.Release)));\n        sendMessage(msgReceiver, _quote.srcChainId, message, msg.value - _quote.dstAmount);\n        _transferNativeToken(_quote.receiver, _quote.dstAmount);\n        emit DstTransferred(quoteHash, _quote.receiver, _quote.dstToken, _quote.dstAmount);\n    }\n\n    // As transferFrom is not available for native token, dstTransferNativeWithSig is not supported\n    function dstTransferWithSig(Quote calldata _quote, bytes calldata _sig) external payable whenNotPaused {\n        (bytes32 quoteHash, address msgReceiver) = _dstTransferCheck(_quote);\n        verifySigOfQuoteHash(_quote.liquidityProvider, quoteHash, _sig);\n        quotes[quoteHash] = QuoteStatus.DstTransferred;\n        bytes memory message = abi.encodePacked(keccak256(abi.encodePacked(quoteHash, MessageType.Release)));\n        sendMessage(msgReceiver, _quote.srcChainId, message, msg.value);\n        IERC20(_quote.dstToken).safeTransferFrom(_quote.liquidityProvider, _quote.receiver, _quote.dstAmount);\n        emit DstTransferred(quoteHash, _quote.receiver, _quote.dstToken, _quote.dstAmount);\n    }\n\n    function sameChainTransfer(Quote calldata _quote, bool _releaseNative) external payable whenNotPaused {\n        require(_quote.srcChainId == _quote.dstChainId, \"Rfq: not same chain swap\");\n        (bytes32 quoteHash, ) = _dstTransferCheck(_quote);\n        IERC20(_quote.dstToken).safeTransferFrom(msg.sender, _quote.receiver, _quote.dstAmount);\n        _srcRelease(_quote, quoteHash, _releaseNative);\n        emit DstTransferred(quoteHash, _quote.receiver, _quote.dstToken, _quote.dstAmount);\n    }\n\n    function sameChainTransferNative(Quote calldata _quote, bool _releaseNative) external payable whenNotPaused {\n        require(_quote.srcChainId == _quote.dstChainId, \"Rfq: not same chain swap\");\n        require(_quote.dstToken == nativeWrap, \"Rfq: dst token mismatch\");\n        require(msg.value == _quote.dstAmount, \"Rfq: native token amount mismatch\");\n        (bytes32 quoteHash, ) = _dstTransferCheck(_quote);\n        _transferNativeToken(_quote.receiver, _quote.dstAmount);\n        _srcRelease(_quote, quoteHash, _releaseNative);\n        emit DstTransferred(quoteHash, _quote.receiver, _quote.dstToken, _quote.dstAmount);\n    }\n\n    // As transferFrom is not available for native token, sameChainTransferNativeWithSig is not supported\n    function sameChainTransferWithSig(\n        Quote calldata _quote,\n        bool _releaseNative,\n        bytes calldata _sig\n    ) external payable whenNotPaused {\n        require(_quote.srcChainId == _quote.dstChainId, \"Rfq: not same chain swap\");\n        (bytes32 quoteHash, ) = _dstTransferCheck(_quote);\n        verifySigOfQuoteHash(_quote.liquidityProvider, quoteHash, _sig);\n        IERC20(_quote.dstToken).safeTransferFrom(_quote.liquidityProvider, _quote.receiver, _quote.dstAmount);\n        _srcRelease(_quote, quoteHash, _releaseNative);\n        emit DstTransferred(quoteHash, _quote.receiver, _quote.dstToken, _quote.dstAmount);\n    }\n\n    function _dstTransferCheck(Quote calldata _quote) private view returns (bytes32, address) {\n        require(_quote.deadline > block.timestamp, \"Rfq: transfer deadline passed\");\n        require(_quote.dstChainId == uint64(block.chainid), \"Rfq: dst chainId mismatch\");\n        bytes32 quoteHash = getQuoteHash(_quote);\n        address msgReceiver = remoteRfqContracts[_quote.srcChainId];\n        if (_quote.srcChainId != _quote.dstChainId) {\n            require(quotes[quoteHash] == QuoteStatus.Null, \"Rfq: quote already executed\");\n            require(msgReceiver != address(0), \"Rfq: dst rfq contract not set\");\n        } else {\n            require(quotes[quoteHash] == QuoteStatus.SrcDeposited, \"Rfq: no deposit on same chain\");\n        }\n        return (quoteHash, msgReceiver);\n    }\n\n    function srcRelease(Quote calldata _quote, bytes calldata _execMsgCallData) external whenNotPaused {\n        bytes32 quoteHash = _srcReleaseCheck(_quote, _execMsgCallData);\n        _srcRelease(_quote, quoteHash, false);\n    }\n\n    function srcReleaseNative(Quote calldata _quote, bytes calldata _execMsgCallData) external whenNotPaused {\n        require(_quote.srcToken == nativeWrap, \"Rfq: src token mismatch\");\n        bytes32 quoteHash = _srcReleaseCheck(_quote, _execMsgCallData);\n        _srcRelease(_quote, quoteHash, true);\n    }\n\n    function _srcReleaseCheck(Quote calldata _quote, bytes calldata _execMsgCallData) private returns (bytes32) {\n        bytes32 quoteHash = getQuoteHash(_quote);\n        require(quotes[quoteHash] == QuoteStatus.SrcDeposited, \"Rfq: incorrect quote hash\");\n        _receiveMessage(_execMsgCallData, quoteHash, MessageType.Release);\n        return quoteHash;\n    }\n\n    function _srcRelease(\n        Quote calldata _quote,\n        bytes32 _quoteHash,\n        bool _releaseNative\n    ) private {\n        protocolFee[_quote.srcToken] += (_quote.srcAmount - _quote.srcReleaseAmount);\n        if (_releaseNative) {\n            quotes[_quoteHash] = QuoteStatus.SrcReleasedNative;\n            _withdrawNativeToken(_quote.liquidityProvider, _quote.srcReleaseAmount);\n        } else {\n            quotes[_quoteHash] = QuoteStatus.SrcReleased;\n            IERC20(_quote.srcToken).safeTransfer(_quote.liquidityProvider, _quote.srcReleaseAmount);\n        }\n        emit SrcReleased(_quoteHash, _quote.liquidityProvider, _quote.srcToken, _quote.srcReleaseAmount);\n    }\n\n    function requestRefund(Quote calldata _quote) external payable whenNotPaused {\n        require(_quote.deadline < block.timestamp, \"Rfq: transfer deadline not passed\");\n        require(_quote.dstChainId == uint64(block.chainid), \"Rfq: dst chainId mismatch\");\n        address _receiver = remoteRfqContracts[_quote.srcChainId];\n        require(_receiver != address(0), \"Rfq: src rfq contract not set\");\n        bytes32 quoteHash = getQuoteHash(_quote);\n        require(quotes[quoteHash] == QuoteStatus.Null, \"Rfq: quote already executed\");\n\n        quotes[quoteHash] = QuoteStatus.DstRefundInitiated;\n        bytes memory message = abi.encodePacked(keccak256(abi.encodePacked(quoteHash, MessageType.Refund)));\n        sendMessage(_receiver, _quote.srcChainId, message, msg.value);\n        emit RefundInitiated(quoteHash);\n    }\n\n    function executeRefund(Quote calldata _quote, bytes calldata _execMsgCallData) external whenNotPaused {\n        (bytes32 quoteHash, address receiver) = _executeRefund(_quote, _execMsgCallData);\n        quotes[quoteHash] = QuoteStatus.SrcRefunded;\n        IERC20(_quote.srcToken).safeTransfer(receiver, _quote.srcAmount);\n        emit Refunded(quoteHash, receiver, _quote.srcToken, _quote.srcAmount);\n    }\n\n    function executeRefundNative(Quote calldata _quote, bytes calldata _execMsgCallData) external whenNotPaused {\n        require(_quote.srcToken == nativeWrap, \"Rfq: src token mismatch\");\n        (bytes32 quoteHash, address receiver) = _executeRefund(_quote, _execMsgCallData);\n        quotes[quoteHash] = QuoteStatus.SrcRefundedNative;\n        _withdrawNativeToken(_quote.receiver, _quote.srcAmount);\n        emit Refunded(quoteHash, receiver, _quote.srcToken, _quote.srcAmount);\n    }\n\n    function _executeRefund(Quote calldata _quote, bytes calldata _execMsgCallData) private returns (bytes32, address) {\n        bytes32 quoteHash = getQuoteHash(_quote);\n        require(quotes[quoteHash] == QuoteStatus.SrcDeposited, \"Rfq: incorrect quote hash\");\n        if (_quote.srcChainId != _quote.dstChainId) {\n            _receiveMessage(_execMsgCallData, quoteHash, MessageType.Refund);\n        } else {\n            require(_quote.deadline < block.timestamp, \"Rfq: transfer deadline not passed\");\n        }\n        address receiver = (_quote.refundTo == address(0)) ? _quote.sender : _quote.refundTo;\n        return (quoteHash, receiver);\n    }\n\n    function executeMessage(\n        address _sender,\n        uint64 _srcChainId,\n        bytes calldata _message,\n        address // executor\n    ) external payable override onlyMessageBus returns (ExecutionStatus) {\n        require(_message.length == 32, \"Rfq: incorrect message length\");\n        address expectedSender = remoteRfqContracts[_srcChainId];\n        if (expectedSender != _sender) {\n            return ExecutionStatus.Retry;\n        }\n        unconsumedMsg[bytes32(_message)] = true;\n        return ExecutionStatus.Success;\n    }\n\n    function collectFee(address _token) external {\n        require(treasuryAddr != address(0), \"Rfq: treasury address not set\");\n        uint256 feeAmount = protocolFee[_token];\n        protocolFee[_token] = 0;\n        IERC20(_token).safeTransfer(treasuryAddr, feeAmount);\n        emit FeeCollected(treasuryAddr, _token, feeAmount);\n    }\n\n    function registerAllowedSigner(address _signer) external {\n        if (_signer == address(0)) {\n            delete (allowedSigner[msg.sender]);\n        } else {\n            allowedSigner[msg.sender] = _signer;\n        }\n    }\n\n    // This is needed to receive ETH\n    receive() external payable {}\n\n    //=========================== helper functions ==========================\n\n    function getQuoteHash(Quote calldata _quote) public pure returns (bytes32) {\n        return\n            keccak256(\n                abi.encodePacked(\n                    _quote.srcChainId,\n                    _quote.srcToken,\n                    _quote.srcAmount,\n                    _quote.srcReleaseAmount,\n                    _quote.dstChainId,\n                    _quote.dstToken,\n                    _quote.dstAmount,\n                    _quote.deadline,\n                    _quote.nonce,\n                    _quote.sender,\n                    _quote.receiver,\n                    _quote.refundTo,\n                    _quote.liquidityProvider\n                )\n            );\n    }\n\n    function getRfqFee(uint64 _chainId, uint256 _amount) public view returns (uint256) {\n        uint32 feePerc = feePercOverride[_chainId];\n        if (feePerc == 0) {\n            feePerc = feePercGlobal;\n        }\n        return (_amount * feePerc) / 1e6;\n    }\n\n    function getMsgFee(bytes calldata _message) public view returns (uint256) {\n        return IMessageBus(messageBus).calcFee(_message);\n    }\n\n    function getSignerOfQuoteHash(bytes32 _quoteHash, bytes calldata _sig) public view returns (address) {\n        bytes32 msgHash = keccak256(abi.encodePacked(block.chainid, address(this), \"AllowedTransfer\", _quoteHash))\n            .toEthSignedMessageHash();\n        return msgHash.recover(_sig);\n    }\n\n    function verifySigOfQuoteHash(\n        address _liquidityProvider,\n        bytes32 _quoteHash,\n        bytes calldata _sig\n    ) public view {\n        address signer = getSignerOfQuoteHash(_quoteHash, _sig);\n        require(\n            signer == _liquidityProvider ||\n                (allowedSigner[_liquidityProvider] != address(0) && signer == allowedSigner[_liquidityProvider]),\n            \"Rfq: not allowed signer\"\n        );\n    }\n\n    function _receiveMessage(\n        bytes calldata _execMsgCallData,\n        bytes32 _quoteHash,\n        MessageType _msgType\n    ) private {\n        bytes32 expectedMsg = keccak256(abi.encodePacked(_quoteHash, _msgType));\n        if (!unconsumedMsg[expectedMsg]) {\n            (bool success, ) = messageBus.call(_execMsgCallData);\n            require(success, \"execute msg failed\");\n        }\n        require(unconsumedMsg[expectedMsg], \"Rfq: invalid msg\");\n        delete unconsumedMsg[expectedMsg];\n    }\n\n    function _transferNativeToken(address _receiver, uint256 _amount) private {\n        require(nativeWrap != address(0), \"Rfq: native wrap not set\");\n        (bool sent, ) = _receiver.call{value: _amount, gas: 50000}(\"\");\n        require(sent, \"Rfq: failed to transfer native token\");\n    }\n\n    function _withdrawNativeToken(address _receiver, uint256 _amount) private {\n        require(nativeWrap != address(0), \"Rfq: native wrap not set\");\n        IWETH(nativeWrap).withdraw(_amount);\n        (bool sent, ) = _receiver.call{value: _amount, gas: 50000}(\"\");\n        require(sent, \"Rfq: failed to withdraw native token\");\n    }\n\n    //=========================== admin operations ==========================\n\n    function setRemoteRfqContracts(uint64[] calldata _chainIds, address[] calldata _remoteRfqContracts)\n        external\n        onlyOwner\n    {\n        require(_chainIds.length == _remoteRfqContracts.length, \"Rfq: length mismatch\");\n        for (uint256 i = 0; i < _chainIds.length; i++) {\n            remoteRfqContracts[_chainIds[i]] = _remoteRfqContracts[i];\n        }\n        emit RfqContractsUpdated(_chainIds, _remoteRfqContracts);\n    }\n\n    function setFeePerc(uint64[] calldata _chainIds, uint32[] calldata _feePercs) external onlyGovernor {\n        require(_chainIds.length == _feePercs.length, \"Rfq: length mismatch\");\n        for (uint256 i = 0; i < _chainIds.length; i++) {\n            require(_feePercs[i] < 1e6, \"Rfq: fee percentage too large\");\n            if (_chainIds[i] == 0) {\n                feePercGlobal = _feePercs[i];\n            } else {\n                feePercOverride[_chainIds[i]] = _feePercs[i];\n            }\n        }\n        emit FeePercUpdated(_chainIds, _feePercs);\n    }\n\n    function setTreasuryAddr(address _treasuryAddr) external onlyOwner {\n        treasuryAddr = _treasuryAddr;\n        emit TreasuryAddrUpdated(_treasuryAddr);\n    }\n\n    function setNativeWrap(address _nativeWrap) external onlyOwner {\n        nativeWrap = _nativeWrap;\n    }\n}\n"
    },
    "contracts/message/framework/MessageApp.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\nimport \"./MessageSenderApp.sol\";\nimport \"./MessageReceiverApp.sol\";\n\nabstract contract MessageApp is MessageSenderApp, MessageReceiverApp {\n    constructor(address _messageBus) {\n        messageBus = _messageBus;\n    }\n}\n"
    },
    "contracts/message/framework/MessageBusAddress.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\nabstract contract MessageBusAddress {\n    address public messageBus;\n}\n"
    },
    "contracts/message/framework/MessageReceiverApp.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\nimport \"../interfaces/IMessageReceiverApp.sol\";\nimport \"../libraries/MsgDataTypes.sol\";\nimport \"./MessageBusAddress.sol\";\n\nabstract contract MessageReceiverApp is IMessageReceiverApp, MessageBusAddress {\n    modifier onlyMessageBus() {\n        require(msg.sender == messageBus, \"caller is not message bus\");\n        _;\n    }\n\n    // Add abort prefix in the reason string for require or revert.\n    // This will abort (revert) the message execution without markig it as failed state,\n    // making it possible to retry later.\n    function _abortReason(string memory reason) internal pure returns (string memory) {\n        return MsgDataTypes.abortReason(reason);\n    }\n\n    /**\n     * @notice Called by MessageBus to execute a message\n     * @param _sender The address of the source app contract\n     * @param _srcChainId The source chain ID where the transfer is originated from\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _executor Address who called the MessageBus execution function\n     */\n    function executeMessage(\n        address _sender,\n        uint64 _srcChainId,\n        bytes calldata _message,\n        address _executor\n    ) external payable virtual override onlyMessageBus returns (ExecutionStatus) {}\n\n    // execute message from non-evm chain with bytes for sender address,\n    // otherwise same as above.\n    function executeMessage(\n        bytes calldata _sender,\n        uint64 _srcChainId,\n        bytes calldata _message,\n        address _executor\n    ) external payable virtual override onlyMessageBus returns (ExecutionStatus) {}\n\n    /**\n     * @notice Called by MessageBus to execute a message with an associated token transfer.\n     * The contract is guaranteed to have received the right amount of tokens before this function is called.\n     * @param _sender The address of the source app contract\n     * @param _token The address of the token that comes out of the bridge\n     * @param _amount The amount of tokens received at this contract through the cross-chain bridge.\n     * @param _srcChainId The source chain ID where the transfer is originated from\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _executor Address who called the MessageBus execution function\n     */\n    function executeMessageWithTransfer(\n        address _sender,\n        address _token,\n        uint256 _amount,\n        uint64 _srcChainId,\n        bytes calldata _message,\n        address _executor\n    ) external payable virtual override onlyMessageBus returns (ExecutionStatus) {}\n\n    /**\n     * @notice Only called by MessageBus if\n     *         1. executeMessageWithTransfer reverts, or\n     *         2. executeMessageWithTransfer returns ExecutionStatus.Fail\n     * The contract is guaranteed to have received the right amount of tokens before this function is called.\n     * @param _sender The address of the source app contract\n     * @param _token The address of the token that comes out of the bridge\n     * @param _amount The amount of tokens received at this contract through the cross-chain bridge.\n     * @param _srcChainId The source chain ID where the transfer is originated from\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _executor Address who called the MessageBus execution function\n     */\n    function executeMessageWithTransferFallback(\n        address _sender,\n        address _token,\n        uint256 _amount,\n        uint64 _srcChainId,\n        bytes calldata _message,\n        address _executor\n    ) external payable virtual override onlyMessageBus returns (ExecutionStatus) {}\n\n    /**\n     * @notice Called by MessageBus to process refund of the original transfer from this contract.\n     * The contract is guaranteed to have received the refund before this function is called.\n     * @param _token The token address of the original transfer\n     * @param _amount The amount of the original transfer\n     * @param _message The same message associated with the original transfer\n     * @param _executor Address who called the MessageBus execution function\n     */\n    function executeMessageWithTransferRefund(\n        address _token,\n        uint256 _amount,\n        bytes calldata _message,\n        address _executor\n    ) external payable virtual override onlyMessageBus returns (ExecutionStatus) {}\n}\n"
    },
    "contracts/message/framework/MessageSenderApp.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"../libraries/MsgDataTypes.sol\";\nimport \"../libraries/MessageSenderLib.sol\";\nimport \"../messagebus/MessageBus.sol\";\nimport \"./MessageBusAddress.sol\";\n\nabstract contract MessageSenderApp is MessageBusAddress {\n    using SafeERC20 for IERC20;\n\n    // ============== Utility functions called by apps ==============\n\n    /**\n     * @notice Sends a message to a contract on another chain.\n     * Sender needs to make sure the uniqueness of the message Id, which is computed as\n     * hash(type.MessageOnly, sender, receiver, srcChainId, srcTxHash, dstChainId, message).\n     * If messages with the same Id are sent, only one of them will succeed at dst chain.\n     * @param _receiver The address of the destination app contract.\n     * @param _dstChainId The destination chain ID.\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\n     * @param _fee The fee amount to pay to MessageBus.\n     */\n    function sendMessage(\n        address _receiver,\n        uint64 _dstChainId,\n        bytes memory _message,\n        uint256 _fee\n    ) internal {\n        MessageSenderLib.sendMessage(_receiver, _dstChainId, _message, messageBus, _fee);\n    }\n\n    // Send message to non-evm chain with bytes for receiver address,\n    // otherwise same as above.\n    function sendMessage(\n        bytes calldata _receiver,\n        uint64 _dstChainId,\n        bytes memory _message,\n        uint256 _fee\n    ) internal {\n        MessageSenderLib.sendMessage(_receiver, _dstChainId, _message, messageBus, _fee);\n    }\n\n    /**\n     * @notice Sends a message associated with a transfer to a contract on another chain.\n     * @param _receiver The address of the destination app contract.\n     * @param _token The address of the token to be sent.\n     * @param _amount The amount of tokens to be sent.\n     * @param _dstChainId The destination chain ID.\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\n     *        Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least\n     *        (100% - max slippage percentage) * amount or the transfer can be refunded.\n     *        Only applicable to the {MsgDataTypes.BridgeSendType.Liquidity}.\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\n     *        If message is empty, only the token transfer will be sent\n     * @param _bridgeSendType One of the {BridgeSendType} enum.\n     * @param _fee The fee amount to pay to MessageBus.\n     * @return The transfer ID.\n     */\n    function sendMessageWithTransfer(\n        address _receiver,\n        address _token,\n        uint256 _amount,\n        uint64 _dstChainId,\n        uint64 _nonce,\n        uint32 _maxSlippage,\n        bytes memory _message,\n        MsgDataTypes.BridgeSendType _bridgeSendType,\n        uint256 _fee\n    ) internal returns (bytes32) {\n        return\n            MessageSenderLib.sendMessageWithTransfer(\n                _receiver,\n                _token,\n                _amount,\n                _dstChainId,\n                _nonce,\n                _maxSlippage,\n                _message,\n                _bridgeSendType,\n                messageBus,\n                _fee\n            );\n    }\n\n    /**\n     * @notice Sends a token transfer via a bridge.\n     * @dev sendMessageWithTransfer with empty message\n     * @param _receiver The address of the destination app contract.\n     * @param _token The address of the token to be sent.\n     * @param _amount The amount of tokens to be sent.\n     * @param _dstChainId The destination chain ID.\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\n     *        Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least\n     *        (100% - max slippage percentage) * amount or the transfer can be refunded.\n     *        Only applicable to the {MsgDataTypes.BridgeSendType.Liquidity}.\n     * @param _bridgeSendType One of the {BridgeSendType} enum.\n     */\n    function sendTokenTransfer(\n        address _receiver,\n        address _token,\n        uint256 _amount,\n        uint64 _dstChainId,\n        uint64 _nonce,\n        uint32 _maxSlippage,\n        MsgDataTypes.BridgeSendType _bridgeSendType\n    ) internal returns (bytes32) {\n        return\n            MessageSenderLib.sendMessageWithTransfer(\n                _receiver,\n                _token,\n                _amount,\n                _dstChainId,\n                _nonce,\n                _maxSlippage,\n                \"\", // empty message, which will not trigger sendMessage\n                _bridgeSendType,\n                messageBus,\n                0\n            );\n    }\n}\n"
    },
    "contracts/message/interfaces/IMessageBus.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\nimport \"../libraries/MsgDataTypes.sol\";\n\ninterface IMessageBus {\n    /**\n     * @notice Send a message to a contract on another chain.\n     * Sender needs to make sure the uniqueness of the message Id, which is computed as\n     * hash(type.MessageOnly, sender, receiver, srcChainId, srcTxHash, dstChainId, message).\n     * If messages with the same Id are sent, only one of them will succeed at dst chain..\n     * A fee is charged in the native gas token.\n     * @param _receiver The address of the destination app contract.\n     * @param _dstChainId The destination chain ID.\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\n     */\n    function sendMessage(\n        address _receiver,\n        uint256 _dstChainId,\n        bytes calldata _message\n    ) external payable;\n\n    // same as above, except that receiver is an non-evm chain address,\n    function sendMessage(\n        bytes calldata _receiver,\n        uint256 _dstChainId,\n        bytes calldata _message\n    ) external payable;\n\n    /**\n     * @notice Send a message associated with a token transfer to a contract on another chain.\n     * If messages with the same srcTransferId are sent, only one of them will succeed at dst chain..\n     * A fee is charged in the native token.\n     * @param _receiver The address of the destination app contract.\n     * @param _dstChainId The destination chain ID.\n     * @param _srcBridge The bridge contract to send the transfer with.\n     * @param _srcTransferId The transfer ID.\n     * @param _dstChainId The destination chain ID.\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\n     */\n    function sendMessageWithTransfer(\n        address _receiver,\n        uint256 _dstChainId,\n        address _srcBridge,\n        bytes32 _srcTransferId,\n        bytes calldata _message\n    ) external payable;\n\n    /**\n     * @notice Execute a message not associated with a transfer.\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function executeMessage(\n        bytes calldata _message,\n        MsgDataTypes.RouteInfo calldata _route,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external payable;\n\n    /**\n     * @notice Execute a message with a successful transfer.\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _transfer The transfer info.\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function executeMessageWithTransfer(\n        bytes calldata _message,\n        MsgDataTypes.TransferInfo calldata _transfer,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external payable;\n\n    /**\n     * @notice Execute a message with a refunded transfer.\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _transfer The transfer info.\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function executeMessageWithTransferRefund(\n        bytes calldata _message, // the same message associated with the original transfer\n        MsgDataTypes.TransferInfo calldata _transfer,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external payable;\n\n    /**\n     * @notice Withdraws message fee in the form of native gas token.\n     * @param _account The address receiving the fee.\n     * @param _cumulativeFee The cumulative fee credited to the account. Tracked by SGN.\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A withdrawal must be\n     * signed-off by +2/3 of the sigsVerifier's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function withdrawFee(\n        address _account,\n        uint256 _cumulativeFee,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external;\n\n    /**\n     * @notice Calculates the required fee for the message.\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\n     @ @return The required fee.\n     */\n    function calcFee(bytes calldata _message) external view returns (uint256);\n\n    function liquidityBridge() external view returns (address);\n\n    function pegBridge() external view returns (address);\n\n    function pegBridgeV2() external view returns (address);\n\n    function pegVault() external view returns (address);\n\n    function pegVaultV2() external view returns (address);\n}\n"
    },
    "contracts/message/interfaces/IMessageReceiverApp.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface IMessageReceiverApp {\n    enum ExecutionStatus {\n        Fail, // execution failed, finalized\n        Success, // execution succeeded, finalized\n        Retry // execution rejected, can retry later\n    }\n\n    /**\n     * @notice Called by MessageBus to execute a message\n     * @param _sender The address of the source app contract\n     * @param _srcChainId The source chain ID where the transfer is originated from\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _executor Address who called the MessageBus execution function\n     */\n    function executeMessage(\n        address _sender,\n        uint64 _srcChainId,\n        bytes calldata _message,\n        address _executor\n    ) external payable returns (ExecutionStatus);\n\n    // same as above, except that sender is an non-evm chain address,\n    // otherwise same as above.\n    function executeMessage(\n        bytes calldata _sender,\n        uint64 _srcChainId,\n        bytes calldata _message,\n        address _executor\n    ) external payable returns (ExecutionStatus);\n\n    /**\n     * @notice Called by MessageBus to execute a message with an associated token transfer.\n     * The contract is guaranteed to have received the right amount of tokens before this function is called.\n     * @param _sender The address of the source app contract\n     * @param _token The address of the token that comes out of the bridge\n     * @param _amount The amount of tokens received at this contract through the cross-chain bridge.\n     * @param _srcChainId The source chain ID where the transfer is originated from\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _executor Address who called the MessageBus execution function\n     */\n    function executeMessageWithTransfer(\n        address _sender,\n        address _token,\n        uint256 _amount,\n        uint64 _srcChainId,\n        bytes calldata _message,\n        address _executor\n    ) external payable returns (ExecutionStatus);\n\n    /**\n     * @notice Only called by MessageBus if\n     *         1. executeMessageWithTransfer reverts, or\n     *         2. executeMessageWithTransfer returns ExecutionStatus.Fail\n     * The contract is guaranteed to have received the right amount of tokens before this function is called.\n     * @param _sender The address of the source app contract\n     * @param _token The address of the token that comes out of the bridge\n     * @param _amount The amount of tokens received at this contract through the cross-chain bridge.\n     * @param _srcChainId The source chain ID where the transfer is originated from\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _executor Address who called the MessageBus execution function\n     */\n    function executeMessageWithTransferFallback(\n        address _sender,\n        address _token,\n        uint256 _amount,\n        uint64 _srcChainId,\n        bytes calldata _message,\n        address _executor\n    ) external payable returns (ExecutionStatus);\n\n    /**\n     * @notice Called by MessageBus to process refund of the original transfer from this contract.\n     * The contract is guaranteed to have received the refund before this function is called.\n     * @param _token The token address of the original transfer\n     * @param _amount The amount of the original transfer\n     * @param _message The same message associated with the original transfer\n     * @param _executor Address who called the MessageBus execution function\n     */\n    function executeMessageWithTransferRefund(\n        address _token,\n        uint256 _amount,\n        bytes calldata _message,\n        address _executor\n    ) external payable returns (ExecutionStatus);\n}\n"
    },
    "contracts/message/libraries/MessageSenderLib.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../../interfaces/IBridge.sol\";\nimport \"../../interfaces/IOriginalTokenVault.sol\";\nimport \"../../interfaces/IOriginalTokenVaultV2.sol\";\nimport \"../../interfaces/IPeggedTokenBridge.sol\";\nimport \"../../interfaces/IPeggedTokenBridgeV2.sol\";\nimport \"../interfaces/IMessageBus.sol\";\nimport \"./MsgDataTypes.sol\";\n\nlibrary MessageSenderLib {\n    using SafeERC20 for IERC20;\n\n    // ============== Internal library functions called by apps ==============\n\n    /**\n     * @notice Sends a message to an app on another chain via MessageBus without an associated transfer.\n     * @param _receiver The address of the destination app contract.\n     * @param _dstChainId The destination chain ID.\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\n     * @param _messageBus The address of the MessageBus on this chain.\n     * @param _fee The fee amount to pay to MessageBus.\n     */\n    function sendMessage(\n        address _receiver,\n        uint64 _dstChainId,\n        bytes memory _message,\n        address _messageBus,\n        uint256 _fee\n    ) internal {\n        IMessageBus(_messageBus).sendMessage{value: _fee}(_receiver, _dstChainId, _message);\n    }\n\n    // Send message to non-evm chain with bytes for receiver address,\n    // otherwise same as above.\n    function sendMessage(\n        bytes calldata _receiver,\n        uint64 _dstChainId,\n        bytes memory _message,\n        address _messageBus,\n        uint256 _fee\n    ) internal {\n        IMessageBus(_messageBus).sendMessage{value: _fee}(_receiver, _dstChainId, _message);\n    }\n\n    /**\n     * @notice Sends a message to an app on another chain via MessageBus with an associated transfer.\n     * @param _receiver The address of the destination app contract.\n     * @param _token The address of the token to be sent.\n     * @param _amount The amount of tokens to be sent.\n     * @param _dstChainId The destination chain ID.\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\n     * Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the\n     * transfer can be refunded. Only applicable to the {MsgDataTypes.BridgeSendType.Liquidity}.\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\n     * @param _bridgeSendType One of the {MsgDataTypes.BridgeSendType} enum.\n     * @param _messageBus The address of the MessageBus on this chain.\n     * @param _fee The fee amount to pay to MessageBus.\n     * @return The transfer ID.\n     */\n    function sendMessageWithTransfer(\n        address _receiver,\n        address _token,\n        uint256 _amount,\n        uint64 _dstChainId,\n        uint64 _nonce,\n        uint32 _maxSlippage,\n        bytes memory _message,\n        MsgDataTypes.BridgeSendType _bridgeSendType,\n        address _messageBus,\n        uint256 _fee\n    ) internal returns (bytes32) {\n        (bytes32 transferId, address bridge) = sendTokenTransfer(\n            _receiver,\n            _token,\n            _amount,\n            _dstChainId,\n            _nonce,\n            _maxSlippage,\n            _bridgeSendType,\n            _messageBus\n        );\n        if (_message.length > 0) {\n            IMessageBus(_messageBus).sendMessageWithTransfer{value: _fee}(\n                _receiver,\n                _dstChainId,\n                bridge,\n                transferId,\n                _message\n            );\n        }\n        return transferId;\n    }\n\n    /**\n     * @notice Sends a token transfer via a bridge.\n     * @param _receiver The address of the destination app contract.\n     * @param _token The address of the token to be sent.\n     * @param _amount The amount of tokens to be sent.\n     * @param _dstChainId The destination chain ID.\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\n     * Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the\n     * transfer can be refunded.\n     * @param _bridgeSendType One of the {MsgDataTypes.BridgeSendType} enum.\n     */\n    function sendTokenTransfer(\n        address _receiver,\n        address _token,\n        uint256 _amount,\n        uint64 _dstChainId,\n        uint64 _nonce,\n        uint32 _maxSlippage,\n        MsgDataTypes.BridgeSendType _bridgeSendType,\n        address _messageBus\n    ) internal returns (bytes32 transferId, address bridge) {\n        if (_bridgeSendType == MsgDataTypes.BridgeSendType.Liquidity) {\n            bridge = IMessageBus(_messageBus).liquidityBridge();\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\n            IBridge(bridge).send(_receiver, _token, _amount, _dstChainId, _nonce, _maxSlippage);\n            transferId = computeLiqBridgeTransferId(_receiver, _token, _amount, _dstChainId, _nonce);\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegDeposit) {\n            bridge = IMessageBus(_messageBus).pegVault();\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\n            IOriginalTokenVault(bridge).deposit(_token, _amount, _dstChainId, _receiver, _nonce);\n            transferId = computePegV1DepositId(_receiver, _token, _amount, _dstChainId, _nonce);\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegBurn) {\n            bridge = IMessageBus(_messageBus).pegBridge();\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\n            IPeggedTokenBridge(bridge).burn(_token, _amount, _receiver, _nonce);\n            // handle cases where certain tokens do not spend allowance for role-based burn\n            IERC20(_token).safeApprove(bridge, 0);\n            transferId = computePegV1BurnId(_receiver, _token, _amount, _nonce);\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegV2Deposit) {\n            bridge = IMessageBus(_messageBus).pegVaultV2();\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\n            transferId = IOriginalTokenVaultV2(bridge).deposit(_token, _amount, _dstChainId, _receiver, _nonce);\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegV2Burn) {\n            bridge = IMessageBus(_messageBus).pegBridgeV2();\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\n            transferId = IPeggedTokenBridgeV2(bridge).burn(_token, _amount, _dstChainId, _receiver, _nonce);\n            // handle cases where certain tokens do not spend allowance for role-based burn\n            IERC20(_token).safeApprove(bridge, 0);\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegV2BurnFrom) {\n            bridge = IMessageBus(_messageBus).pegBridgeV2();\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\n            transferId = IPeggedTokenBridgeV2(bridge).burnFrom(_token, _amount, _dstChainId, _receiver, _nonce);\n            // handle cases where certain tokens do not spend allowance for role-based burn\n            IERC20(_token).safeApprove(bridge, 0);\n        } else {\n            revert(\"bridge type not supported\");\n        }\n    }\n\n    function computeLiqBridgeTransferId(\n        address _receiver,\n        address _token,\n        uint256 _amount,\n        uint64 _dstChainId,\n        uint64 _nonce\n    ) internal view returns (bytes32) {\n        return\n            keccak256(\n                abi.encodePacked(address(this), _receiver, _token, _amount, _dstChainId, _nonce, uint64(block.chainid))\n            );\n    }\n\n    function computePegV1DepositId(\n        address _receiver,\n        address _token,\n        uint256 _amount,\n        uint64 _dstChainId,\n        uint64 _nonce\n    ) internal view returns (bytes32) {\n        return\n            keccak256(\n                abi.encodePacked(address(this), _token, _amount, _dstChainId, _receiver, _nonce, uint64(block.chainid))\n            );\n    }\n\n    function computePegV1BurnId(\n        address _receiver,\n        address _token,\n        uint256 _amount,\n        uint64 _nonce\n    ) internal view returns (bytes32) {\n        return keccak256(abi.encodePacked(address(this), _token, _amount, _receiver, _nonce, uint64(block.chainid)));\n    }\n}\n"
    },
    "contracts/message/libraries/MsgDataTypes.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\nlibrary MsgDataTypes {\n    string constant ABORT_PREFIX = \"MSG::ABORT:\";\n\n    // Add abort prefix in the reason string for require or revert.\n    // This will abort (revert) the message execution without markig it as failed state,\n    // making it possible to retry later.\n    function abortReason(string memory reason) internal pure returns (string memory) {\n        return string.concat(MsgDataTypes.ABORT_PREFIX, reason);\n    }\n\n    // bridge operation type at the sender side (src chain)\n    enum BridgeSendType {\n        Null,\n        Liquidity,\n        PegDeposit,\n        PegBurn,\n        PegV2Deposit,\n        PegV2Burn,\n        PegV2BurnFrom\n    }\n\n    // bridge operation type at the receiver side (dst chain)\n    enum TransferType {\n        Null,\n        LqRelay, // relay through liquidity bridge\n        LqWithdraw, // withdraw from liquidity bridge\n        PegMint, // mint through pegged token bridge\n        PegWithdraw, // withdraw from original token vault\n        PegV2Mint, // mint through pegged token bridge v2\n        PegV2Withdraw // withdraw from original token vault v2\n    }\n\n    enum MsgType {\n        MessageWithTransfer,\n        MessageOnly\n    }\n\n    enum TxStatus {\n        Null,\n        Success,\n        Fail,\n        Fallback,\n        Pending // transient state within a transaction\n    }\n\n    struct TransferInfo {\n        TransferType t;\n        address sender;\n        address receiver;\n        address token;\n        uint256 amount;\n        uint64 wdseq; // only needed for LqWithdraw (refund)\n        uint64 srcChainId;\n        bytes32 refId;\n        bytes32 srcTxHash; // src chain msg tx hash\n    }\n\n    struct RouteInfo {\n        address sender;\n        address receiver;\n        uint64 srcChainId;\n        bytes32 srcTxHash; // src chain msg tx hash\n    }\n\n    // used for msg from non-evm chains with longer-bytes address\n    struct RouteInfo2 {\n        bytes sender;\n        address receiver;\n        uint64 srcChainId;\n        bytes32 srcTxHash;\n    }\n\n    // combination of RouteInfo and RouteInfo2 for easier processing\n    struct Route {\n        address sender; // from RouteInfo\n        bytes senderBytes; // from RouteInfo2\n        address receiver;\n        uint64 srcChainId;\n        bytes32 srcTxHash;\n    }\n\n    struct MsgWithTransferExecutionParams {\n        bytes message;\n        TransferInfo transfer;\n        bytes[] sigs;\n        address[] signers;\n        uint256[] powers;\n    }\n\n    struct BridgeTransferParams {\n        bytes request;\n        bytes[] sigs;\n        address[] signers;\n        uint256[] powers;\n    }\n}\n"
    },
    "contracts/message/messagebus/MessageBus.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.17;\n\nimport \"./MessageBusSender.sol\";\nimport \"./MessageBusReceiver.sol\";\n\ncontract MessageBus is MessageBusSender, MessageBusReceiver {\n    constructor(\n        ISigsVerifier _sigsVerifier,\n        address _liquidityBridge,\n        address _pegBridge,\n        address _pegVault,\n        address _pegBridgeV2,\n        address _pegVaultV2\n    )\n        MessageBusSender(_sigsVerifier)\n        MessageBusReceiver(_liquidityBridge, _pegBridge, _pegVault, _pegBridgeV2, _pegVaultV2)\n    {}\n\n    // this is only to be called by Proxy via delegateCall as initOwner will require _owner is 0.\n    // so calling init on this contract directly will guarantee to fail\n    function init(\n        address _liquidityBridge,\n        address _pegBridge,\n        address _pegVault,\n        address _pegBridgeV2,\n        address _pegVaultV2\n    ) external {\n        // MUST manually call ownable init and must only call once\n        initOwner();\n        // we don't need sender init as _sigsVerifier is immutable so already in the deployed code\n        initReceiver(_liquidityBridge, _pegBridge, _pegVault, _pegBridgeV2, _pegVaultV2);\n    }\n}\n"
    },
    "contracts/message/messagebus/MessageBusReceiver.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.9;\n\nimport \"../libraries/MsgDataTypes.sol\";\nimport \"../interfaces/IMessageReceiverApp.sol\";\nimport \"../../interfaces/IBridge.sol\";\nimport \"../../interfaces/IOriginalTokenVault.sol\";\nimport \"../../interfaces/IOriginalTokenVaultV2.sol\";\nimport \"../../interfaces/IPeggedTokenBridge.sol\";\nimport \"../../interfaces/IPeggedTokenBridgeV2.sol\";\nimport \"../../interfaces/IDelayedTransfer.sol\";\nimport \"../../safeguard/Ownable.sol\";\nimport \"../../libraries/Utils.sol\";\n\ncontract MessageBusReceiver is Ownable {\n    mapping(bytes32 => MsgDataTypes.TxStatus) public executedMessages;\n\n    address public liquidityBridge; // liquidity bridge address\n    address public pegBridge; // peg bridge address\n    address public pegVault; // peg original vault address\n    address public pegBridgeV2; // peg bridge address\n    address public pegVaultV2; // peg original vault address\n\n    // minimum amount of gas needed by this contract before it tries to\n    // deliver a message to the target contract.\n    uint256 public preExecuteMessageGasUsage;\n\n    event Executed(\n        MsgDataTypes.MsgType msgType,\n        bytes32 msgId,\n        MsgDataTypes.TxStatus status,\n        address indexed receiver,\n        uint64 srcChainId,\n        bytes32 srcTxHash\n    );\n    event NeedRetry(MsgDataTypes.MsgType msgType, bytes32 msgId, uint64 srcChainId, bytes32 srcTxHash);\n    event CallReverted(string reason); // help debug\n\n    event LiquidityBridgeUpdated(address liquidityBridge);\n    event PegBridgeUpdated(address pegBridge);\n    event PegVaultUpdated(address pegVault);\n    event PegBridgeV2Updated(address pegBridgeV2);\n    event PegVaultV2Updated(address pegVaultV2);\n\n    constructor(\n        address _liquidityBridge,\n        address _pegBridge,\n        address _pegVault,\n        address _pegBridgeV2,\n        address _pegVaultV2\n    ) {\n        liquidityBridge = _liquidityBridge;\n        pegBridge = _pegBridge;\n        pegVault = _pegVault;\n        pegBridgeV2 = _pegBridgeV2;\n        pegVaultV2 = _pegVaultV2;\n    }\n\n    function initReceiver(\n        address _liquidityBridge,\n        address _pegBridge,\n        address _pegVault,\n        address _pegBridgeV2,\n        address _pegVaultV2\n    ) internal {\n        require(liquidityBridge == address(0), \"liquidityBridge already set\");\n        liquidityBridge = _liquidityBridge;\n        pegBridge = _pegBridge;\n        pegVault = _pegVault;\n        pegBridgeV2 = _pegBridgeV2;\n        pegVaultV2 = _pegVaultV2;\n    }\n\n    // ============== functions called by executor ==============\n\n    /**\n     * @notice Execute a message with a successful transfer.\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _transfer The transfer info.\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function executeMessageWithTransfer(\n        bytes calldata _message,\n        MsgDataTypes.TransferInfo calldata _transfer,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) public payable {\n        // For message with token transfer, message Id is computed through transfer info\n        // in order to guarantee that each transfer can only be used once.\n        bytes32 messageId = verifyTransfer(_transfer);\n        require(executedMessages[messageId] == MsgDataTypes.TxStatus.Null, \"transfer already executed\");\n        executedMessages[messageId] = MsgDataTypes.TxStatus.Pending;\n\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \"MessageWithTransfer\"));\n        IBridge(liquidityBridge).verifySigs(\n            abi.encodePacked(domain, messageId, _message, _transfer.srcTxHash),\n            _sigs,\n            _signers,\n            _powers\n        );\n        MsgDataTypes.TxStatus status;\n        IMessageReceiverApp.ExecutionStatus est = executeMessageWithTransfer(_transfer, _message);\n        if (est == IMessageReceiverApp.ExecutionStatus.Success) {\n            status = MsgDataTypes.TxStatus.Success;\n        } else if (est == IMessageReceiverApp.ExecutionStatus.Retry) {\n            executedMessages[messageId] = MsgDataTypes.TxStatus.Null;\n            emit NeedRetry(\n                MsgDataTypes.MsgType.MessageWithTransfer,\n                messageId,\n                _transfer.srcChainId,\n                _transfer.srcTxHash\n            );\n            return;\n        } else {\n            est = executeMessageWithTransferFallback(_transfer, _message);\n            if (est == IMessageReceiverApp.ExecutionStatus.Success) {\n                status = MsgDataTypes.TxStatus.Fallback;\n            } else {\n                status = MsgDataTypes.TxStatus.Fail;\n            }\n        }\n        executedMessages[messageId] = status;\n        emitMessageWithTransferExecutedEvent(messageId, status, _transfer);\n    }\n\n    /**\n     * @notice Execute a message with a refunded transfer.\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _transfer The transfer info.\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function executeMessageWithTransferRefund(\n        bytes calldata _message, // the same message associated with the original transfer\n        MsgDataTypes.TransferInfo calldata _transfer,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) public payable {\n        // similar to executeMessageWithTransfer\n        bytes32 messageId = verifyTransfer(_transfer);\n        require(executedMessages[messageId] == MsgDataTypes.TxStatus.Null, \"transfer already executed\");\n        executedMessages[messageId] = MsgDataTypes.TxStatus.Pending;\n\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \"MessageWithTransferRefund\"));\n        IBridge(liquidityBridge).verifySigs(\n            abi.encodePacked(domain, messageId, _message, _transfer.srcTxHash),\n            _sigs,\n            _signers,\n            _powers\n        );\n        MsgDataTypes.TxStatus status;\n        IMessageReceiverApp.ExecutionStatus est = executeMessageWithTransferRefund(_transfer, _message);\n        if (est == IMessageReceiverApp.ExecutionStatus.Success) {\n            status = MsgDataTypes.TxStatus.Success;\n        } else if (est == IMessageReceiverApp.ExecutionStatus.Retry) {\n            executedMessages[messageId] = MsgDataTypes.TxStatus.Null;\n            emit NeedRetry(\n                MsgDataTypes.MsgType.MessageWithTransfer,\n                messageId,\n                _transfer.srcChainId,\n                _transfer.srcTxHash\n            );\n            return;\n        } else {\n            status = MsgDataTypes.TxStatus.Fail;\n        }\n        executedMessages[messageId] = status;\n        emitMessageWithTransferExecutedEvent(messageId, status, _transfer);\n    }\n\n    /**\n     * @notice Execute a message not associated with a transfer.\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _route The info about the sender and the receiver.\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function executeMessage(\n        bytes calldata _message,\n        MsgDataTypes.RouteInfo calldata _route,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external payable {\n        MsgDataTypes.Route memory route = getRouteInfo(_route);\n        executeMessage(_message, route, _sigs, _signers, _powers, \"Message\");\n    }\n\n    // execute message from non-evm chain with bytes for sender address,\n    // otherwise same as above.\n    function executeMessage(\n        bytes calldata _message,\n        MsgDataTypes.RouteInfo2 calldata _route,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external payable {\n        MsgDataTypes.Route memory route = getRouteInfo(_route);\n        executeMessage(_message, route, _sigs, _signers, _powers, \"Message2\");\n    }\n\n    function executeMessage(\n        bytes calldata _message,\n        MsgDataTypes.Route memory _route,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers,\n        string memory domainName\n    ) private {\n        // For message without associated token transfer, message Id is computed through message info,\n        // in order to guarantee that each message can only be applied once\n        bytes32 messageId = computeMessageOnlyId(_route, _message);\n        require(executedMessages[messageId] == MsgDataTypes.TxStatus.Null, \"message already executed\");\n        executedMessages[messageId] = MsgDataTypes.TxStatus.Pending;\n\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), domainName));\n        IBridge(liquidityBridge).verifySigs(abi.encodePacked(domain, messageId), _sigs, _signers, _powers);\n        MsgDataTypes.TxStatus status;\n        IMessageReceiverApp.ExecutionStatus est = executeMessage(_route, _message);\n        if (est == IMessageReceiverApp.ExecutionStatus.Success) {\n            status = MsgDataTypes.TxStatus.Success;\n        } else if (est == IMessageReceiverApp.ExecutionStatus.Retry) {\n            executedMessages[messageId] = MsgDataTypes.TxStatus.Null;\n            emit NeedRetry(MsgDataTypes.MsgType.MessageOnly, messageId, _route.srcChainId, _route.srcTxHash);\n            return;\n        } else {\n            status = MsgDataTypes.TxStatus.Fail;\n        }\n        executedMessages[messageId] = status;\n        emitMessageOnlyExecutedEvent(messageId, status, _route);\n    }\n\n    // ================= utils (to avoid stack too deep) =================\n\n    function emitMessageWithTransferExecutedEvent(\n        bytes32 _messageId,\n        MsgDataTypes.TxStatus _status,\n        MsgDataTypes.TransferInfo calldata _transfer\n    ) private {\n        emit Executed(\n            MsgDataTypes.MsgType.MessageWithTransfer,\n            _messageId,\n            _status,\n            _transfer.receiver,\n            _transfer.srcChainId,\n            _transfer.srcTxHash\n        );\n    }\n\n    function emitMessageOnlyExecutedEvent(\n        bytes32 _messageId,\n        MsgDataTypes.TxStatus _status,\n        MsgDataTypes.Route memory _route\n    ) private {\n        emit Executed(\n            MsgDataTypes.MsgType.MessageOnly,\n            _messageId,\n            _status,\n            _route.receiver,\n            _route.srcChainId,\n            _route.srcTxHash\n        );\n    }\n\n    function executeMessageWithTransfer(MsgDataTypes.TransferInfo calldata _transfer, bytes calldata _message)\n        private\n        returns (IMessageReceiverApp.ExecutionStatus)\n    {\n        uint256 gasLeftBeforeExecution = gasleft();\n        (bool ok, bytes memory res) = address(_transfer.receiver).call{value: msg.value}(\n            abi.encodeWithSelector(\n                IMessageReceiverApp.executeMessageWithTransfer.selector,\n                _transfer.sender,\n                _transfer.token,\n                _transfer.amount,\n                _transfer.srcChainId,\n                _message,\n                msg.sender\n            )\n        );\n        if (ok) {\n            return abi.decode((res), (IMessageReceiverApp.ExecutionStatus));\n        }\n        handleExecutionRevert(gasLeftBeforeExecution, res);\n        return IMessageReceiverApp.ExecutionStatus.Fail;\n    }\n\n    function executeMessageWithTransferFallback(MsgDataTypes.TransferInfo calldata _transfer, bytes calldata _message)\n        private\n        returns (IMessageReceiverApp.ExecutionStatus)\n    {\n        uint256 gasLeftBeforeExecution = gasleft();\n        (bool ok, bytes memory res) = address(_transfer.receiver).call{value: msg.value}(\n            abi.encodeWithSelector(\n                IMessageReceiverApp.executeMessageWithTransferFallback.selector,\n                _transfer.sender,\n                _transfer.token,\n                _transfer.amount,\n                _transfer.srcChainId,\n                _message,\n                msg.sender\n            )\n        );\n        if (ok) {\n            return abi.decode((res), (IMessageReceiverApp.ExecutionStatus));\n        }\n        handleExecutionRevert(gasLeftBeforeExecution, res);\n        return IMessageReceiverApp.ExecutionStatus.Fail;\n    }\n\n    function executeMessageWithTransferRefund(MsgDataTypes.TransferInfo calldata _transfer, bytes calldata _message)\n        private\n        returns (IMessageReceiverApp.ExecutionStatus)\n    {\n        uint256 gasLeftBeforeExecution = gasleft();\n        (bool ok, bytes memory res) = address(_transfer.receiver).call{value: msg.value}(\n            abi.encodeWithSelector(\n                IMessageReceiverApp.executeMessageWithTransferRefund.selector,\n                _transfer.token,\n                _transfer.amount,\n                _message,\n                msg.sender\n            )\n        );\n        if (ok) {\n            return abi.decode((res), (IMessageReceiverApp.ExecutionStatus));\n        }\n        handleExecutionRevert(gasLeftBeforeExecution, res);\n        return IMessageReceiverApp.ExecutionStatus.Fail;\n    }\n\n    function verifyTransfer(MsgDataTypes.TransferInfo calldata _transfer) private view returns (bytes32) {\n        bytes32 transferId;\n        address bridgeAddr;\n        MsgDataTypes.TransferType t = _transfer.t;\n        if (t == MsgDataTypes.TransferType.LqRelay) {\n            bridgeAddr = liquidityBridge;\n            transferId = keccak256(\n                abi.encodePacked(\n                    _transfer.sender,\n                    _transfer.receiver,\n                    _transfer.token,\n                    _transfer.amount,\n                    _transfer.srcChainId,\n                    uint64(block.chainid),\n                    _transfer.refId\n                )\n            );\n            require(IBridge(bridgeAddr).transfers(transferId) == true, \"relay not exist\");\n        } else if (t == MsgDataTypes.TransferType.LqWithdraw) {\n            bridgeAddr = liquidityBridge;\n            transferId = keccak256(\n                abi.encodePacked(\n                    uint64(block.chainid),\n                    _transfer.wdseq,\n                    _transfer.receiver,\n                    _transfer.token,\n                    _transfer.amount\n                )\n            );\n            require(IBridge(bridgeAddr).withdraws(transferId) == true, \"withdraw not exist\");\n        } else {\n            if (t == MsgDataTypes.TransferType.PegMint || t == MsgDataTypes.TransferType.PegWithdraw) {\n                bridgeAddr = (t == MsgDataTypes.TransferType.PegMint) ? pegBridge : pegVault;\n                transferId = keccak256(\n                    abi.encodePacked(\n                        _transfer.receiver,\n                        _transfer.token,\n                        _transfer.amount,\n                        _transfer.sender,\n                        _transfer.srcChainId,\n                        _transfer.refId\n                    )\n                );\n            } else {\n                bridgeAddr = (t == MsgDataTypes.TransferType.PegV2Mint) ? pegBridgeV2 : pegVaultV2;\n                transferId = keccak256(\n                    abi.encodePacked(\n                        _transfer.receiver,\n                        _transfer.token,\n                        _transfer.amount,\n                        _transfer.sender,\n                        _transfer.srcChainId,\n                        _transfer.refId,\n                        bridgeAddr\n                    )\n                );\n            }\n            // function is same for peg, peg2, vault, vault2\n            require(IPeggedTokenBridge(bridgeAddr).records(transferId) == true, \"record not exist\");\n        }\n        require(IDelayedTransfer(bridgeAddr).delayedTransfers(transferId).timestamp == 0, \"transfer delayed\");\n        return keccak256(abi.encodePacked(MsgDataTypes.MsgType.MessageWithTransfer, bridgeAddr, transferId));\n    }\n\n    function computeMessageOnlyId(MsgDataTypes.Route memory _route, bytes calldata _message)\n        private\n        view\n        returns (bytes32)\n    {\n        bytes memory sender = _route.senderBytes;\n        if (sender.length == 0) {\n            sender = abi.encodePacked(_route.sender);\n        }\n        return\n            keccak256(\n                abi.encodePacked(\n                    MsgDataTypes.MsgType.MessageOnly,\n                    sender,\n                    _route.receiver,\n                    _route.srcChainId,\n                    _route.srcTxHash,\n                    uint64(block.chainid),\n                    _message\n                )\n            );\n    }\n\n    function executeMessage(MsgDataTypes.Route memory _route, bytes calldata _message)\n        private\n        returns (IMessageReceiverApp.ExecutionStatus)\n    {\n        uint256 gasLeftBeforeExecution = gasleft();\n        bool ok;\n        bytes memory res;\n        if (_route.senderBytes.length == 0) {\n            (ok, res) = address(_route.receiver).call{value: msg.value}(\n                abi.encodeWithSelector(\n                    bytes4(keccak256(bytes(\"executeMessage(address,uint64,bytes,address)\"))),\n                    _route.sender,\n                    _route.srcChainId,\n                    _message,\n                    msg.sender\n                )\n            );\n        } else {\n            (ok, res) = address(_route.receiver).call{value: msg.value}(\n                abi.encodeWithSelector(\n                    bytes4(keccak256(bytes(\"executeMessage(bytes,uint64,bytes,address)\"))),\n                    _route.senderBytes,\n                    _route.srcChainId,\n                    _message,\n                    msg.sender\n                )\n            );\n        }\n        if (ok) {\n            return abi.decode((res), (IMessageReceiverApp.ExecutionStatus));\n        }\n        handleExecutionRevert(gasLeftBeforeExecution, res);\n        return IMessageReceiverApp.ExecutionStatus.Fail;\n    }\n\n    function handleExecutionRevert(uint256 _gasLeftBeforeExecution, bytes memory _returnData) private {\n        uint256 gasLeftAfterExecution = gasleft();\n        uint256 maxTargetGasLimit = block.gaslimit - preExecuteMessageGasUsage;\n        if (_gasLeftBeforeExecution < maxTargetGasLimit && gasLeftAfterExecution <= _gasLeftBeforeExecution / 64) {\n            // if this happens, the executor must have not provided sufficient gas limit,\n            // then the tx should revert instead of recording a non-retryable failure status\n            // https://github.com/wolflo/evm-opcodes/blob/main/gas.md#aa-f-gas-to-send-with-call-operations\n            assembly {\n                invalid()\n            }\n        }\n        string memory revertMsg = Utils.getRevertMsg(_returnData);\n        // revert the execution if the revert message has the ABORT prefix\n        checkAbortPrefix(revertMsg);\n        // otherwiase, emit revert message, return and mark the execution as failed (non-retryable)\n        emit CallReverted(revertMsg);\n    }\n\n    function checkAbortPrefix(string memory _revertMsg) private pure {\n        bytes memory prefixBytes = bytes(MsgDataTypes.ABORT_PREFIX);\n        bytes memory msgBytes = bytes(_revertMsg);\n        if (msgBytes.length >= prefixBytes.length) {\n            for (uint256 i = 0; i < prefixBytes.length; i++) {\n                if (msgBytes[i] != prefixBytes[i]) {\n                    return; // prefix not match, return\n                }\n            }\n            revert(_revertMsg); // prefix match, revert\n        }\n    }\n\n    function getRouteInfo(MsgDataTypes.RouteInfo calldata _route) private pure returns (MsgDataTypes.Route memory) {\n        return MsgDataTypes.Route(_route.sender, \"\", _route.receiver, _route.srcChainId, _route.srcTxHash);\n    }\n\n    function getRouteInfo(MsgDataTypes.RouteInfo2 calldata _route) private pure returns (MsgDataTypes.Route memory) {\n        return MsgDataTypes.Route(address(0), _route.sender, _route.receiver, _route.srcChainId, _route.srcTxHash);\n    }\n\n    // ================= helper functions =====================\n\n    /**\n     * @notice combine bridge transfer and msg execution calls into a single tx\n     * @dev caller needs to get the required input params from SGN\n     * @param _tp params to call bridge transfer\n     * @param _mp params to execute message\n     */\n    function transferAndExecuteMsg(\n        MsgDataTypes.BridgeTransferParams calldata _tp,\n        MsgDataTypes.MsgWithTransferExecutionParams calldata _mp\n    ) external {\n        _bridgeTransfer(_mp.transfer.t, _tp);\n        executeMessageWithTransfer(_mp.message, _mp.transfer, _mp.sigs, _mp.signers, _mp.powers);\n    }\n\n    /**\n     * @notice combine bridge refund and msg execution calls into a single tx\n     * @dev caller needs to get the required input params from SGN\n     * @param _tp params to call bridge transfer for refund\n     * @param _mp params to execute message for refund\n     */\n    function refundAndExecuteMsg(\n        MsgDataTypes.BridgeTransferParams calldata _tp,\n        MsgDataTypes.MsgWithTransferExecutionParams calldata _mp\n    ) external {\n        _bridgeTransfer(_mp.transfer.t, _tp);\n        executeMessageWithTransferRefund(_mp.message, _mp.transfer, _mp.sigs, _mp.signers, _mp.powers);\n    }\n\n    function _bridgeTransfer(MsgDataTypes.TransferType t, MsgDataTypes.BridgeTransferParams calldata _params) private {\n        if (t == MsgDataTypes.TransferType.LqRelay) {\n            IBridge(liquidityBridge).relay(_params.request, _params.sigs, _params.signers, _params.powers);\n        } else if (t == MsgDataTypes.TransferType.LqWithdraw) {\n            IBridge(liquidityBridge).withdraw(_params.request, _params.sigs, _params.signers, _params.powers);\n        } else if (t == MsgDataTypes.TransferType.PegMint) {\n            IPeggedTokenBridge(pegBridge).mint(_params.request, _params.sigs, _params.signers, _params.powers);\n        } else if (t == MsgDataTypes.TransferType.PegV2Mint) {\n            IPeggedTokenBridgeV2(pegBridgeV2).mint(_params.request, _params.sigs, _params.signers, _params.powers);\n        } else if (t == MsgDataTypes.TransferType.PegWithdraw) {\n            IOriginalTokenVault(pegVault).withdraw(_params.request, _params.sigs, _params.signers, _params.powers);\n        } else if (t == MsgDataTypes.TransferType.PegV2Withdraw) {\n            IOriginalTokenVaultV2(pegVaultV2).withdraw(_params.request, _params.sigs, _params.signers, _params.powers);\n        }\n    }\n\n    // ================= contract config =================\n\n    function setLiquidityBridge(address _addr) public onlyOwner {\n        require(_addr != address(0), \"invalid address\");\n        liquidityBridge = _addr;\n        emit LiquidityBridgeUpdated(liquidityBridge);\n    }\n\n    function setPegBridge(address _addr) public onlyOwner {\n        require(_addr != address(0), \"invalid address\");\n        pegBridge = _addr;\n        emit PegBridgeUpdated(pegBridge);\n    }\n\n    function setPegVault(address _addr) public onlyOwner {\n        require(_addr != address(0), \"invalid address\");\n        pegVault = _addr;\n        emit PegVaultUpdated(pegVault);\n    }\n\n    function setPegBridgeV2(address _addr) public onlyOwner {\n        require(_addr != address(0), \"invalid address\");\n        pegBridgeV2 = _addr;\n        emit PegBridgeV2Updated(pegBridgeV2);\n    }\n\n    function setPegVaultV2(address _addr) public onlyOwner {\n        require(_addr != address(0), \"invalid address\");\n        pegVaultV2 = _addr;\n        emit PegVaultV2Updated(pegVaultV2);\n    }\n\n    function setPreExecuteMessageGasUsage(uint256 _usage) public onlyOwner {\n        preExecuteMessageGasUsage = _usage;\n    }\n}\n"
    },
    "contracts/message/messagebus/MessageBusSender.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.17;\n\nimport \"../../safeguard/Ownable.sol\";\nimport \"../../interfaces/ISigsVerifier.sol\";\n\ncontract MessageBusSender is Ownable {\n    ISigsVerifier public immutable sigsVerifier;\n\n    uint256 public feeBase;\n    uint256 public feePerByte;\n    mapping(address => uint256) public withdrawnFees;\n\n    event Message(address indexed sender, address receiver, uint256 dstChainId, bytes message, uint256 fee);\n    // message to non-evm chain with >20 bytes addr\n    event Message2(address indexed sender, bytes receiver, uint256 dstChainId, bytes message, uint256 fee);\n\n    event MessageWithTransfer(\n        address indexed sender,\n        address receiver,\n        uint256 dstChainId,\n        address bridge,\n        bytes32 srcTransferId,\n        bytes message,\n        uint256 fee\n    );\n\n    event FeeWithdrawn(address receiver, uint256 amount);\n\n    event FeeBaseUpdated(uint256 feeBase);\n    event FeePerByteUpdated(uint256 feePerByte);\n\n    constructor(ISigsVerifier _sigsVerifier) {\n        sigsVerifier = _sigsVerifier;\n    }\n\n    /**\n     * @notice Sends a message to a contract on another chain.\n     * Sender needs to make sure the uniqueness of the message Id, which is computed as\n     * hash(type.MessageOnly, sender, receiver, srcChainId, srcTxHash, dstChainId, message).\n     * If messages with the same Id are sent, only one of them will succeed at dst chain.\n     * A fee is charged in the native gas token.\n     * @param _receiver The address of the destination app contract.\n     * @param _dstChainId The destination chain ID.\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\n     */\n    function sendMessage(\n        address _receiver,\n        uint256 _dstChainId,\n        bytes calldata _message\n    ) external payable {\n        _sendMessage(_dstChainId, _message);\n        emit Message(msg.sender, _receiver, _dstChainId, _message, msg.value);\n    }\n\n    // Send message to non-evm chain with bytes for receiver address,\n    // otherwise same as above.\n    function sendMessage(\n        bytes calldata _receiver,\n        uint256 _dstChainId,\n        bytes calldata _message\n    ) external payable {\n        _sendMessage(_dstChainId, _message);\n        emit Message2(msg.sender, _receiver, _dstChainId, _message, msg.value);\n    }\n\n    function _sendMessage(uint256 _dstChainId, bytes calldata _message) private {\n        require(_dstChainId != block.chainid, \"Invalid chainId\");\n        uint256 minFee = calcFee(_message);\n        require(msg.value >= minFee, \"Insufficient fee\");\n    }\n\n    /**\n     * @notice Sends a message associated with a transfer to a contract on another chain.\n     * If messages with the same srcTransferId are sent, only one of them will succeed.\n     * A fee is charged in the native token.\n     * @param _receiver The address of the destination app contract.\n     * @param _dstChainId The destination chain ID.\n     * @param _srcBridge The bridge contract to send the transfer with.\n     * @param _srcTransferId The transfer ID.\n     * @param _dstChainId The destination chain ID.\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\n     */\n    function sendMessageWithTransfer(\n        address _receiver,\n        uint256 _dstChainId,\n        address _srcBridge,\n        bytes32 _srcTransferId,\n        bytes calldata _message\n    ) external payable {\n        require(_dstChainId != block.chainid, \"Invalid chainId\");\n        uint256 minFee = calcFee(_message);\n        require(msg.value >= minFee, \"Insufficient fee\");\n        // SGN needs to verify\n        // 1. msg.sender matches sender of the src transfer\n        // 2. dstChainId matches dstChainId of the src transfer\n        // 3. bridge is either liquidity bridge, peg src vault, or peg dst bridge\n        emit MessageWithTransfer(msg.sender, _receiver, _dstChainId, _srcBridge, _srcTransferId, _message, msg.value);\n    }\n\n    /**\n     * @notice Withdraws message fee in the form of native gas token.\n     * @param _account The address receiving the fee.\n     * @param _cumulativeFee The cumulative fee credited to the account. Tracked by SGN.\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A withdrawal must be\n     * signed-off by +2/3 of the sigsVerifier's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function withdrawFee(\n        address _account,\n        uint256 _cumulativeFee,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external {\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \"withdrawFee\"));\n        sigsVerifier.verifySigs(abi.encodePacked(domain, _account, _cumulativeFee), _sigs, _signers, _powers);\n        uint256 amount = _cumulativeFee - withdrawnFees[_account];\n        require(amount > 0, \"No new amount to withdraw\");\n        withdrawnFees[_account] = _cumulativeFee;\n        (bool sent, ) = _account.call{value: amount, gas: 50000}(\"\");\n        require(sent, \"failed to withdraw fee\");\n        emit FeeWithdrawn(_account, amount);\n    }\n\n    /**\n     * @notice Calculates the required fee for the message.\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\n     @ @return The required fee.\n     */\n    function calcFee(bytes calldata _message) public view returns (uint256) {\n        return feeBase + _message.length * feePerByte;\n    }\n\n    // -------------------- Admin --------------------\n\n    function setFeePerByte(uint256 _fee) external onlyOwner {\n        feePerByte = _fee;\n        emit FeePerByteUpdated(feePerByte);\n    }\n\n    function setFeeBase(uint256 _fee) external onlyOwner {\n        feeBase = _fee;\n        emit FeeBaseUpdated(feeBase);\n    }\n}\n"
    },
    "contracts/message/safeguard/DelayedMessage.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\nimport \"../../safeguard/Ownable.sol\";\n\nabstract contract DelayedMessage is Ownable {\n    // universal unique id (not msgId) => delay start time\n    mapping(bytes32 => uint256) public delayedMessages;\n    uint256 public delayPeriod; // in seconds\n    uint32 public nonce;\n\n    event DelayedMessageAdded(bytes32 id, address srcContract, uint64 srcChainId, bytes message, uint32 nonce);\n    event DelayedMessageExecuted(bytes32 id);\n\n    event DelayPeriodUpdated(uint256 period);\n\n    function _addDelayedMessage(\n        address _srcContract,\n        uint64 _srcChainId,\n        bytes calldata _message\n    ) internal {\n        bytes32 id = keccak256(abi.encodePacked(_srcContract, _srcChainId, _message, uint64(block.chainid), nonce));\n        delayedMessages[id] = uint256(block.timestamp);\n        emit DelayedMessageAdded(id, _srcContract, _srcChainId, _message, nonce);\n        nonce += 1;\n    }\n\n    // caller needs to do the actual message execution\n    function _executeDelayedMessage(\n        address _srcContract,\n        uint64 _srcChainId,\n        bytes memory _message,\n        uint32 _nonce\n    ) internal {\n        bytes32 id = keccak256(abi.encodePacked(_srcContract, _srcChainId, _message, uint64(block.chainid), _nonce));\n        require(delayedMessages[id] > 0, \"delayed message not exist\");\n        require(block.timestamp > delayedMessages[id] + delayPeriod, \"delayed message still locked\");\n        delete delayedMessages[id];\n        emit DelayedMessageExecuted(id);\n    }\n\n    function setDelayPeriod(uint256 _period) external onlyOwner {\n        delayPeriod = _period;\n        emit DelayPeriodUpdated(_period);\n    }\n}\n"
    },
    "contracts/message/safeguard/MessageAppPauser.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\nimport \"../libraries/MsgDataTypes.sol\";\nimport \"../../safeguard/Pauser.sol\";\n\nabstract contract MessageAppPauser is Pauser {\n    /**\n     * @dev Modifier to make the message execution function callable only when\n     * the contract is not paused.\n     *\n     * Added the ABORT_PREFIX (\"MSG::ABORT:\") in front of the revert message to\n     * work with the Celer IM MessageBus contract, so that the message execution\n     * can be retried later when the contract is unpaused.\n     */\n    modifier whenNotMsgPaused() {\n        require(!paused(), MsgDataTypes.abortReason(\"Pausable: paused\"));\n        _;\n    }\n}\n"
    },
    "contracts/pegged-bridge/tokens/customized/xc20/interfaces/IXC20BridgeHub.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.0;\n\ninterface IXC20BridgeHub {\n    /**\n     * @dev Swaps intermediary bridge token for canonical XC-20 token.\n     * @param bridgeToken The intermediary bridge token\n     * @param amount The amount to swap\n     * @return The canonical token amount\n     */\n    function swapBridgeForCanonical(address bridgeToken, uint256 amount) external returns (uint256);\n\n    /**\n     * @dev Swaps canonical XC-20 token for intermediary bridge token.\n     * @param bridgeToken The intermediary bridge token\n     * @param amount The amount to swap\n     * @return The bridge token amount\n     */\n    function swapCanonicalForBridge(address bridgeToken, uint256 amount) external returns (uint256);\n}\n"
    },
    "contracts/pegged-bridge/tokens/customized/xc20/XC20BridgeHub.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./interfaces/IXC20BridgeHub.sol\";\n\n/**\n * @title A hub for managing swapping between canonical XC20 tokens and intermediary bridge tokens.\n */\ncontract XC20BridgeHub is Ownable, IXC20BridgeHub, Pausable {\n    using SafeERC20 for IERC20;\n\n    struct TokenPair {\n        address bridgeToken;\n        address canonicalToken;\n        bool paused;\n        uint256 limit; // Max amount of bridge token allowed in the hub.\n    }\n    address[] public bridgeTokens;\n    // bridge token address => TokenPair\n    mapping(address => TokenPair) public tokenPairMap;\n\n    event TokenPairAdded(address indexed bridgeToken, address indexed canonicalToken, uint256 limit);\n    event TokenPairRemoved(address indexed bridgeToken, address indexed canonicalToken);\n    event TokenPairPaused(address indexed bridgeToken, address indexed canonicalToken);\n    event TokenPairUnpaused(address indexed bridgeToken, address indexed canonicalToken);\n    event TokenPairLimitSet(address indexed bridgeToken, address indexed canonicalToken, uint256 limit);\n    event BridgeSwappedForCanonical(\n        address indexed bridgeToken,\n        address indexed canonicalToken,\n        uint256 bridgeTokenAmount,\n        uint256 refund,\n        uint256 canonicalTokenAmount\n    );\n    event CanonicalSwappedForBridge(\n        address indexed bridgeToken,\n        address indexed canonicalToken,\n        uint256 canonicalTokenAmount,\n        uint256 refund,\n        uint256 bridgeTokenAmount\n    );\n\n    /**\n     * @dev Pauses a token pair.\n     * @param _bridgeToken The bridge token of the pair.\n     */\n    function pauseTokenPair(address _bridgeToken) external onlyOwner {\n        TokenPair storage pair = tokenPairMap[_bridgeToken];\n        require(pair.bridgeToken != address(0), \"XC20BridgeHub: non-existent bridge token\");\n        require(!pair.paused, \"XC20BridgeHub: token pair already paused\");\n        pair.paused = true;\n        emit TokenPairPaused(_bridgeToken, pair.canonicalToken);\n    }\n\n    /**\n     * @dev Unpauses a token pair.\n     * @param _bridgeToken The bridge token of the pair.\n     */\n    function unpauseTokenPair(address _bridgeToken) external onlyOwner {\n        TokenPair storage pair = tokenPairMap[_bridgeToken];\n        require(pair.bridgeToken != address(0), \"XC20BridgeHub: non-existent bridge token\");\n        require(pair.paused, \"XC20BridgeHub: token pair already unpaused\");\n        pair.paused = false;\n        emit TokenPairUnpaused(_bridgeToken, pair.canonicalToken);\n    }\n\n    /**\n     * @dev Sets a token pair limit.\n     * @param _bridgeToken The bridge token of the pair.\n     * @param _limit The max amount of bridge token allowed in the hub.\n     */\n    function setTokenPairLimit(address _bridgeToken, uint256 _limit) external onlyOwner {\n        TokenPair storage pair = tokenPairMap[_bridgeToken];\n        require(pair.bridgeToken != address(0), \"XC20BridgeHub: non-existent bridge token\");\n        pair.limit = _limit;\n        emit TokenPairLimitSet(_bridgeToken, pair.canonicalToken, _limit);\n    }\n\n    /**\n     * @dev Adds a token pair.\n     * @param _bridgeToken The bridge token of the pair.\n     * @param _canonicalToken The canonical token of the pair.\n     * @param _limit The max amount of bridge token allowed in the hub.\n     */\n    function addTokenPair(\n        address _bridgeToken,\n        address _canonicalToken,\n        uint256 _limit\n    ) external onlyOwner {\n        require(_bridgeToken != address(0), \"XC20BridgeHub: bridge token is zero address\");\n        require(tokenPairMap[_bridgeToken].bridgeToken == address(0), \"XC20BridgeHub: bridge token exists\");\n        require(\n            IERC20Metadata(_bridgeToken).decimals() == IERC20Metadata(_canonicalToken).decimals(),\n            \"XC20BridgeHub: decimals mismatch\"\n        );\n\n        TokenPair memory pair = TokenPair(address(_bridgeToken), address(_canonicalToken), false, _limit);\n        bridgeTokens.push(_bridgeToken);\n        tokenPairMap[_bridgeToken] = pair;\n        emit TokenPairAdded(_bridgeToken, _canonicalToken, _limit);\n    }\n\n    /**\n     * @dev Removes a token pair.\n     * @param _bridgeToken The bridge token of the pair.\n     */\n    function removeTokenPair(address _bridgeToken) external onlyOwner {\n        TokenPair memory pair = tokenPairMap[_bridgeToken];\n        require(pair.bridgeToken != address(0), \"XC20BridgeHub: non-existent bridge token\");\n        delete tokenPairMap[_bridgeToken];\n        uint256 index = bridgeTokens.length;\n        for (uint256 i = 0; i < bridgeTokens.length; i++) {\n            if (bridgeTokens[i] == _bridgeToken) {\n                index = i;\n                break;\n            }\n        }\n        if (index < bridgeTokens.length) {\n            delete bridgeTokens[index];\n        }\n        emit TokenPairRemoved(_bridgeToken, pair.canonicalToken);\n    }\n\n    /**\n     * @dev Returns all token pairs.\n     */\n    function getAllTokenPairs() external view returns (TokenPair[] memory) {\n        TokenPair[] memory pairs = new TokenPair[](bridgeTokens.length);\n        for (uint256 i = 0; i < pairs.length; i++) {\n            pairs[i] = tokenPairMap[bridgeTokens[i]];\n        }\n        return pairs;\n    }\n\n    /**\n     * @dev Swaps intermediary bridge token for canonical XC-20 token.\n     * @param _bridgeToken The intermediary bridge token\n     * @param _amount The amount to swap\n     * @return The canonical token amount\n     */\n    function swapBridgeForCanonical(address _bridgeToken, uint256 _amount)\n        external\n        override\n        whenNotPaused\n        returns (uint256)\n    {\n        TokenPair memory pair = tokenPairMap[_bridgeToken];\n        require(pair.bridgeToken != address(0), \"XC20BridgeHub: non-existent bridge token\");\n        require(!pair.paused, \"XC20BridgeHub: token pair paused\");\n        IERC20 bridgeErc20 = IERC20(_bridgeToken);\n        require(\n            pair.limit > 0 && (bridgeErc20.balanceOf(address(this))) + _amount <= pair.limit,\n            \"XC20BridgeHub: exceeds bridge limit\"\n        );\n\n        address canonicalToken = pair.canonicalToken;\n        uint256 delta = transferIn(_bridgeToken, _amount);\n        (uint256 canonicalTokenAmount, uint256 refund) = calcTransferAmountWithDecimals(\n            delta,\n            IERC20Metadata(_bridgeToken).decimals(),\n            IERC20Metadata(canonicalToken).decimals()\n        );\n        if (refund > 0) {\n            IERC20(_bridgeToken).safeTransfer(msg.sender, refund);\n        }\n        if (canonicalTokenAmount > 0) {\n            IERC20(pair.canonicalToken).safeTransfer(msg.sender, _amount);\n        }\n        emit BridgeSwappedForCanonical(_bridgeToken, canonicalToken, _amount, refund, canonicalTokenAmount);\n        return canonicalTokenAmount;\n    }\n\n    /**\n     * @dev Swaps canonical XC-20 token for intermediary bridge token.\n     * @param _bridgeToken The intermediary bridge token\n     * @param _amount The amount to swap\n     * @return The bridge token amount\n     */\n    function swapCanonicalForBridge(address _bridgeToken, uint256 _amount)\n        external\n        override\n        whenNotPaused\n        returns (uint256)\n    {\n        TokenPair memory pair = tokenPairMap[_bridgeToken];\n        require(pair.bridgeToken != address(0), \"XC20BridgeHub: non-existent bridge token\");\n        require(!pair.paused, \"XC20BridgeHub: token pair paused\");\n\n        address canonicalToken = pair.canonicalToken;\n        uint256 delta = transferIn(canonicalToken, _amount);\n        (uint256 bridgeTokenAmount, uint256 refund) = calcTransferAmountWithDecimals(\n            delta,\n            IERC20Metadata(canonicalToken).decimals(),\n            IERC20Metadata(_bridgeToken).decimals()\n        );\n        if (refund > 0) {\n            IERC20(canonicalToken).safeTransfer(msg.sender, refund);\n        }\n        if (bridgeTokenAmount > 0) {\n            IERC20(_bridgeToken).safeTransfer(msg.sender, _amount);\n        }\n        emit CanonicalSwappedForBridge(_bridgeToken, canonicalToken, _amount, refund, bridgeTokenAmount);\n        return bridgeTokenAmount;\n    }\n\n    /**\n     * @dev Sets the paused status of the hub.\n     * @param _paused Whether the hub should be paused\n     */\n    function setPaused(bool _paused) external onlyOwner {\n        if (_paused) {\n            _pause();\n        } else {\n            _unpause();\n        }\n    }\n\n    /**\n     * @dev Transfers the amount of tokens into the hub.\n     * @param _token The token address\n     * @param _amount The transfer amount\n     * @return The balance change\n     */\n    function transferIn(address _token, uint256 _amount) internal returns (uint256) {\n        uint256 balanceBefore = IERC20(_token).balanceOf(address(this));\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\n        uint256 balanceAfter = IERC20(_token).balanceOf(address(this));\n        return balanceAfter - balanceBefore;\n    }\n\n    /**\n     * @dev Calculates the transfer amount and if applicable, refund amount, taking into account the\n     * difference between token decimals.\n     * @param _amount The original amount\n     * @param _aDecimals The decimals of token A\n     * @param _bDecimals The decimals of token B\n     */\n    function calcTransferAmountWithDecimals(\n        uint256 _amount,\n        uint256 _aDecimals,\n        uint256 _bDecimals\n    ) internal pure returns (uint256 newAmount, uint256 refund) {\n        if (_aDecimals > _bDecimals) {\n            newAmount = _amount / (10**(_aDecimals - _bDecimals));\n            refund = _amount - newAmount * (10**(_aDecimals - _bDecimals));\n        } else if (_aDecimals < _bDecimals) {\n            newAmount = _amount * (10**(_bDecimals - _aDecimals));\n        } else {\n            newAmount = _amount;\n        }\n    }\n\n    // This account has to hold some amount of native currency in order to be eligible\n    // to receive canonical x20 assets per Astar rule\n    receive() external payable {}\n}\n"
    },
    "contracts/pegged-bridge/tokens/customized/xc20/XC20BridgeToken.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./interfaces/IXC20BridgeHub.sol\";\n\n/**\n * @title Intermediary bridge token that supports swapping with the XC-20 bridge hub.\n * NOTE: XC-20 bridge hub is NOT the canonical token itself.\n */\ncontract XC20BridgeToken is ERC20, Ownable {\n    using SafeERC20 for IERC20;\n\n    // The pegged token bridge\n    address public bridge;\n    // XC20 bridge hub for swapping\n    address public immutable bridgeHub;\n    // The canonical token\n    address public immutable canonicalToken;\n\n    event BridgeUpdated(address bridge);\n\n    modifier onlyBridge() {\n        require(msg.sender == bridge, \"XC20BridgeToken: caller is not bridge\");\n        _;\n    }\n\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        address _bridge,\n        address _bridgeHub,\n        address _canonicalToken\n    ) ERC20(name_, symbol_) {\n        bridge = _bridge;\n        bridgeHub = _bridgeHub;\n        canonicalToken = _canonicalToken;\n    }\n\n    function mint(address _to, uint256 _amount) external onlyBridge returns (bool) {\n        _mint(address(this), _amount); // Mint to this contract to be transferred to the hub\n        _approve(address(this), bridgeHub, _amount);\n        IXC20BridgeHub(bridgeHub).swapBridgeForCanonical(address(this), _amount);\n        // Now this has canonical token, next step is to transfer to user.\n        IERC20(canonicalToken).safeTransfer(_to, _amount);\n        return true;\n    }\n\n    function burn(address _from, uint256 _amount) external onlyBridge returns (bool) {\n        IERC20(canonicalToken).safeTransferFrom(_from, address(this), _amount);\n        IERC20(canonicalToken).safeIncreaseAllowance(address(bridgeHub), _amount);\n        IXC20BridgeHub(bridgeHub).swapCanonicalForBridge(address(this), _amount);\n        _burn(address(this), _amount);\n        return true;\n    }\n\n    function updateBridge(address _bridge) external onlyOwner {\n        bridge = _bridge;\n        emit BridgeUpdated(bridge);\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return ERC20(canonicalToken).decimals();\n    }\n\n    // For compatibility with BEP20\n    function getOwner() external view returns (address) {\n        return owner();\n    }\n\n    // This account has to hold some amount of native currency in order to be eligible\n    // to receive canonical x20 assets per Astar rule\n    receive() external payable {}\n}\n"
    },
    "contracts/safeguard/Governor.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.17;\n\nimport \"./Ownable.sol\";\n\nabstract contract Governor is Ownable {\n    mapping(address => bool) public governors;\n\n    event GovernorAdded(address account);\n    event GovernorRemoved(address account);\n\n    modifier onlyGovernor() {\n        require(isGovernor(msg.sender), \"Caller is not governor\");\n        _;\n    }\n\n    constructor() {\n        _addGovernor(msg.sender);\n    }\n\n    function isGovernor(address _account) public view returns (bool) {\n        return governors[_account];\n    }\n\n    function addGovernor(address _account) public onlyOwner {\n        _addGovernor(_account);\n    }\n\n    function removeGovernor(address _account) public onlyOwner {\n        _removeGovernor(_account);\n    }\n\n    function renounceGovernor() public {\n        _removeGovernor(msg.sender);\n    }\n\n    function _addGovernor(address _account) private {\n        require(!isGovernor(_account), \"Account is already governor\");\n        governors[_account] = true;\n        emit GovernorAdded(_account);\n    }\n\n    function _removeGovernor(address _account) private {\n        require(isGovernor(_account), \"Account is not governor\");\n        governors[_account] = false;\n        emit GovernorRemoved(_account);\n    }\n}\n"
    },
    "contracts/safeguard/Ownable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n *\n * This adds a normal func that setOwner if _owner is address(0). So we can't allow\n * renounceOwnership. So we can support Proxy based upgradable contract\n */\nabstract contract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(msg.sender);\n    }\n\n    /**\n     * @dev Only to be called by inherit contracts, in their init func called by Proxy\n     * we require _owner == address(0), which is only possible when it's a delegateCall\n     * because constructor sets _owner in contract state.\n     */\n    function initOwner() internal {\n        require(_owner == address(0), \"owner already set\");\n        _setOwner(msg.sender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/safeguard/Pauser.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"./Ownable.sol\";\n\nabstract contract Pauser is Ownable, Pausable {\n    mapping(address => bool) public pausers;\n\n    event PauserAdded(address account);\n    event PauserRemoved(address account);\n\n    constructor() {\n        _addPauser(msg.sender);\n    }\n\n    modifier onlyPauser() {\n        require(isPauser(msg.sender), \"Caller is not pauser\");\n        _;\n    }\n\n    function pause() public onlyPauser {\n        _pause();\n    }\n\n    function unpause() public onlyPauser {\n        _unpause();\n    }\n\n    function isPauser(address account) public view returns (bool) {\n        return pausers[account];\n    }\n\n    function addPauser(address account) public onlyOwner {\n        _addPauser(account);\n    }\n\n    function removePauser(address account) public onlyOwner {\n        _removePauser(account);\n    }\n\n    function renouncePauser() public {\n        _removePauser(msg.sender);\n    }\n\n    function _addPauser(address account) private {\n        require(!isPauser(account), \"Account is already pauser\");\n        pausers[account] = true;\n        emit PauserAdded(account);\n    }\n\n    function _removePauser(address account) private {\n        require(isPauser(account), \"Account is not pauser\");\n        pausers[account] = false;\n        emit PauserRemoved(account);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 800
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}