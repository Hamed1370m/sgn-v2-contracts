{
  "address": "0xaF2438C82578Cc1065661Dc7AC8173382F600279",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidityBridge",
          "type": "address"
        }
      ],
      "name": "LiquidityBridgeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pegBridge",
          "type": "address"
        }
      ],
      "name": "PegBridgeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pegBridgeV2",
          "type": "address"
        }
      ],
      "name": "PegBridgeV2Updated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pegVault",
          "type": "address"
        }
      ],
      "name": "PegVaultUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pegVaultV2",
          "type": "address"
        }
      ],
      "name": "PegVaultV2Updated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addPauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum BridgeSenderLib.BridgeType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "bridges",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isPauser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pausers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "records",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_request",
          "type": "bytes"
        },
        {
          "internalType": "bytes[]",
          "name": "_sigs",
          "type": "bytes[]"
        },
        {
          "internalType": "address[]",
          "name": "_signers",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_powers",
          "type": "uint256[]"
        },
        {
          "internalType": "enum BridgeSenderLib.BridgeType",
          "name": "_bridgeType",
          "type": "uint8"
        }
      ],
      "name": "refund",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renouncePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setLiquidityBridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setPegBridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setPegBridgeV2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setPegVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setPegVaultV2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_dstChainId",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "_maxSlippage",
          "type": "uint32"
        },
        {
          "internalType": "enum BridgeSenderLib.BridgeType",
          "name": "_bridgeType",
          "type": "uint8"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc54a67bf52898ba17ded644a97d18d9d5c3ced2ba9c6d19fbca46d7ea8705614",
  "receipt": {
    "to": null,
    "from": "0xb5BB8b7f6f1883e0c01ffb8697024532e6F3238C",
    "contractAddress": "0xaF2438C82578Cc1065661Dc7AC8173382F600279",
    "transactionIndex": 6,
    "gasUsed": "3093910",
    "logsBloom": "0x
    "blockHash": "0x8d7cc800078fca9e9e1941f1df42d46380715c96fb28486b4d5f7ea9e12be465",
    "transactionHash": "0xc54a67bf52898ba17ded644a97d18d9d5c3ced2ba9c6d19fbca46d7ea8705614",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 17002976,
        "transactionHash": "0xc54a67bf52898ba17ded644a97d18d9d5c3ced2ba9c6d19fbca46d7ea8705614",
        "address": "0xaF2438C82578Cc1065661Dc7AC8173382F600279",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b5bb8b7f6f1883e0c01ffb8697024532e6f3238c"
        ],
        "data": "0x",
        "logIndex": 12,
        "blockHash": "0x8d7cc800078fca9e9e1941f1df42d46380715c96fb28486b4d5f7ea9e12be465"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 17002976,
        "transactionHash": "0xc54a67bf52898ba17ded644a97d18d9d5c3ced2ba9c6d19fbca46d7ea8705614",
        "address": "0xaF2438C82578Cc1065661Dc7AC8173382F600279",
        "topics": [
          "0x6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f8"
        ],
        "data": "0x000000000000000000000000b5bb8b7f6f1883e0c01ffb8697024532e6f3238c",
        "logIndex": 13,
        "blockHash": "0x8d7cc800078fca9e9e1941f1df42d46380715c96fb28486b4d5f7ea9e12be465"
      }
    ],
    "blockNumber": 17002976,
    "cumulativeGasUsed": "4101689",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "9d4b58abe3a79af5bf76169071b93aa8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidityBridge\",\"type\":\"address\"}],\"name\":\"LiquidityBridgeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pegBridge\",\"type\":\"address\"}],\"name\":\"PegBridgeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pegBridgeV2\",\"type\":\"address\"}],\"name\":\"PegBridgeV2Updated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pegVault\",\"type\":\"address\"}],\"name\":\"PegVaultUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pegVaultV2\",\"type\":\"address\"}],\"name\":\"PegVaultV2Updated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum BridgeSenderLib.BridgeType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"bridges\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pausers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"records\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_request\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"_sigs\",\"type\":\"bytes[]\"},{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_powers\",\"type\":\"uint256[]\"},{\"internalType\":\"enum BridgeSenderLib.BridgeType\",\"name\":\"_bridgeType\",\"type\":\"uint8\"}],\"name\":\"refund\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setLiquidityBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setPegBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setPegBridgeV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setPegVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setPegVaultV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"_maxSlippage\",\"type\":\"uint32\"},{\"internalType\":\"enum BridgeSenderLib.BridgeType\",\"name\":\"_bridgeType\",\"type\":\"uint8\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deposit(address,uint256)\":{\"params\":{\"_amount\":\"The amount to deposit.\",\"_token\":\"The deposited token address.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"refund(bytes,bytes[],address[],uint256[],uint8)\":{\"params\":{\"_bridgeType\":\"The type of bridge used by this failed transfer. One of the {BridgeType} enum.\",\"_powers\":\"The signing powers of the signers.\",\"_request\":\"The serialized request protobuf.\",\"_signers\":\"The sorted list of signers.\",\"_sigs\":\"The list of signatures sorted by signing addresses in ascending order. A request must be signed-off by +2/3 of the bridge's current signing power to be delivered.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transfer(address,address,uint256,uint64,uint64,uint32,uint8)\":{\"params\":{\"_amount\":\"The amount of the transfer.\",\"_bridgeType\":\"The type of bridge used by this transfer. One of the {BridgeType} enum.\",\"_dstChainId\":\"The destination chain ID.\",\"_maxSlippage\":\"(optional, only used for transfer via liquidity pool-based bridge) The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%. Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the transfer can be refunded.\",\"_nonce\":\"A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\",\"_receiver\":\"The address of the receiver.\",\"_token\":\"The address of the token.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deposit(address,uint256)\":{\"notice\":\"Lock tokens.\"},\"refund(bytes,bytes[],address[],uint256[],uint8)\":{\"notice\":\"Refund a failed cross-chain transfer.\"},\"transfer(address,address,uint256,uint64,uint64,uint32,uint8)\":{\"notice\":\"Send a cross-chain transfer either via liquidity pool-based bridge or in form of mint/burn.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test-helpers/ContractAsSender.sol\":\"ContractAsSender\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"contracts/interfaces/IBridge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IBridge {\\n    function send(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage\\n    ) external;\\n\\n    function relay(\\n        bytes calldata _relayRequest,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    function transfers(bytes32 transferId) external view returns (bool);\\n\\n    function withdraws(bytes32 withdrawId) external view returns (bool);\\n\\n    /**\\n     * @notice Verifies that a message is signed by a quorum among the signers.\\n     * @param _msg signed message\\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\\n     * @param _signers sorted list of current signers\\n     * @param _powers powers of current signers\\n     */\\n    function verifySigs(\\n        bytes memory _msg,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external view;\\n}\\n\",\"keccak256\":\"0xa16580c0d244b975ff74627da5bc54e86c66a278b5bdf0ab6d8afe4623eacc0d\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IOriginalTokenVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IOriginalTokenVault {\\n    /**\\n     * @notice Lock original tokens to trigger mint at a remote chain's PeggedTokenBridge\\n     * @param _token local token address\\n     * @param _amount locked token amount\\n     * @param _mintChainId destination chainId to mint tokens\\n     * @param _mintAccount destination account to receive minted tokens\\n     * @param _nonce user input to guarantee unique depositId\\n     */\\n    function deposit(\\n        address _token,\\n        uint256 _amount,\\n        uint64 _mintChainId,\\n        address _mintAccount,\\n        uint64 _nonce\\n    ) external;\\n\\n    /**\\n     * @notice Withdraw locked original tokens triggered by a burn at a remote chain's PeggedTokenBridge.\\n     * @param _request The serialized Withdraw protobuf.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the bridge's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function withdraw(\\n        bytes calldata _request,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    function records(bytes32 recordId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8b4e940c16d960a4f8f0516951c52afbeb31c9b8bbbda7523650aadee2d72369\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IOriginalTokenVaultV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IOriginalTokenVaultV2 {\\n    /**\\n     * @notice Lock original tokens to trigger mint at a remote chain's PeggedTokenBridge\\n     * @param _token local token address\\n     * @param _amount locked token amount\\n     * @param _mintChainId destination chainId to mint tokens\\n     * @param _mintAccount destination account to receive minted tokens\\n     * @param _nonce user input to guarantee unique depositId\\n     */\\n    function deposit(\\n        address _token,\\n        uint256 _amount,\\n        uint64 _mintChainId,\\n        address _mintAccount,\\n        uint64 _nonce\\n    ) external returns (bytes32);\\n\\n    /**\\n     * @notice Withdraw locked original tokens triggered by a burn at a remote chain's PeggedTokenBridge.\\n     * @param _request The serialized Withdraw protobuf.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the bridge's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function withdraw(\\n        bytes calldata _request,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external returns (bytes32);\\n\\n    function records(bytes32 recordId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc3d522d350cd42dc296fdea6ae75d7fe39244638161aadd1cbc70de13e34380d\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IPeggedTokenBridge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IPeggedTokenBridge {\\n    /**\\n     * @notice Burn tokens to trigger withdrawal at a remote chain's OriginalTokenVault\\n     * @param _token local token address\\n     * @param _amount locked token amount\\n     * @param _withdrawAccount account who withdraw original tokens on the remote chain\\n     * @param _nonce user input to guarantee unique depositId\\n     */\\n    function burn(\\n        address _token,\\n        uint256 _amount,\\n        address _withdrawAccount,\\n        uint64 _nonce\\n    ) external;\\n\\n    /**\\n     * @notice Mint tokens triggered by deposit at a remote chain's OriginalTokenVault.\\n     * @param _request The serialized Mint protobuf.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function mint(\\n        bytes calldata _request,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    function records(bytes32 recordId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5adc3e5f1c8767c9f4580b499b16aba25f41934a2f945e9f0227b28d4b0405ae\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IPeggedTokenBridgeV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IPeggedTokenBridgeV2 {\\n    /**\\n     * @notice Burn pegged tokens to trigger a cross-chain withdrawal of the original tokens at a remote chain's\\n     * OriginalTokenVault, or mint at another remote chain\\n     * @param _token The pegged token address.\\n     * @param _amount The amount to burn.\\n     * @param _toChainId If zero, withdraw from original vault; otherwise, the remote chain to mint tokens.\\n     * @param _toAccount The account to receive tokens on the remote chain\\n     * @param _nonce A number to guarantee unique depositId. Can be timestamp in practice.\\n     */\\n    function burn(\\n        address _token,\\n        uint256 _amount,\\n        uint64 _toChainId,\\n        address _toAccount,\\n        uint64 _nonce\\n    ) external returns (bytes32);\\n\\n    /**\\n     * @notice Mint tokens triggered by deposit at a remote chain's OriginalTokenVault.\\n     * @param _request The serialized Mint protobuf.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function mint(\\n        bytes calldata _request,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external returns (bytes32);\\n\\n    function records(bytes32 recordId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xb4fd49de981aa42effa29e86220a4f232264b43b90e26f3589f90b34480a7ec8\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IPool {\\n    function addLiquidity(address _token, uint256 _amount) external;\\n\\n    function withdraws(bytes32 withdrawId) external view returns (bool);\\n\\n    function withdraw(\\n        bytes calldata _wdmsg,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n}\\n\",\"keccak256\":\"0xa5a2d51ec83feaf68ec527ba3d125f34c841fb64dbacf73d396f8954dbbceac3\",\"license\":\"GPL-3.0-only\"},\"contracts/libraries/BridgeSenderLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./PbBridge.sol\\\";\\nimport \\\"./PbPegged.sol\\\";\\nimport \\\"./PbPool.sol\\\";\\nimport \\\"../interfaces/IBridge.sol\\\";\\nimport \\\"../interfaces/IOriginalTokenVault.sol\\\";\\nimport \\\"../interfaces/IOriginalTokenVaultV2.sol\\\";\\nimport \\\"../interfaces/IPeggedTokenBridge.sol\\\";\\nimport \\\"../interfaces/IPeggedTokenBridgeV2.sol\\\";\\nimport \\\"../interfaces/IPool.sol\\\";\\n\\nlibrary BridgeSenderLib {\\n    using SafeERC20 for IERC20;\\n\\n    struct RefundInfo {\\n        bytes32 transferId;\\n        address receiver;\\n        address token;\\n        uint256 amount;\\n        bytes32 refundId;\\n    }\\n\\n    enum BridgeType {\\n        Null,\\n        Liquidity,\\n        PegDeposit,\\n        PegBurn,\\n        PegDepositV2,\\n        PegBurnV2\\n    }\\n\\n    // ============== Internal library functions called by apps ==============\\n\\n    /**\\n     * @notice Send a cross-chain transfer either via liquidity pool-based bridge or in form of mint/burn.\\n     * @param _receiver The address of the receiver.\\n     * @param _token The address of the token.\\n     * @param _amount The amount of the transfer.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\\n     * @param _maxSlippage (optional, only used for transfer via liquidity pool-based bridge)\\n     * The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\\n     * Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the\\n     * transfer can be refunded.\\n     * @param _bridgeType The type of bridge used by this transfer. One of the {BridgeType} enum.\\n     * @param _bridgeAddr The address of used bridge.\\n     */\\n    function sendTransfer(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage, // slippage * 1M, eg. 0.5% -> 5000\\n        BridgeType _bridgeType,\\n        address _bridgeAddr\\n    ) internal returns (bytes32) {\\n        bytes32 transferId;\\n        if (_bridgeType == BridgeType.Liquidity) {\\n            IERC20(_token).safeIncreaseAllowance(_bridgeAddr, _amount);\\n            IBridge(_bridgeAddr).send(_receiver, _token, _amount, _dstChainId, _nonce, _maxSlippage);\\n            transferId = keccak256(\\n                abi.encodePacked(address(this), _receiver, _token, _amount, _dstChainId, _nonce, uint64(block.chainid))\\n            );\\n        } else if (_bridgeType == BridgeType.PegDeposit) {\\n            IERC20(_token).safeIncreaseAllowance(_bridgeAddr, _amount);\\n            IOriginalTokenVault(_bridgeAddr).deposit(_token, _amount, _dstChainId, _receiver, _nonce);\\n            transferId = keccak256(\\n                abi.encodePacked(address(this), _token, _amount, _dstChainId, _receiver, _nonce, uint64(block.chainid))\\n            );\\n        } else if (_bridgeType == BridgeType.PegBurn) {\\n            IPeggedTokenBridge(_bridgeAddr).burn(_token, _amount, _receiver, _nonce);\\n            transferId = keccak256(\\n                abi.encodePacked(address(this), _token, _amount, _receiver, _nonce, uint64(block.chainid))\\n            );\\n        } else if (_bridgeType == BridgeType.PegDepositV2) {\\n            IERC20(_token).safeIncreaseAllowance(_bridgeAddr, _amount);\\n            transferId = IOriginalTokenVaultV2(_bridgeAddr).deposit(_token, _amount, _dstChainId, _receiver, _nonce);\\n        } else if (_bridgeType == BridgeType.PegBurnV2) {\\n            transferId = IPeggedTokenBridgeV2(_bridgeAddr).burn(_token, _amount, _dstChainId, _receiver, _nonce);\\n        } else {\\n            revert(\\\"bridge type not supported\\\");\\n        }\\n        return transferId;\\n    }\\n\\n    /**\\n     * @notice Refund a failed cross-chain transfer.\\n     * @param _request The serialized request protobuf.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A request must be signed-off by\\n     * +2/3 of the bridge's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     * @param _bridgeType The type of bridge used by this failed transfer. One of the {BridgeType} enum.\\n     * @param _bridgeAddr The address of used bridge.\\n     */\\n    function sendRefund(\\n        bytes calldata _request,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers,\\n        BridgeType _bridgeType,\\n        address _bridgeAddr\\n    ) internal returns (RefundInfo memory) {\\n        if (_bridgeType == BridgeType.Liquidity) {\\n            return sendRefundForLiquidityBridgeTransfer(_request, _sigs, _signers, _powers, _bridgeAddr);\\n        } else if (_bridgeType == BridgeType.PegDeposit) {\\n            return sendRefundForPegVaultDeposit(_request, _sigs, _signers, _powers, _bridgeAddr);\\n        } else if (_bridgeType == BridgeType.PegBurn) {\\n            return sendRefundForPegBridgeBurn(_request, _sigs, _signers, _powers, _bridgeAddr);\\n        } else if (_bridgeType == BridgeType.PegDepositV2) {\\n            return sendRefundForPegVaultDepositV2(_request, _sigs, _signers, _powers, _bridgeAddr);\\n        } else if (_bridgeType == BridgeType.PegBurnV2) {\\n            return sendRefundForPegBridgeBurnV2(_request, _sigs, _signers, _powers, _bridgeAddr);\\n        } else {\\n            revert(\\\"bridge type not supported\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Refund a failed cross-chain transfer which used liquidity bridge.\\n     * @param _request The serialized request protobuf.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A request must be signed-off by\\n     * +2/3 of the bridge's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     * @param _bridgeAddr The address of liquidity bridge.\\n     */\\n    function sendRefundForLiquidityBridgeTransfer(\\n        bytes calldata _request,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers,\\n        address _bridgeAddr\\n    ) internal returns (RefundInfo memory) {\\n        RefundInfo memory refund;\\n        PbPool.WithdrawMsg memory request = PbPool.decWithdrawMsg(_request);\\n        // len = 8 + 8 + 20 + 20 + 32 = 88\\n        refund.refundId = keccak256(\\n            abi.encodePacked(request.chainid, request.seqnum, request.receiver, request.token, request.amount)\\n        );\\n        refund.transferId = request.refid;\\n        refund.receiver = request.receiver;\\n        refund.token = request.token;\\n        refund.amount = request.amount;\\n        if (!IPool(_bridgeAddr).withdraws(refund.refundId)) {\\n            IPool(_bridgeAddr).withdraw(_request, _sigs, _signers, _powers);\\n        }\\n        return refund;\\n    }\\n\\n    /**\\n     * @notice Refund a failed cross-chain transfer which is an OriginalTokenVault deposit.\\n     * @param _request The serialized request protobuf.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A request must be signed-off by\\n     * +2/3 of the bridge's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     * @param _bridgeAddr The address of OriginalTokenVault.\\n     */\\n    function sendRefundForPegVaultDeposit(\\n        bytes calldata _request,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers,\\n        address _bridgeAddr\\n    ) internal returns (RefundInfo memory) {\\n        RefundInfo memory refund;\\n        PbPegged.Withdraw memory request = PbPegged.decWithdraw(_request);\\n        refund.refundId = keccak256(\\n            // len = 20 + 20 + 32 + 20 + 8 + 32 = 132\\n            abi.encodePacked(\\n                request.receiver,\\n                request.token,\\n                request.amount,\\n                request.burnAccount,\\n                request.refChainId,\\n                request.refId\\n            )\\n        );\\n        refund.transferId = request.refId;\\n        refund.receiver = request.receiver;\\n        refund.token = request.token;\\n        refund.amount = request.amount;\\n        if (!IOriginalTokenVault(_bridgeAddr).records(refund.refundId)) {\\n            IOriginalTokenVault(_bridgeAddr).withdraw(_request, _sigs, _signers, _powers);\\n        }\\n        return refund;\\n    }\\n\\n    /**\\n     * @notice Refund a failed cross-chain transfer which is an PeggedTokenBridge burn.\\n     * @param _request The serialized request protobuf.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A request must be signed-off by\\n     * +2/3 of the bridge's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     * @param _bridgeAddr The address of PeggedTokenBridge.\\n     */\\n    function sendRefundForPegBridgeBurn(\\n        bytes calldata _request,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers,\\n        address _bridgeAddr\\n    ) internal returns (RefundInfo memory) {\\n        RefundInfo memory refund;\\n        PbPegged.Mint memory request = PbPegged.decMint(_request);\\n        refund.refundId = keccak256(\\n            // len = 20 + 20 + 32 + 20 + 8 + 32 = 132\\n            abi.encodePacked(\\n                request.account,\\n                request.token,\\n                request.amount,\\n                request.depositor,\\n                request.refChainId,\\n                request.refId\\n            )\\n        );\\n        refund.transferId = request.refId;\\n        refund.receiver = request.account;\\n        refund.token = request.token;\\n        refund.amount = request.amount;\\n        if (!IPeggedTokenBridge(_bridgeAddr).records(refund.refundId)) {\\n            IPeggedTokenBridge(_bridgeAddr).mint(_request, _sigs, _signers, _powers);\\n        }\\n        return refund;\\n    }\\n\\n    /**\\n     * @notice Refund a failed cross-chain transfer which is an OriginalTokenVaultV2 deposit.\\n     * @param _request The serialized request protobuf.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A request must be signed-off by\\n     * +2/3 of the bridge's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     * @param _bridgeAddr The address of OriginalTokenVaultV2.\\n     */\\n    function sendRefundForPegVaultDepositV2(\\n        bytes calldata _request,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers,\\n        address _bridgeAddr\\n    ) internal returns (RefundInfo memory) {\\n        RefundInfo memory refund;\\n        PbPegged.Withdraw memory request = PbPegged.decWithdraw(_request);\\n        if (IOriginalTokenVaultV2(_bridgeAddr).records(request.refId)) {\\n            refund.refundId = keccak256(\\n                // len = 20 + 20 + 32 + 20 + 8 + 32 + 20 = 152\\n                abi.encodePacked(\\n                    request.receiver,\\n                    request.token,\\n                    request.amount,\\n                    request.burnAccount,\\n                    request.refChainId,\\n                    request.refId,\\n                    _bridgeAddr\\n                )\\n            );\\n        } else {\\n            refund.refundId = IOriginalTokenVaultV2(_bridgeAddr).withdraw(_request, _sigs, _signers, _powers);\\n        }\\n        refund.transferId = request.refId;\\n        refund.receiver = request.receiver;\\n        refund.token = request.token;\\n        refund.amount = request.amount;\\n        return refund;\\n    }\\n\\n    /**\\n     * @notice Refund a failed cross-chain transfer which is an PeggedTokenBridgeV2 burn.\\n     * @param _request The serialized request protobuf.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A request must be signed-off by\\n     * +2/3 of the bridge's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     * @param _bridgeAddr The address of PeggedTokenBridgeV2.\\n     */\\n    function sendRefundForPegBridgeBurnV2(\\n        bytes calldata _request,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers,\\n        address _bridgeAddr\\n    ) internal returns (RefundInfo memory) {\\n        RefundInfo memory refund;\\n        PbPegged.Mint memory request = PbPegged.decMint(_request);\\n        if (IPeggedTokenBridgeV2(_bridgeAddr).records(request.refId)) {\\n            refund.refundId = keccak256(\\n                // len = 20 + 20 + 32 + 20 + 8 + 32 + 20 = 152\\n                abi.encodePacked(\\n                    request.account,\\n                    request.token,\\n                    request.amount,\\n                    request.depositor,\\n                    request.refChainId,\\n                    request.refId,\\n                    _bridgeAddr\\n                )\\n            );\\n        } else {\\n            refund.refundId = IPeggedTokenBridgeV2(_bridgeAddr).mint(_request, _sigs, _signers, _powers);\\n        }\\n        refund.transferId = request.refId;\\n        refund.receiver = request.account;\\n        refund.token = request.token;\\n        refund.amount = request.amount;\\n        return refund;\\n    }\\n}\\n\",\"keccak256\":\"0x6ba5a11cb1e2bc76fbe3de50f9afe90af934d76315ca14496c3a630839d138a0\",\"license\":\"GPL-3.0-only\"},\"contracts/libraries/Pb.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\n// runtime proto sol library\\nlibrary Pb {\\n    enum WireType {\\n        Varint,\\n        Fixed64,\\n        LengthDelim,\\n        StartGroup,\\n        EndGroup,\\n        Fixed32\\n    }\\n\\n    struct Buffer {\\n        uint256 idx; // the start index of next read. when idx=b.length, we're done\\n        bytes b; // hold serialized proto msg, readonly\\n    }\\n\\n    // create a new in-memory Buffer object from raw msg bytes\\n    function fromBytes(bytes memory raw) internal pure returns (Buffer memory buf) {\\n        buf.b = raw;\\n        buf.idx = 0;\\n    }\\n\\n    // whether there are unread bytes\\n    function hasMore(Buffer memory buf) internal pure returns (bool) {\\n        return buf.idx < buf.b.length;\\n    }\\n\\n    // decode current field number and wiretype\\n    function decKey(Buffer memory buf) internal pure returns (uint256 tag, WireType wiretype) {\\n        uint256 v = decVarint(buf);\\n        tag = v / 8;\\n        wiretype = WireType(v & 7);\\n    }\\n\\n    // count tag occurrences, return an array due to no memory map support\\n    // have to create array for (maxtag+1) size. cnts[tag] = occurrences\\n    // should keep buf.idx unchanged because this is only a count function\\n    function cntTags(Buffer memory buf, uint256 maxtag) internal pure returns (uint256[] memory cnts) {\\n        uint256 originalIdx = buf.idx;\\n        cnts = new uint256[](maxtag + 1); // protobuf's tags are from 1 rather than 0\\n        uint256 tag;\\n        WireType wire;\\n        while (hasMore(buf)) {\\n            (tag, wire) = decKey(buf);\\n            cnts[tag] += 1;\\n            skipValue(buf, wire);\\n        }\\n        buf.idx = originalIdx;\\n    }\\n\\n    // read varint from current buf idx, move buf.idx to next read, return the int value\\n    function decVarint(Buffer memory buf) internal pure returns (uint256 v) {\\n        bytes10 tmp; // proto int is at most 10 bytes (7 bits can be used per byte)\\n        bytes memory bb = buf.b; // get buf.b mem addr to use in assembly\\n        v = buf.idx; // use v to save one additional uint variable\\n        assembly {\\n            tmp := mload(add(add(bb, 32), v)) // load 10 bytes from buf.b[buf.idx] to tmp\\n        }\\n        uint256 b; // store current byte content\\n        v = 0; // reset to 0 for return value\\n        for (uint256 i = 0; i < 10; i++) {\\n            assembly {\\n                b := byte(i, tmp) // don't use tmp[i] because it does bound check and costs extra\\n            }\\n            v |= (b & 0x7F) << (i * 7);\\n            if (b & 0x80 == 0) {\\n                buf.idx += i + 1;\\n                return v;\\n            }\\n        }\\n        revert(); // i=10, invalid varint stream\\n    }\\n\\n    // read length delimited field and return bytes\\n    function decBytes(Buffer memory buf) internal pure returns (bytes memory b) {\\n        uint256 len = decVarint(buf);\\n        uint256 end = buf.idx + len;\\n        require(end <= buf.b.length); // avoid overflow\\n        b = new bytes(len);\\n        bytes memory bufB = buf.b; // get buf.b mem addr to use in assembly\\n        uint256 bStart;\\n        uint256 bufBStart = buf.idx;\\n        assembly {\\n            bStart := add(b, 32)\\n            bufBStart := add(add(bufB, 32), bufBStart)\\n        }\\n        for (uint256 i = 0; i < len; i += 32) {\\n            assembly {\\n                mstore(add(bStart, i), mload(add(bufBStart, i)))\\n            }\\n        }\\n        buf.idx = end;\\n    }\\n\\n    // return packed ints\\n    function decPacked(Buffer memory buf) internal pure returns (uint256[] memory t) {\\n        uint256 len = decVarint(buf);\\n        uint256 end = buf.idx + len;\\n        require(end <= buf.b.length); // avoid overflow\\n        // array in memory must be init w/ known length\\n        // so we have to create a tmp array w/ max possible len first\\n        uint256[] memory tmp = new uint256[](len);\\n        uint256 i = 0; // count how many ints are there\\n        while (buf.idx < end) {\\n            tmp[i] = decVarint(buf);\\n            i++;\\n        }\\n        t = new uint256[](i); // init t with correct length\\n        for (uint256 j = 0; j < i; j++) {\\n            t[j] = tmp[j];\\n        }\\n        return t;\\n    }\\n\\n    // move idx pass current value field, to beginning of next tag or msg end\\n    function skipValue(Buffer memory buf, WireType wire) internal pure {\\n        if (wire == WireType.Varint) {\\n            decVarint(buf);\\n        } else if (wire == WireType.LengthDelim) {\\n            uint256 len = decVarint(buf);\\n            buf.idx += len; // skip len bytes value data\\n            require(buf.idx <= buf.b.length); // avoid overflow\\n        } else {\\n            revert();\\n        } // unsupported wiretype\\n    }\\n\\n    // type conversion help utils\\n    function _bool(uint256 x) internal pure returns (bool v) {\\n        return x != 0;\\n    }\\n\\n    function _uint256(bytes memory b) internal pure returns (uint256 v) {\\n        require(b.length <= 32); // b's length must be smaller than or equal to 32\\n        assembly {\\n            v := mload(add(b, 32))\\n        } // load all 32bytes to v\\n        v = v >> (8 * (32 - b.length)); // only first b.length is valid\\n    }\\n\\n    function _address(bytes memory b) internal pure returns (address v) {\\n        v = _addressPayable(b);\\n    }\\n\\n    function _addressPayable(bytes memory b) internal pure returns (address payable v) {\\n        require(b.length == 20);\\n        //load 32bytes then shift right 12 bytes\\n        assembly {\\n            v := div(mload(add(b, 32)), 0x1000000000000000000000000)\\n        }\\n    }\\n\\n    function _bytes32(bytes memory b) internal pure returns (bytes32 v) {\\n        require(b.length == 32);\\n        assembly {\\n            v := mload(add(b, 32))\\n        }\\n    }\\n\\n    // uint[] to uint8[]\\n    function uint8s(uint256[] memory arr) internal pure returns (uint8[] memory t) {\\n        t = new uint8[](arr.length);\\n        for (uint256 i = 0; i < t.length; i++) {\\n            t[i] = uint8(arr[i]);\\n        }\\n    }\\n\\n    function uint32s(uint256[] memory arr) internal pure returns (uint32[] memory t) {\\n        t = new uint32[](arr.length);\\n        for (uint256 i = 0; i < t.length; i++) {\\n            t[i] = uint32(arr[i]);\\n        }\\n    }\\n\\n    function uint64s(uint256[] memory arr) internal pure returns (uint64[] memory t) {\\n        t = new uint64[](arr.length);\\n        for (uint256 i = 0; i < t.length; i++) {\\n            t[i] = uint64(arr[i]);\\n        }\\n    }\\n\\n    function bools(uint256[] memory arr) internal pure returns (bool[] memory t) {\\n        t = new bool[](arr.length);\\n        for (uint256 i = 0; i < t.length; i++) {\\n            t[i] = arr[i] != 0;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x66fd8c7045b0794eca747bd534928197604a8f9c9ecadb1cfded2b45d4de5fb3\",\"license\":\"GPL-3.0-only\"},\"contracts/libraries/PbBridge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// Code generated by protoc-gen-sol. DO NOT EDIT.\\n// source: bridge.proto\\npragma solidity 0.8.9;\\nimport \\\"./Pb.sol\\\";\\n\\nlibrary PbBridge {\\n    using Pb for Pb.Buffer; // so we can call Pb funcs on Buffer obj\\n\\n    struct Relay {\\n        address sender; // tag: 1\\n        address receiver; // tag: 2\\n        address token; // tag: 3\\n        uint256 amount; // tag: 4\\n        uint64 srcChainId; // tag: 5\\n        uint64 dstChainId; // tag: 6\\n        bytes32 srcTransferId; // tag: 7\\n    } // end struct Relay\\n\\n    function decRelay(bytes memory raw) internal pure returns (Relay memory m) {\\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\\n\\n        uint256 tag;\\n        Pb.WireType wire;\\n        while (buf.hasMore()) {\\n            (tag, wire) = buf.decKey();\\n            if (false) {}\\n            // solidity has no switch/case\\n            else if (tag == 1) {\\n                m.sender = Pb._address(buf.decBytes());\\n            } else if (tag == 2) {\\n                m.receiver = Pb._address(buf.decBytes());\\n            } else if (tag == 3) {\\n                m.token = Pb._address(buf.decBytes());\\n            } else if (tag == 4) {\\n                m.amount = Pb._uint256(buf.decBytes());\\n            } else if (tag == 5) {\\n                m.srcChainId = uint64(buf.decVarint());\\n            } else if (tag == 6) {\\n                m.dstChainId = uint64(buf.decVarint());\\n            } else if (tag == 7) {\\n                m.srcTransferId = Pb._bytes32(buf.decBytes());\\n            } else {\\n                buf.skipValue(wire);\\n            } // skip value of unknown tag\\n        }\\n    } // end decoder Relay\\n}\\n\",\"keccak256\":\"0xe7f444d4bddc65637fd050d5f8e42ee781f7a00f97cb403e786b891418d0a1e0\",\"license\":\"GPL-3.0-only\"},\"contracts/libraries/PbPegged.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// Code generated by protoc-gen-sol. DO NOT EDIT.\\n// source: contracts/libraries/proto/pegged.proto\\npragma solidity 0.8.9;\\nimport \\\"./Pb.sol\\\";\\n\\nlibrary PbPegged {\\n    using Pb for Pb.Buffer; // so we can call Pb funcs on Buffer obj\\n\\n    struct Mint {\\n        address token; // tag: 1\\n        address account; // tag: 2\\n        uint256 amount; // tag: 3\\n        address depositor; // tag: 4\\n        uint64 refChainId; // tag: 5\\n        bytes32 refId; // tag: 6\\n    } // end struct Mint\\n\\n    function decMint(bytes memory raw) internal pure returns (Mint memory m) {\\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\\n\\n        uint256 tag;\\n        Pb.WireType wire;\\n        while (buf.hasMore()) {\\n            (tag, wire) = buf.decKey();\\n            if (false) {}\\n            // solidity has no switch/case\\n            else if (tag == 1) {\\n                m.token = Pb._address(buf.decBytes());\\n            } else if (tag == 2) {\\n                m.account = Pb._address(buf.decBytes());\\n            } else if (tag == 3) {\\n                m.amount = Pb._uint256(buf.decBytes());\\n            } else if (tag == 4) {\\n                m.depositor = Pb._address(buf.decBytes());\\n            } else if (tag == 5) {\\n                m.refChainId = uint64(buf.decVarint());\\n            } else if (tag == 6) {\\n                m.refId = Pb._bytes32(buf.decBytes());\\n            } else {\\n                buf.skipValue(wire);\\n            } // skip value of unknown tag\\n        }\\n    } // end decoder Mint\\n\\n    struct Withdraw {\\n        address token; // tag: 1\\n        address receiver; // tag: 2\\n        uint256 amount; // tag: 3\\n        address burnAccount; // tag: 4\\n        uint64 refChainId; // tag: 5\\n        bytes32 refId; // tag: 6\\n    } // end struct Withdraw\\n\\n    function decWithdraw(bytes memory raw) internal pure returns (Withdraw memory m) {\\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\\n\\n        uint256 tag;\\n        Pb.WireType wire;\\n        while (buf.hasMore()) {\\n            (tag, wire) = buf.decKey();\\n            if (false) {}\\n            // solidity has no switch/case\\n            else if (tag == 1) {\\n                m.token = Pb._address(buf.decBytes());\\n            } else if (tag == 2) {\\n                m.receiver = Pb._address(buf.decBytes());\\n            } else if (tag == 3) {\\n                m.amount = Pb._uint256(buf.decBytes());\\n            } else if (tag == 4) {\\n                m.burnAccount = Pb._address(buf.decBytes());\\n            } else if (tag == 5) {\\n                m.refChainId = uint64(buf.decVarint());\\n            } else if (tag == 6) {\\n                m.refId = Pb._bytes32(buf.decBytes());\\n            } else {\\n                buf.skipValue(wire);\\n            } // skip value of unknown tag\\n        }\\n    } // end decoder Withdraw\\n}\\n\",\"keccak256\":\"0xe58dcfc1f75da74e214f99765086946f8ef007d5d0baafe736ac1f72b0604cd5\",\"license\":\"GPL-3.0-only\"},\"contracts/libraries/PbPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// Code generated by protoc-gen-sol. DO NOT EDIT.\\n// source: contracts/libraries/proto/pool.proto\\npragma solidity 0.8.9;\\nimport \\\"./Pb.sol\\\";\\n\\nlibrary PbPool {\\n    using Pb for Pb.Buffer; // so we can call Pb funcs on Buffer obj\\n\\n    struct WithdrawMsg {\\n        uint64 chainid; // tag: 1\\n        uint64 seqnum; // tag: 2\\n        address receiver; // tag: 3\\n        address token; // tag: 4\\n        uint256 amount; // tag: 5\\n        bytes32 refid; // tag: 6\\n    } // end struct WithdrawMsg\\n\\n    function decWithdrawMsg(bytes memory raw) internal pure returns (WithdrawMsg memory m) {\\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\\n\\n        uint256 tag;\\n        Pb.WireType wire;\\n        while (buf.hasMore()) {\\n            (tag, wire) = buf.decKey();\\n            if (false) {}\\n            // solidity has no switch/case\\n            else if (tag == 1) {\\n                m.chainid = uint64(buf.decVarint());\\n            } else if (tag == 2) {\\n                m.seqnum = uint64(buf.decVarint());\\n            } else if (tag == 3) {\\n                m.receiver = Pb._address(buf.decBytes());\\n            } else if (tag == 4) {\\n                m.token = Pb._address(buf.decBytes());\\n            } else if (tag == 5) {\\n                m.amount = Pb._uint256(buf.decBytes());\\n            } else if (tag == 6) {\\n                m.refid = Pb._bytes32(buf.decBytes());\\n            } else {\\n                buf.skipValue(wire);\\n            } // skip value of unknown tag\\n        }\\n    } // end decoder WithdrawMsg\\n}\\n\",\"keccak256\":\"0x7efd38eaa0f2d7a1ed9070e7bc940ecd041c59f5c48aba26174c46f99991f63d\",\"license\":\"GPL-3.0-only\"},\"contracts/safeguard/Pauser.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\nabstract contract Pauser is Ownable, Pausable {\\n    mapping(address => bool) public pausers;\\n\\n    event PauserAdded(address account);\\n    event PauserRemoved(address account);\\n\\n    constructor() {\\n        _addPauser(msg.sender);\\n    }\\n\\n    modifier onlyPauser() {\\n        require(isPauser(msg.sender), \\\"Caller is not pauser\\\");\\n        _;\\n    }\\n\\n    function pause() public onlyPauser {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyPauser {\\n        _unpause();\\n    }\\n\\n    function isPauser(address account) public view returns (bool) {\\n        return pausers[account];\\n    }\\n\\n    function addPauser(address account) public onlyOwner {\\n        _addPauser(account);\\n    }\\n\\n    function removePauser(address account) public onlyOwner {\\n        _removePauser(account);\\n    }\\n\\n    function renouncePauser() public {\\n        _removePauser(msg.sender);\\n    }\\n\\n    function _addPauser(address account) private {\\n        require(!isPauser(account), \\\"Account is already pauser\\\");\\n        pausers[account] = true;\\n        emit PauserAdded(account);\\n    }\\n\\n    function _removePauser(address account) private {\\n        require(isPauser(account), \\\"Account is not pauser\\\");\\n        pausers[account] = false;\\n        emit PauserRemoved(account);\\n    }\\n}\\n\",\"keccak256\":\"0xa287f1f4e16a67737cc06dbeacb5e856d411125f51fca528a06d161cc26e2579\",\"license\":\"GPL-3.0-only\"},\"contracts/test-helpers/ContractAsSender.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"../libraries/BridgeSenderLib.sol\\\";\\nimport \\\"../safeguard/Pauser.sol\\\";\\n\\ncontract ContractAsSender is ReentrancyGuard, Pauser {\\n    using SafeERC20 for IERC20;\\n\\n    mapping(BridgeSenderLib.BridgeType => address) public bridges;\\n    mapping(bytes32 => address) public records;\\n\\n    event Deposited(address depositor, address token, uint256 amount);\\n    event LiquidityBridgeUpdated(address liquidityBridge);\\n    event PegBridgeUpdated(address pegBridge);\\n    event PegVaultUpdated(address pegVault);\\n    event PegBridgeV2Updated(address pegBridgeV2);\\n    event PegVaultV2Updated(address pegVaultV2);\\n\\n    /**\\n     * @notice Send a cross-chain transfer either via liquidity pool-based bridge or in form of mint/burn.\\n     * @param _receiver The address of the receiver.\\n     * @param _token The address of the token.\\n     * @param _amount The amount of the transfer.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\\n     * @param _maxSlippage (optional, only used for transfer via liquidity pool-based bridge)\\n     * The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\\n     * Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the\\n     * transfer can be refunded.\\n     * @param _bridgeType The type of bridge used by this transfer. One of the {BridgeType} enum.\\n     */\\n    function transfer(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage, // slippage * 1M, eg. 0.5% -> 5000\\n        BridgeSenderLib.BridgeType _bridgeType\\n    ) external nonReentrant whenNotPaused onlyOwner returns (bytes32) {\\n        address _bridgeAddr = bridges[_bridgeType];\\n        require(_bridgeAddr != address(0), \\\"unknown bridge type\\\");\\n        bytes32 transferId = BridgeSenderLib.sendTransfer(\\n            _receiver,\\n            _token,\\n            _amount,\\n            _dstChainId,\\n            _nonce,\\n            _maxSlippage,\\n            _bridgeType,\\n            _bridgeAddr\\n        );\\n        require(records[transferId] == address(0), \\\"record exists\\\");\\n        records[transferId] = msg.sender;\\n        return transferId;\\n    }\\n\\n    /**\\n     * @notice Refund a failed cross-chain transfer.\\n     * @param _request The serialized request protobuf.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A request must be signed-off by\\n     * +2/3 of the bridge's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     * @param _bridgeType The type of bridge used by this failed transfer. One of the {BridgeType} enum.\\n     */\\n    function refund(\\n        bytes calldata _request,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers,\\n        BridgeSenderLib.BridgeType _bridgeType\\n    ) external nonReentrant whenNotPaused onlyOwner returns (bytes32) {\\n        address _bridgeAddr = bridges[_bridgeType];\\n        require(_bridgeAddr != address(0), \\\"unknown bridge type\\\");\\n        BridgeSenderLib.RefundInfo memory refundInfo = BridgeSenderLib.sendRefund(\\n            _request,\\n            _sigs,\\n            _signers,\\n            _powers,\\n            _bridgeType,\\n            _bridgeAddr\\n        );\\n        require(refundInfo.receiver == address(this), \\\"invalid refund\\\");\\n        require(records[refundInfo.refundId] == address(0), \\\"already refunded\\\");\\n        address _receiver = records[refundInfo.transferId];\\n        require(_receiver != address(0), \\\"unknown transfer id\\\");\\n        records[refundInfo.refundId] = _receiver;\\n        IERC20(refundInfo.token).safeTransfer(_receiver, refundInfo.amount);\\n        return refundInfo.refundId;\\n    }\\n\\n    /**\\n     * @notice Lock tokens.\\n     * @param _token The deposited token address.\\n     * @param _amount The amount to deposit.\\n     */\\n    function deposit(address _token, uint256 _amount) external nonReentrant whenNotPaused onlyOwner {\\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n        emit Deposited(msg.sender, _token, _amount);\\n    }\\n\\n    // ----------------------Admin operation-----------------------\\n\\n    function setLiquidityBridge(address _addr) public onlyOwner {\\n        require(_addr != address(0), \\\"invalid address\\\");\\n        bridges[BridgeSenderLib.BridgeType.Liquidity] = _addr;\\n        emit LiquidityBridgeUpdated(_addr);\\n    }\\n\\n    function setPegBridge(address _addr) public onlyOwner {\\n        require(_addr != address(0), \\\"invalid address\\\");\\n        bridges[BridgeSenderLib.BridgeType.PegBurn] = _addr;\\n        emit PegBridgeUpdated(_addr);\\n    }\\n\\n    function setPegVault(address _addr) public onlyOwner {\\n        require(_addr != address(0), \\\"invalid address\\\");\\n        bridges[BridgeSenderLib.BridgeType.PegDeposit] = _addr;\\n        emit PegVaultUpdated(_addr);\\n    }\\n\\n    function setPegBridgeV2(address _addr) public onlyOwner {\\n        require(_addr != address(0), \\\"invalid address\\\");\\n        bridges[BridgeSenderLib.BridgeType.PegBurnV2] = _addr;\\n        emit PegBridgeV2Updated(_addr);\\n    }\\n\\n    function setPegVaultV2(address _addr) public onlyOwner {\\n        require(_addr != address(0), \\\"invalid address\\\");\\n        bridges[BridgeSenderLib.BridgeType.PegDepositV2] = _addr;\\n        emit PegVaultV2Updated(_addr);\\n    }\\n}\\n\",\"keccak256\":\"0x05a816d10359ae1a142ed037e08e54a6d8702849b26fb8d7925050ee35756273\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506001600055620000223362000040565b6001805460ff60a01b191690556200003a3362000092565b6200015a565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b03811660009081526002602052604090205460ff1615620001005760405162461bcd60e51b815260206004820152601960248201527f4163636f756e7420697320616c72656164792070617573657200000000000000604482015260640160405180910390fd5b6001600160a01b038116600081815260026020908152604091829020805460ff1916600117905590519182527f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f8910160405180910390a150565b6135be806200016a6000396000f3fe608060405234801561001057600080fd5b50600436106101775760003560e01c80636ef8d66d116100d857806382efd5021161008c5780639b05a775116100665780639b05a77514610335578063f2fde38b14610348578063f83b0fb91461035b57600080fd5b806382efd502146103095780638456cb591461031c5780638da5cb5b1461032457600080fd5b806380f51c12116100bd57806380f51c12146102c057806381cc8677146102e357806382dc1ec4146102f657600080fd5b80636ef8d66d146102b0578063715018a6146102b857600080fd5b806347e7ef241161012f5780635c975abb116101145780635c975abb1461026257806365d67c33146102745780636b2c0f551461029d57600080fd5b806347e7ef241461023c578063588be02b1461024f57600080fd5b80631edeeb23116101605780631edeeb23146101d75780633f4ba83a146101f857806346fbf68e1461020057600080fd5b806301e647251461017c57806303cbfe66146101c2575b600080fd5b6101a561018a366004612fb3565b6004602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101d56101d0366004612fe8565b61036e565b005b6101ea6101e536600461305e565b610481565b6040519081526020016101b9565b6101d56107a9565b61022c61020e366004612fe8565b6001600160a01b031660009081526002602052604090205460ff1690565b60405190151581526020016101b9565b6101d561024a36600461315d565b610812565b6101d561025d366004612fe8565b610966565b600154600160a01b900460ff1661022c565b6101a5610282366004613187565b6003602052600090815260409020546001600160a01b031681565b6101d56102ab366004612fe8565b610a6d565b6101d5610ac1565b6101d5610aca565b61022c6102ce366004612fe8565b60026020526000908152604090205460ff1681565b6101ea6102f13660046131ba565b610b1c565b6101d5610304366004612fe8565b610d48565b6101d5610317366004612fe8565b610d99565b6101d5610ea0565b6001546001600160a01b03166101a5565b6101d5610343366004612fe8565b610f07565b6101d5610356366004612fe8565b61100e565b6101d5610369366004612fe8565b6110db565b6001546001600160a01b031633146103bb5760405162461bcd60e51b8152602060048201819052602482015260008051602061356983398151915260448201526064015b60405180910390fd5b6001600160a01b0381166104035760405162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206164647265737360881b60448201526064016103b2565b6003600081905260209081527fcbc4e5fb02c3d1de23a9f1e014b4d2ee5aeaea9505df5e855c9210bf472495af80546001600160a01b0319166001600160a01b0384169081179091556040519081527fd60e9ceb4f54f1bfb1741a4b35fc9d806d7ed48200b523203b92248ea38fa17d91015b60405180910390a150565b6000600260005414156104d65760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016103b2565b6002600055600154600160a01b900460ff16156105285760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016103b2565b6001546001600160a01b031633146105705760405162461bcd60e51b8152602060048201819052602482015260008051602061356983398151915260448201526064016103b2565b60006003600084600581111561058857610588613244565b600581111561059957610599613244565b81526020810191909152604001600020546001600160a01b03169050806106025760405162461bcd60e51b815260206004820152601360248201527f756e6b6e6f776e2062726964676520747970650000000000000000000000000060448201526064016103b2565b60006106168c8c8c8c8c8c8c8c8c8b6111e2565b60208101519091506001600160a01b031630146106755760405162461bcd60e51b815260206004820152600e60248201527f696e76616c696420726566756e6400000000000000000000000000000000000060448201526064016103b2565b60808101516000908152600460205260409020546001600160a01b0316156106df5760405162461bcd60e51b815260206004820152601060248201527f616c726561647920726566756e6465640000000000000000000000000000000060448201526064016103b2565b80516000908152600460205260409020546001600160a01b0316806107465760405162461bcd60e51b815260206004820152601360248201527f756e6b6e6f776e207472616e736665722069640000000000000000000000000060448201526064016103b2565b60808201516000908152600460205260409081902080546001600160a01b0319166001600160a01b0384811691909117909155606084015191840151610790929116908390611341565b506080015160016000559b9a5050505050505050505050565b3360009081526002602052604090205460ff166108085760405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206973206e6f742070617573657200000000000000000000000060448201526064016103b2565b6108106113d6565b565b600260005414156108655760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016103b2565b6002600055600154600160a01b900460ff16156108b75760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016103b2565b6001546001600160a01b031633146108ff5760405162461bcd60e51b8152602060048201819052602482015260008051602061356983398151915260448201526064016103b2565b6109146001600160a01b03831633308461147c565b604080513381526001600160a01b03841660208201529081018290527f8752a472e571a816aea92eec8dae9baf628e840f4929fbcc2d155e6233ff68a79060600160405180910390a150506001600055565b6001546001600160a01b031633146109ae5760405162461bcd60e51b8152602060048201819052602482015260008051602061356983398151915260448201526064016103b2565b6001600160a01b0381166109f65760405162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206164647265737360881b60448201526064016103b2565b6001600052600360209081527fa15bc60c955c405d20d9149c709e2460f1c2d9a497496a7f46004d1772c3054c80546001600160a01b0319166001600160a01b0384169081179091556040519081527fbf9977180dc6e6cff25598c8e59150cecd7f8e448e092633d38ab7ee223ae0589101610476565b6001546001600160a01b03163314610ab55760405162461bcd60e51b8152602060048201819052602482015260008051602061356983398151915260448201526064016103b2565b610abe816114ba565b50565b610810336114ba565b6001546001600160a01b03163314610b125760405162461bcd60e51b8152602060048201819052602482015260008051602061356983398151915260448201526064016103b2565b6108106000611573565b600060026000541415610b715760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016103b2565b6002600055600154600160a01b900460ff1615610bc35760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016103b2565b6001546001600160a01b03163314610c0b5760405162461bcd60e51b8152602060048201819052602482015260008051602061356983398151915260448201526064016103b2565b600060036000846005811115610c2357610c23613244565b6005811115610c3457610c34613244565b81526020810191909152604001600020546001600160a01b0316905080610c9d5760405162461bcd60e51b815260206004820152601360248201527f756e6b6e6f776e2062726964676520747970650000000000000000000000000060448201526064016103b2565b6000610caf8a8a8a8a8a8a8a896115c5565b6000818152600460205260409020549091506001600160a01b031615610d175760405162461bcd60e51b815260206004820152600d60248201527f7265636f7264206578697374730000000000000000000000000000000000000060448201526064016103b2565b600081815260046020526040902080546001600160a01b031916331790559150506001600055979650505050505050565b6001546001600160a01b03163314610d905760405162461bcd60e51b8152602060048201819052602482015260008051602061356983398151915260448201526064016103b2565b610abe81611a81565b6001546001600160a01b03163314610de15760405162461bcd60e51b8152602060048201819052602482015260008051602061356983398151915260448201526064016103b2565b6001600160a01b038116610e295760405162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206164647265737360881b60448201526064016103b2565b6005600052600360209081527f405aad32e1adbac89bb7f176e338b8fc6e994ca210c9bb7bdca249b46594225080546001600160a01b0319166001600160a01b0384169081179091556040519081527ffb337a6c76476534518d5816caeb86263972470fedccfd047a35eb1825eaa9e89101610476565b3360009081526002602052604090205460ff16610eff5760405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206973206e6f742070617573657200000000000000000000000060448201526064016103b2565b610810611b3e565b6001546001600160a01b03163314610f4f5760405162461bcd60e51b8152602060048201819052602482015260008051602061356983398151915260448201526064016103b2565b6001600160a01b038116610f975760405162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206164647265737360881b60448201526064016103b2565b6002600052600360209081527fc3a24b0501bd2c13a7e57f2db4369ec4c223447539fc0724a9d55ac4a06ebd4d80546001600160a01b0319166001600160a01b0384169081179091556040519081527fa9db0c32d9c6c2f75f3b95047a9e67cc1c010eab792a4e6ca777ce918ad94aad9101610476565b6001546001600160a01b031633146110565760405162461bcd60e51b8152602060048201819052602482015260008051602061356983398151915260448201526064016103b2565b6001600160a01b0381166110d25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016103b2565b610abe81611573565b6001546001600160a01b031633146111235760405162461bcd60e51b8152602060048201819052602482015260008051602061356983398151915260448201526064016103b2565b6001600160a01b03811661116b5760405162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206164647265737360881b60448201526064016103b2565b6004600052600360209081527f83ec6a1f0257b830b5e016457c9cf1435391bf56cc98f369a58a54fe9377246580546001600160a01b0319166001600160a01b0384169081179091556040519081527f918a691a2a82482a10e11f43d7b627b2ba220dd08f251cb61933c42560f6fcb59101610476565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152600183600581111561122157611221613244565b141561123f576112388b8b8b8b8b8b8b8b8a611bc6565b9050611333565b600283600581111561125357611253613244565b141561126a576112388b8b8b8b8b8b8b8b8a611e11565b600383600581111561127e5761127e613244565b1415611295576112388b8b8b8b8b8b8b8b8a611f90565b60048360058111156112a9576112a9613244565b14156112c0576112388b8b8b8b8b8b8b8b8a61219d565b60058360058111156112d4576112d4613244565b14156112eb576112388b8b8b8b8b8b8b8b8a612433565b60405162461bcd60e51b815260206004820152601960248201527f6272696467652074797065206e6f7420737570706f727465640000000000000060448201526064016103b2565b9a9950505050505050505050565b6040516001600160a01b0383166024820152604481018290526113d190849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612613565b505050565b600154600160a01b900460ff1661142f5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016103b2565b6001805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6040516001600160a01b03808516602483015283166044820152606481018290526114b49085906323b872dd60e01b9060840161136d565b50505050565b6001600160a01b03811660009081526002602052604090205460ff166115225760405162461bcd60e51b815260206004820152601560248201527f4163636f756e74206973206e6f7420706175736572000000000000000000000060448201526064016103b2565b6001600160a01b038116600081815260026020908152604091829020805460ff1916905590519182527fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e9101610476565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008060018460058111156115dc576115dc613244565b141561170b576115f66001600160a01b038a16848a6126f8565b60405163a5977fbb60e01b81526001600160a01b038b811660048301528a81166024830152604482018a905267ffffffffffffffff808a1660648401528816608483015263ffffffff871660a483015284169063a5977fbb9060c401600060405180830381600087803b15801561166c57600080fd5b505af1158015611680573d6000803e3d6000fd5b50506040516bffffffffffffffffffffffff1930606090811b821660208401528e811b821660348401528d901b166048820152605c81018b90526001600160c01b031960c08b811b8216607c8401528a811b8216608484015246901b16608c82015260940191506116ee9050565b604051602081830303815290604052805190602001209050611a74565b600284600581111561171f5761171f613244565b1415611839576117396001600160a01b038a16848a6126f8565b6040516308d18d8960e21b81526001600160a01b038a81166004830152602482018a905267ffffffffffffffff808a1660448401528c821660648401528816608483015284169063234636249060a401600060405180830381600087803b1580156117a357600080fd5b505af11580156117b7573d6000803e3d6000fd5b50505050308989898d8a466040516020016116ee9796959493929190606097881b6bffffffffffffffffffffffff19908116825296881b87166014820152602881019590955260c093841b6001600160c01b031990811660488701529290961b909416605084015292811b831660648301529290921b16606c82015260740190565b600384600581111561184d5761184d613244565b141561192d57604051636f3c863f60e11b81526001600160a01b038a81166004830152602482018a90528b8116604483015267ffffffffffffffff8816606483015284169063de790c7e90608401600060405180830381600087803b1580156118b557600080fd5b505af11580156118c9573d6000803e3d6000fd5b50506040516bffffffffffffffffffffffff1930606090811b821660208401528d811b82166034840152604883018d90528e901b1660688201526001600160c01b031960c08a811b8216607c84015246901b166084820152608c0191506116ee9050565b600484600581111561194157611941613244565b1415611a055761195b6001600160a01b038a16848a6126f8565b6040516308d18d8960e21b81526001600160a01b038a81166004830152602482018a905267ffffffffffffffff808a1660448401528c821660648401528816608483015284169063234636249060a4015b602060405180830381600087803b1580156119c657600080fd5b505af11580156119da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119fe919061325a565b9050611a74565b6005846005811115611a1957611a19613244565b14156112eb5760405163a002930160e01b81526001600160a01b038a81166004830152602482018a905267ffffffffffffffff808a1660448401528c821660648401528816608483015284169063a00293019060a4016119ac565b9998505050505050505050565b6001600160a01b03811660009081526002602052604090205460ff1615611aea5760405162461bcd60e51b815260206004820152601960248201527f4163636f756e7420697320616c7265616479207061757365720000000000000060448201526064016103b2565b6001600160a01b038116600081815260026020908152604091829020805460ff1916600117905590519182527f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f89101610476565b600154600160a01b900460ff1615611b8b5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016103b2565b6001805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861145f3390565b6040805160a0810182526000808252602082018190529181018290526060810182905260808101919091526040805160a0810182526000808252602082018190529181018290526060810182905260808101919091526000611c5d8c8c8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506127b992505050565b8051602080830151604080850151606080870151608088015193516001600160c01b031960c098891b8116978201979097529490961b90941660288401526bffffffffffffffffffffffff1990841b811660308401529390921b9092166044830152605882015290915060780160408051601f198184030181529181528151602092830120608080860182905260a08501518652848301516001600160a01b039081169487019490945260608086015185168785015290850151908601529051631c13568560e31b81529186169163e09ab42891611d419160040190815260200190565b60206040518083038186803b158015611d5957600080fd5b505afa158015611d6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d919190613273565b611e0257604051630144352560e71b81526001600160a01b0385169063a21a928090611dcf908f908f908f908f908f908f908f908f90600401613354565b600060405180830381600087803b158015611de957600080fd5b505af1158015611dfd573d6000803e3d6000fd5b505050505b509a9950505050505050505050565b6040805160a0810182526000808252602082018190529181018290526060810182905260808101919091526040805160a0810182526000808252602082018190529181018290526060810182905260808101919091526000611ea88c8c8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061291992505050565b6020808201518251604080850151606080870151608088015160a089015194516bffffffffffffffffffffffff1997841b88169881019890985294821b8616603488015260488701929092521b90921660688401526001600160c01b031960c09190911b16607c830152608482015290915060a40160408051601f1981840301815291815281516020928301206080850181905260a08401518552838301516001600160a01b0390811693860193909352835183168583015283820151606086015290516301e6472560e01b8152918616916301e6472591611d419160040190815260200190565b6040805160a0810182526000808252602082018190529181018290526060810182905260808101919091526040805160a08101825260008082526020820181905291810182905260608101829052608081019190915260006120278c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612a6492505050565b6020808201518251604080850151606080870151608088015160a089015194516bffffffffffffffffffffffff1997841b88169881019890985294821b8616603488015260488701929092521b90921660688401526001600160c01b031960c09190911b16607c830152608482015290915060a40160408051601f1981840301815291815281516020928301206080850181905260a08401518552838301516001600160a01b0390811693860193909352835183168583015283820151606086015290516301e6472560e01b8152918616916301e647259161210f9160040190815260200190565b60206040518083038186803b15801561212757600080fd5b505afa15801561213b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061215f9190613273565b611e0257604051637c39a18160e11b81526001600160a01b0385169063f873430290611dcf908f908f908f908f908f908f908f908f90600401613354565b6040805160a0810182526000808252602082018190529181018290526060810182905260808101919091526040805160a08101825260008082526020820181905291810182905260608101829052608081019190915260006122348c8c8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061291992505050565b60a08101516040516301e6472560e01b81529192506001600160a01b038616916301e647259161226a9160040190815260200190565b60206040518083038186803b15801561228257600080fd5b505afa158015612296573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ba9190613273565b15612361576020808201518251604080850151606080870151608088015160a089015194516bffffffffffffffffffffffff1997841b88169881019890985294821b86166034880152604887019290925290811b841660688601526001600160c01b031960c09390931b92909216607c850152608484015286901b1660a482015260b8015b60408051601f19818403018152919052805160209091012060808301526123f3565b604051630144352560e71b81526001600160a01b0385169063a21a92809061239b908f908f908f908f908f908f908f908f90600401613354565b602060405180830381600087803b1580156123b557600080fd5b505af11580156123c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ed919061325a565b60808301525b60a081015182526020808201516001600160a01b0390811691840191909152815116604080840191909152015160608201529a9950505050505050505050565b6040805160a0810182526000808252602082018190529181018290526060810182905260808101919091526040805160a08101825260008082526020820181905291810182905260608101829052608081019190915260006124ca8c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612a6492505050565b60a08101516040516301e6472560e01b81529192506001600160a01b038616916301e64725916125009160040190815260200190565b60206040518083038186803b15801561251857600080fd5b505afa15801561252c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125509190613273565b156125d9576020808201518251604080850151606080870151608088015160a089015194516bffffffffffffffffffffffff1997841b88169881019890985294821b86166034880152604887019290925290811b841660688601526001600160c01b031960c09390931b92909216607c850152608484015286901b1660a482015260b80161233f565b604051637c39a18160e11b81526001600160a01b0385169063f87343029061239b908f908f908f908f908f908f908f908f90600401613354565b6000612668826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612baf9092919063ffffffff16565b8051909150156113d157808060200190518101906126869190613273565b6113d15760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016103b2565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b15801561274457600080fd5b505afa158015612758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061277c919061325a565b612786919061344c565b6040516001600160a01b0385166024820152604481018290529091506114b490859063095ea7b360e01b9060640161136d565b6040805160c08101825260008082526020808301829052828401829052606083018290526080830182905260a0830182905283518085019094528184528301849052909190805b602083015151835110156129115761281783612bc8565b9092509050816001141561283f5761282e83612c02565b67ffffffffffffffff168452612800565b81600214156128655761285183612c02565b67ffffffffffffffff166020850152612800565b81600314156128925761287f61287a84612c84565b612d41565b6001600160a01b03166040850152612800565b81600414156128ba576128a761287a84612c84565b6001600160a01b03166060850152612800565b81600514156128de576128d46128cf84612c84565b612d52565b6080850152612800565b8160061415612902576128f86128f384612c84565b612d89565b60a0850152612800565b61290c8382612da1565b612800565b505050919050565b6040805160c08101825260008082526020808301829052828401829052606083018290526080830182905260a0830182905283518085019094528184528301849052909190805b602083015151835110156129115761297783612bc8565b909250905081600114156129a15761299161287a84612c84565b6001600160a01b03168452612960565b81600214156129c9576129b661287a84612c84565b6001600160a01b03166020850152612960565b81600314156129e8576129de6128cf84612c84565b6040850152612960565b8160041415612a10576129fd61287a84612c84565b6001600160a01b03166060850152612960565b8160051415612a3657612a2283612c02565b67ffffffffffffffff166080850152612960565b8160061415612a5557612a4b6128f384612c84565b60a0850152612960565b612a5f8382612da1565b612960565b6040805160c08101825260008082526020808301829052828401829052606083018290526080830182905260a0830182905283518085019094528184528301849052909190805b6020830151518351101561291157612ac283612bc8565b90925090508160011415612aec57612adc61287a84612c84565b6001600160a01b03168452612aab565b8160021415612b1457612b0161287a84612c84565b6001600160a01b03166020850152612aab565b8160031415612b3357612b296128cf84612c84565b6040850152612aab565b8160041415612b5b57612b4861287a84612c84565b6001600160a01b03166060850152612aab565b8160051415612b8157612b6d83612c02565b67ffffffffffffffff166080850152612aab565b8160061415612ba057612b966128f384612c84565b60a0850152612aab565b612baa8382612da1565b612aab565b6060612bbe8484600085612e13565b90505b9392505050565b6000806000612bd684612c02565b9050612be3600882613464565b9250806007166005811115612bfa57612bfa613244565b915050915091565b602080820151825181019091015160009182805b600a811015612c7e5783811a9150612c2f816007613486565b82607f16901b851794508160801660001415612c6c57612c5081600161344c565b86518790612c5f90839061344c565b9052509395945050505050565b80612c76816134a5565b915050612c16565b50600080fd5b60606000612c9183612c02565b90506000818460000151612ca5919061344c565b9050836020015151811115612cb957600080fd5b8167ffffffffffffffff811115612cd257612cd26134c0565b6040519080825280601f01601f191660200182016040528015612cfc576020820181803683370190505b50602080860151865192955091818601919083010160005b85811015612d36578181015183820152612d2f60208261344c565b9050612d14565b505050935250919050565b6000612d4c82612f52565b92915050565b6000602082511115612d6357600080fd5b6020820151905081516020612d7891906134d6565b612d83906008613486565b1c919050565b60008151602014612d9957600080fd5b506020015190565b6000816005811115612db557612db5613244565b1415612dc4576113d182612c02565b6002816005811115612dd857612dd8613244565b1415610177576000612de983612c02565b90508083600001818151612dfd919061344c565b905250602083015151835111156113d157600080fd5b606082471015612e8b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016103b2565b843b612ed95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103b2565b600080866001600160a01b03168587604051612ef59190613519565b60006040518083038185875af1925050503d8060008114612f32576040519150601f19603f3d011682016040523d82523d6000602084013e612f37565b606091505b5091509150612f47828286612f7a565b979650505050505050565b60008151601414612f6257600080fd5b50602001516c01000000000000000000000000900490565b60608315612f89575081612bc1565b825115612f995782518084602001fd5b8160405162461bcd60e51b81526004016103b29190613535565b600060208284031215612fc557600080fd5b5035919050565b80356001600160a01b0381168114612fe357600080fd5b919050565b600060208284031215612ffa57600080fd5b612bc182612fcc565b60008083601f84011261301557600080fd5b50813567ffffffffffffffff81111561302d57600080fd5b6020830191508360208260051b850101111561304857600080fd5b9250929050565b803560068110612fe357600080fd5b600080600080600080600080600060a08a8c03121561307c57600080fd5b893567ffffffffffffffff8082111561309457600080fd5b818c0191508c601f8301126130a857600080fd5b8135818111156130b757600080fd5b8d60208285010111156130c957600080fd5b60209283019b509950908b013590808211156130e457600080fd5b6130f08d838e01613003565b909950975060408c013591508082111561310957600080fd5b6131158d838e01613003565b909750955060608c013591508082111561312e57600080fd5b5061313b8c828d01613003565b909450925061314e905060808b0161304f565b90509295985092959850929598565b6000806040838503121561317057600080fd5b61317983612fcc565b946020939093013593505050565b60006020828403121561319957600080fd5b612bc18261304f565b803567ffffffffffffffff81168114612fe357600080fd5b600080600080600080600060e0888a0312156131d557600080fd5b6131de88612fcc565b96506131ec60208901612fcc565b955060408801359450613201606089016131a2565b935061320f608089016131a2565b925060a088013563ffffffff8116811461322857600080fd5b915061323660c0890161304f565b905092959891949750929550565b634e487b7160e01b600052602160045260246000fd5b60006020828403121561326c57600080fd5b5051919050565b60006020828403121561328557600080fd5b81518015158114612bc157600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b8183526000602080850194508260005b858110156132fa576001600160a01b036132e783612fcc565b16875295820195908201906001016132ce565b509495945050505050565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561333757600080fd5b8260051b8083602087013760009401602001938452509192915050565b608081526000613368608083018a8c613295565b82810360208401528088825260208201905060208960051b8301018a60005b8b8110156133fb57848303601f190184528135368e9003601e190181126133ad57600080fd5b8d01803567ffffffffffffffff8111156133c657600080fd5b8036038f13156133d557600080fd5b6133e3858260208501613295565b60209687019690955093909301925050600101613387565b5050848103604086015261341081898b6132be565b925050508281036060840152613427818587613305565b9b9a5050505050505050505050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561345f5761345f613436565b500190565b60008261348157634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156134a0576134a0613436565b500290565b60006000198214156134b9576134b9613436565b5060010190565b634e487b7160e01b600052604160045260246000fd5b6000828210156134e8576134e8613436565b500390565b60005b838110156135085781810151838201526020016134f0565b838111156114b45750506000910152565b6000825161352b8184602087016134ed565b9190910192915050565b60208152600082518060208401526135548160408501602087016134ed565b601f01601f1916919091016040019291505056fe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220deece9ed5e1e3b07639bfc80364df904e1f85f16f97a8bdde3c5bffe82640a5f64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101775760003560e01c80636ef8d66d116100d857806382efd5021161008c5780639b05a775116100665780639b05a77514610335578063f2fde38b14610348578063f83b0fb91461035b57600080fd5b806382efd502146103095780638456cb591461031c5780638da5cb5b1461032457600080fd5b806380f51c12116100bd57806380f51c12146102c057806381cc8677146102e357806382dc1ec4146102f657600080fd5b80636ef8d66d146102b0578063715018a6146102b857600080fd5b806347e7ef241161012f5780635c975abb116101145780635c975abb1461026257806365d67c33146102745780636b2c0f551461029d57600080fd5b806347e7ef241461023c578063588be02b1461024f57600080fd5b80631edeeb23116101605780631edeeb23146101d75780633f4ba83a146101f857806346fbf68e1461020057600080fd5b806301e647251461017c57806303cbfe66146101c2575b600080fd5b6101a561018a366004612fb3565b6004602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101d56101d0366004612fe8565b61036e565b005b6101ea6101e536600461305e565b610481565b6040519081526020016101b9565b6101d56107a9565b61022c61020e366004612fe8565b6001600160a01b031660009081526002602052604090205460ff1690565b60405190151581526020016101b9565b6101d561024a36600461315d565b610812565b6101d561025d366004612fe8565b610966565b600154600160a01b900460ff1661022c565b6101a5610282366004613187565b6003602052600090815260409020546001600160a01b031681565b6101d56102ab366004612fe8565b610a6d565b6101d5610ac1565b6101d5610aca565b61022c6102ce366004612fe8565b60026020526000908152604090205460ff1681565b6101ea6102f13660046131ba565b610b1c565b6101d5610304366004612fe8565b610d48565b6101d5610317366004612fe8565b610d99565b6101d5610ea0565b6001546001600160a01b03166101a5565b6101d5610343366004612fe8565b610f07565b6101d5610356366004612fe8565b61100e565b6101d5610369366004612fe8565b6110db565b6001546001600160a01b031633146103bb5760405162461bcd60e51b8152602060048201819052602482015260008051602061356983398151915260448201526064015b60405180910390fd5b6001600160a01b0381166104035760405162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206164647265737360881b60448201526064016103b2565b6003600081905260209081527fcbc4e5fb02c3d1de23a9f1e014b4d2ee5aeaea9505df5e855c9210bf472495af80546001600160a01b0319166001600160a01b0384169081179091556040519081527fd60e9ceb4f54f1bfb1741a4b35fc9d806d7ed48200b523203b92248ea38fa17d91015b60405180910390a150565b6000600260005414156104d65760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016103b2565b6002600055600154600160a01b900460ff16156105285760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016103b2565b6001546001600160a01b031633146105705760405162461bcd60e51b8152602060048201819052602482015260008051602061356983398151915260448201526064016103b2565b60006003600084600581111561058857610588613244565b600581111561059957610599613244565b81526020810191909152604001600020546001600160a01b03169050806106025760405162461bcd60e51b815260206004820152601360248201527f756e6b6e6f776e2062726964676520747970650000000000000000000000000060448201526064016103b2565b60006106168c8c8c8c8c8c8c8c8c8b6111e2565b60208101519091506001600160a01b031630146106755760405162461bcd60e51b815260206004820152600e60248201527f696e76616c696420726566756e6400000000000000000000000000000000000060448201526064016103b2565b60808101516000908152600460205260409020546001600160a01b0316156106df5760405162461bcd60e51b815260206004820152601060248201527f616c726561647920726566756e6465640000000000000000000000000000000060448201526064016103b2565b80516000908152600460205260409020546001600160a01b0316806107465760405162461bcd60e51b815260206004820152601360248201527f756e6b6e6f776e207472616e736665722069640000000000000000000000000060448201526064016103b2565b60808201516000908152600460205260409081902080546001600160a01b0319166001600160a01b0384811691909117909155606084015191840151610790929116908390611341565b506080015160016000559b9a5050505050505050505050565b3360009081526002602052604090205460ff166108085760405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206973206e6f742070617573657200000000000000000000000060448201526064016103b2565b6108106113d6565b565b600260005414156108655760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016103b2565b6002600055600154600160a01b900460ff16156108b75760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016103b2565b6001546001600160a01b031633146108ff5760405162461bcd60e51b8152602060048201819052602482015260008051602061356983398151915260448201526064016103b2565b6109146001600160a01b03831633308461147c565b604080513381526001600160a01b03841660208201529081018290527f8752a472e571a816aea92eec8dae9baf628e840f4929fbcc2d155e6233ff68a79060600160405180910390a150506001600055565b6001546001600160a01b031633146109ae5760405162461bcd60e51b8152602060048201819052602482015260008051602061356983398151915260448201526064016103b2565b6001600160a01b0381166109f65760405162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206164647265737360881b60448201526064016103b2565b6001600052600360209081527fa15bc60c955c405d20d9149c709e2460f1c2d9a497496a7f46004d1772c3054c80546001600160a01b0319166001600160a01b0384169081179091556040519081527fbf9977180dc6e6cff25598c8e59150cecd7f8e448e092633d38ab7ee223ae0589101610476565b6001546001600160a01b03163314610ab55760405162461bcd60e51b8152602060048201819052602482015260008051602061356983398151915260448201526064016103b2565b610abe816114ba565b50565b610810336114ba565b6001546001600160a01b03163314610b125760405162461bcd60e51b8152602060048201819052602482015260008051602061356983398151915260448201526064016103b2565b6108106000611573565b600060026000541415610b715760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016103b2565b6002600055600154600160a01b900460ff1615610bc35760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016103b2565b6001546001600160a01b03163314610c0b5760405162461bcd60e51b8152602060048201819052602482015260008051602061356983398151915260448201526064016103b2565b600060036000846005811115610c2357610c23613244565b6005811115610c3457610c34613244565b81526020810191909152604001600020546001600160a01b0316905080610c9d5760405162461bcd60e51b815260206004820152601360248201527f756e6b6e6f776e2062726964676520747970650000000000000000000000000060448201526064016103b2565b6000610caf8a8a8a8a8a8a8a896115c5565b6000818152600460205260409020549091506001600160a01b031615610d175760405162461bcd60e51b815260206004820152600d60248201527f7265636f7264206578697374730000000000000000000000000000000000000060448201526064016103b2565b600081815260046020526040902080546001600160a01b031916331790559150506001600055979650505050505050565b6001546001600160a01b03163314610d905760405162461bcd60e51b8152602060048201819052602482015260008051602061356983398151915260448201526064016103b2565b610abe81611a81565b6001546001600160a01b03163314610de15760405162461bcd60e51b8152602060048201819052602482015260008051602061356983398151915260448201526064016103b2565b6001600160a01b038116610e295760405162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206164647265737360881b60448201526064016103b2565b6005600052600360209081527f405aad32e1adbac89bb7f176e338b8fc6e994ca210c9bb7bdca249b46594225080546001600160a01b0319166001600160a01b0384169081179091556040519081527ffb337a6c76476534518d5816caeb86263972470fedccfd047a35eb1825eaa9e89101610476565b3360009081526002602052604090205460ff16610eff5760405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206973206e6f742070617573657200000000000000000000000060448201526064016103b2565b610810611b3e565b6001546001600160a01b03163314610f4f5760405162461bcd60e51b8152602060048201819052602482015260008051602061356983398151915260448201526064016103b2565b6001600160a01b038116610f975760405162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206164647265737360881b60448201526064016103b2565b6002600052600360209081527fc3a24b0501bd2c13a7e57f2db4369ec4c223447539fc0724a9d55ac4a06ebd4d80546001600160a01b0319166001600160a01b0384169081179091556040519081527fa9db0c32d9c6c2f75f3b95047a9e67cc1c010eab792a4e6ca777ce918ad94aad9101610476565b6001546001600160a01b031633146110565760405162461bcd60e51b8152602060048201819052602482015260008051602061356983398151915260448201526064016103b2565b6001600160a01b0381166110d25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016103b2565b610abe81611573565b6001546001600160a01b031633146111235760405162461bcd60e51b8152602060048201819052602482015260008051602061356983398151915260448201526064016103b2565b6001600160a01b03811661116b5760405162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206164647265737360881b60448201526064016103b2565b6004600052600360209081527f83ec6a1f0257b830b5e016457c9cf1435391bf56cc98f369a58a54fe9377246580546001600160a01b0319166001600160a01b0384169081179091556040519081527f918a691a2a82482a10e11f43d7b627b2ba220dd08f251cb61933c42560f6fcb59101610476565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152600183600581111561122157611221613244565b141561123f576112388b8b8b8b8b8b8b8b8a611bc6565b9050611333565b600283600581111561125357611253613244565b141561126a576112388b8b8b8b8b8b8b8b8a611e11565b600383600581111561127e5761127e613244565b1415611295576112388b8b8b8b8b8b8b8b8a611f90565b60048360058111156112a9576112a9613244565b14156112c0576112388b8b8b8b8b8b8b8b8a61219d565b60058360058111156112d4576112d4613244565b14156112eb576112388b8b8b8b8b8b8b8b8a612433565b60405162461bcd60e51b815260206004820152601960248201527f6272696467652074797065206e6f7420737570706f727465640000000000000060448201526064016103b2565b9a9950505050505050505050565b6040516001600160a01b0383166024820152604481018290526113d190849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612613565b505050565b600154600160a01b900460ff1661142f5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016103b2565b6001805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6040516001600160a01b03808516602483015283166044820152606481018290526114b49085906323b872dd60e01b9060840161136d565b50505050565b6001600160a01b03811660009081526002602052604090205460ff166115225760405162461bcd60e51b815260206004820152601560248201527f4163636f756e74206973206e6f7420706175736572000000000000000000000060448201526064016103b2565b6001600160a01b038116600081815260026020908152604091829020805460ff1916905590519182527fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e9101610476565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008060018460058111156115dc576115dc613244565b141561170b576115f66001600160a01b038a16848a6126f8565b60405163a5977fbb60e01b81526001600160a01b038b811660048301528a81166024830152604482018a905267ffffffffffffffff808a1660648401528816608483015263ffffffff871660a483015284169063a5977fbb9060c401600060405180830381600087803b15801561166c57600080fd5b505af1158015611680573d6000803e3d6000fd5b50506040516bffffffffffffffffffffffff1930606090811b821660208401528e811b821660348401528d901b166048820152605c81018b90526001600160c01b031960c08b811b8216607c8401528a811b8216608484015246901b16608c82015260940191506116ee9050565b604051602081830303815290604052805190602001209050611a74565b600284600581111561171f5761171f613244565b1415611839576117396001600160a01b038a16848a6126f8565b6040516308d18d8960e21b81526001600160a01b038a81166004830152602482018a905267ffffffffffffffff808a1660448401528c821660648401528816608483015284169063234636249060a401600060405180830381600087803b1580156117a357600080fd5b505af11580156117b7573d6000803e3d6000fd5b50505050308989898d8a466040516020016116ee9796959493929190606097881b6bffffffffffffffffffffffff19908116825296881b87166014820152602881019590955260c093841b6001600160c01b031990811660488701529290961b909416605084015292811b831660648301529290921b16606c82015260740190565b600384600581111561184d5761184d613244565b141561192d57604051636f3c863f60e11b81526001600160a01b038a81166004830152602482018a90528b8116604483015267ffffffffffffffff8816606483015284169063de790c7e90608401600060405180830381600087803b1580156118b557600080fd5b505af11580156118c9573d6000803e3d6000fd5b50506040516bffffffffffffffffffffffff1930606090811b821660208401528d811b82166034840152604883018d90528e901b1660688201526001600160c01b031960c08a811b8216607c84015246901b166084820152608c0191506116ee9050565b600484600581111561194157611941613244565b1415611a055761195b6001600160a01b038a16848a6126f8565b6040516308d18d8960e21b81526001600160a01b038a81166004830152602482018a905267ffffffffffffffff808a1660448401528c821660648401528816608483015284169063234636249060a4015b602060405180830381600087803b1580156119c657600080fd5b505af11580156119da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119fe919061325a565b9050611a74565b6005846005811115611a1957611a19613244565b14156112eb5760405163a002930160e01b81526001600160a01b038a81166004830152602482018a905267ffffffffffffffff808a1660448401528c821660648401528816608483015284169063a00293019060a4016119ac565b9998505050505050505050565b6001600160a01b03811660009081526002602052604090205460ff1615611aea5760405162461bcd60e51b815260206004820152601960248201527f4163636f756e7420697320616c7265616479207061757365720000000000000060448201526064016103b2565b6001600160a01b038116600081815260026020908152604091829020805460ff1916600117905590519182527f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f89101610476565b600154600160a01b900460ff1615611b8b5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016103b2565b6001805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861145f3390565b6040805160a0810182526000808252602082018190529181018290526060810182905260808101919091526040805160a0810182526000808252602082018190529181018290526060810182905260808101919091526000611c5d8c8c8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506127b992505050565b8051602080830151604080850151606080870151608088015193516001600160c01b031960c098891b8116978201979097529490961b90941660288401526bffffffffffffffffffffffff1990841b811660308401529390921b9092166044830152605882015290915060780160408051601f198184030181529181528151602092830120608080860182905260a08501518652848301516001600160a01b039081169487019490945260608086015185168785015290850151908601529051631c13568560e31b81529186169163e09ab42891611d419160040190815260200190565b60206040518083038186803b158015611d5957600080fd5b505afa158015611d6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d919190613273565b611e0257604051630144352560e71b81526001600160a01b0385169063a21a928090611dcf908f908f908f908f908f908f908f908f90600401613354565b600060405180830381600087803b158015611de957600080fd5b505af1158015611dfd573d6000803e3d6000fd5b505050505b509a9950505050505050505050565b6040805160a0810182526000808252602082018190529181018290526060810182905260808101919091526040805160a0810182526000808252602082018190529181018290526060810182905260808101919091526000611ea88c8c8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061291992505050565b6020808201518251604080850151606080870151608088015160a089015194516bffffffffffffffffffffffff1997841b88169881019890985294821b8616603488015260488701929092521b90921660688401526001600160c01b031960c09190911b16607c830152608482015290915060a40160408051601f1981840301815291815281516020928301206080850181905260a08401518552838301516001600160a01b0390811693860193909352835183168583015283820151606086015290516301e6472560e01b8152918616916301e6472591611d419160040190815260200190565b6040805160a0810182526000808252602082018190529181018290526060810182905260808101919091526040805160a08101825260008082526020820181905291810182905260608101829052608081019190915260006120278c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612a6492505050565b6020808201518251604080850151606080870151608088015160a089015194516bffffffffffffffffffffffff1997841b88169881019890985294821b8616603488015260488701929092521b90921660688401526001600160c01b031960c09190911b16607c830152608482015290915060a40160408051601f1981840301815291815281516020928301206080850181905260a08401518552838301516001600160a01b0390811693860193909352835183168583015283820151606086015290516301e6472560e01b8152918616916301e647259161210f9160040190815260200190565b60206040518083038186803b15801561212757600080fd5b505afa15801561213b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061215f9190613273565b611e0257604051637c39a18160e11b81526001600160a01b0385169063f873430290611dcf908f908f908f908f908f908f908f908f90600401613354565b6040805160a0810182526000808252602082018190529181018290526060810182905260808101919091526040805160a08101825260008082526020820181905291810182905260608101829052608081019190915260006122348c8c8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061291992505050565b60a08101516040516301e6472560e01b81529192506001600160a01b038616916301e647259161226a9160040190815260200190565b60206040518083038186803b15801561228257600080fd5b505afa158015612296573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ba9190613273565b15612361576020808201518251604080850151606080870151608088015160a089015194516bffffffffffffffffffffffff1997841b88169881019890985294821b86166034880152604887019290925290811b841660688601526001600160c01b031960c09390931b92909216607c850152608484015286901b1660a482015260b8015b60408051601f19818403018152919052805160209091012060808301526123f3565b604051630144352560e71b81526001600160a01b0385169063a21a92809061239b908f908f908f908f908f908f908f908f90600401613354565b602060405180830381600087803b1580156123b557600080fd5b505af11580156123c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ed919061325a565b60808301525b60a081015182526020808201516001600160a01b0390811691840191909152815116604080840191909152015160608201529a9950505050505050505050565b6040805160a0810182526000808252602082018190529181018290526060810182905260808101919091526040805160a08101825260008082526020820181905291810182905260608101829052608081019190915260006124ca8c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612a6492505050565b60a08101516040516301e6472560e01b81529192506001600160a01b038616916301e64725916125009160040190815260200190565b60206040518083038186803b15801561251857600080fd5b505afa15801561252c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125509190613273565b156125d9576020808201518251604080850151606080870151608088015160a089015194516bffffffffffffffffffffffff1997841b88169881019890985294821b86166034880152604887019290925290811b841660688601526001600160c01b031960c09390931b92909216607c850152608484015286901b1660a482015260b80161233f565b604051637c39a18160e11b81526001600160a01b0385169063f87343029061239b908f908f908f908f908f908f908f908f90600401613354565b6000612668826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612baf9092919063ffffffff16565b8051909150156113d157808060200190518101906126869190613273565b6113d15760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016103b2565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b15801561274457600080fd5b505afa158015612758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061277c919061325a565b612786919061344c565b6040516001600160a01b0385166024820152604481018290529091506114b490859063095ea7b360e01b9060640161136d565b6040805160c08101825260008082526020808301829052828401829052606083018290526080830182905260a0830182905283518085019094528184528301849052909190805b602083015151835110156129115761281783612bc8565b9092509050816001141561283f5761282e83612c02565b67ffffffffffffffff168452612800565b81600214156128655761285183612c02565b67ffffffffffffffff166020850152612800565b81600314156128925761287f61287a84612c84565b612d41565b6001600160a01b03166040850152612800565b81600414156128ba576128a761287a84612c84565b6001600160a01b03166060850152612800565b81600514156128de576128d46128cf84612c84565b612d52565b6080850152612800565b8160061415612902576128f86128f384612c84565b612d89565b60a0850152612800565b61290c8382612da1565b612800565b505050919050565b6040805160c08101825260008082526020808301829052828401829052606083018290526080830182905260a0830182905283518085019094528184528301849052909190805b602083015151835110156129115761297783612bc8565b909250905081600114156129a15761299161287a84612c84565b6001600160a01b03168452612960565b81600214156129c9576129b661287a84612c84565b6001600160a01b03166020850152612960565b81600314156129e8576129de6128cf84612c84565b6040850152612960565b8160041415612a10576129fd61287a84612c84565b6001600160a01b03166060850152612960565b8160051415612a3657612a2283612c02565b67ffffffffffffffff166080850152612960565b8160061415612a5557612a4b6128f384612c84565b60a0850152612960565b612a5f8382612da1565b612960565b6040805160c08101825260008082526020808301829052828401829052606083018290526080830182905260a0830182905283518085019094528184528301849052909190805b6020830151518351101561291157612ac283612bc8565b90925090508160011415612aec57612adc61287a84612c84565b6001600160a01b03168452612aab565b8160021415612b1457612b0161287a84612c84565b6001600160a01b03166020850152612aab565b8160031415612b3357612b296128cf84612c84565b6040850152612aab565b8160041415612b5b57612b4861287a84612c84565b6001600160a01b03166060850152612aab565b8160051415612b8157612b6d83612c02565b67ffffffffffffffff166080850152612aab565b8160061415612ba057612b966128f384612c84565b60a0850152612aab565b612baa8382612da1565b612aab565b6060612bbe8484600085612e13565b90505b9392505050565b6000806000612bd684612c02565b9050612be3600882613464565b9250806007166005811115612bfa57612bfa613244565b915050915091565b602080820151825181019091015160009182805b600a811015612c7e5783811a9150612c2f816007613486565b82607f16901b851794508160801660001415612c6c57612c5081600161344c565b86518790612c5f90839061344c565b9052509395945050505050565b80612c76816134a5565b915050612c16565b50600080fd5b60606000612c9183612c02565b90506000818460000151612ca5919061344c565b9050836020015151811115612cb957600080fd5b8167ffffffffffffffff811115612cd257612cd26134c0565b6040519080825280601f01601f191660200182016040528015612cfc576020820181803683370190505b50602080860151865192955091818601919083010160005b85811015612d36578181015183820152612d2f60208261344c565b9050612d14565b505050935250919050565b6000612d4c82612f52565b92915050565b6000602082511115612d6357600080fd5b6020820151905081516020612d7891906134d6565b612d83906008613486565b1c919050565b60008151602014612d9957600080fd5b506020015190565b6000816005811115612db557612db5613244565b1415612dc4576113d182612c02565b6002816005811115612dd857612dd8613244565b1415610177576000612de983612c02565b90508083600001818151612dfd919061344c565b905250602083015151835111156113d157600080fd5b606082471015612e8b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016103b2565b843b612ed95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103b2565b600080866001600160a01b03168587604051612ef59190613519565b60006040518083038185875af1925050503d8060008114612f32576040519150601f19603f3d011682016040523d82523d6000602084013e612f37565b606091505b5091509150612f47828286612f7a565b979650505050505050565b60008151601414612f6257600080fd5b50602001516c01000000000000000000000000900490565b60608315612f89575081612bc1565b825115612f995782518084602001fd5b8160405162461bcd60e51b81526004016103b29190613535565b600060208284031215612fc557600080fd5b5035919050565b80356001600160a01b0381168114612fe357600080fd5b919050565b600060208284031215612ffa57600080fd5b612bc182612fcc565b60008083601f84011261301557600080fd5b50813567ffffffffffffffff81111561302d57600080fd5b6020830191508360208260051b850101111561304857600080fd5b9250929050565b803560068110612fe357600080fd5b600080600080600080600080600060a08a8c03121561307c57600080fd5b893567ffffffffffffffff8082111561309457600080fd5b818c0191508c601f8301126130a857600080fd5b8135818111156130b757600080fd5b8d60208285010111156130c957600080fd5b60209283019b509950908b013590808211156130e457600080fd5b6130f08d838e01613003565b909950975060408c013591508082111561310957600080fd5b6131158d838e01613003565b909750955060608c013591508082111561312e57600080fd5b5061313b8c828d01613003565b909450925061314e905060808b0161304f565b90509295985092959850929598565b6000806040838503121561317057600080fd5b61317983612fcc565b946020939093013593505050565b60006020828403121561319957600080fd5b612bc18261304f565b803567ffffffffffffffff81168114612fe357600080fd5b600080600080600080600060e0888a0312156131d557600080fd5b6131de88612fcc565b96506131ec60208901612fcc565b955060408801359450613201606089016131a2565b935061320f608089016131a2565b925060a088013563ffffffff8116811461322857600080fd5b915061323660c0890161304f565b905092959891949750929550565b634e487b7160e01b600052602160045260246000fd5b60006020828403121561326c57600080fd5b5051919050565b60006020828403121561328557600080fd5b81518015158114612bc157600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b8183526000602080850194508260005b858110156132fa576001600160a01b036132e783612fcc565b16875295820195908201906001016132ce565b509495945050505050565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561333757600080fd5b8260051b8083602087013760009401602001938452509192915050565b608081526000613368608083018a8c613295565b82810360208401528088825260208201905060208960051b8301018a60005b8b8110156133fb57848303601f190184528135368e9003601e190181126133ad57600080fd5b8d01803567ffffffffffffffff8111156133c657600080fd5b8036038f13156133d557600080fd5b6133e3858260208501613295565b60209687019690955093909301925050600101613387565b5050848103604086015261341081898b6132be565b925050508281036060840152613427818587613305565b9b9a5050505050505050505050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561345f5761345f613436565b500190565b60008261348157634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156134a0576134a0613436565b500290565b60006000198214156134b9576134b9613436565b5060010190565b634e487b7160e01b600052604160045260246000fd5b6000828210156134e8576134e8613436565b500390565b60005b838110156135085781810151838201526020016134f0565b838111156114b45750506000910152565b6000825161352b8184602087016134ed565b9190910192915050565b60208152600082518060208401526135548160408501602087016134ed565b601f01601f1916919091016040019291505056fe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220deece9ed5e1e3b07639bfc80364df904e1f85f16f97a8bdde3c5bffe82640a5f64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deposit(address,uint256)": {
        "params": {
          "_amount": "The amount to deposit.",
          "_token": "The deposited token address."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "refund(bytes,bytes[],address[],uint256[],uint8)": {
        "params": {
          "_bridgeType": "The type of bridge used by this failed transfer. One of the {BridgeType} enum.",
          "_powers": "The signing powers of the signers.",
          "_request": "The serialized request protobuf.",
          "_signers": "The sorted list of signers.",
          "_sigs": "The list of signatures sorted by signing addresses in ascending order. A request must be signed-off by +2/3 of the bridge's current signing power to be delivered."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transfer(address,address,uint256,uint64,uint64,uint32,uint8)": {
        "params": {
          "_amount": "The amount of the transfer.",
          "_bridgeType": "The type of bridge used by this transfer. One of the {BridgeType} enum.",
          "_dstChainId": "The destination chain ID.",
          "_maxSlippage": "(optional, only used for transfer via liquidity pool-based bridge) The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%. Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the transfer can be refunded.",
          "_nonce": "A number input to guarantee uniqueness of transferId. Can be timestamp in practice.",
          "_receiver": "The address of the receiver.",
          "_token": "The address of the token."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deposit(address,uint256)": {
        "notice": "Lock tokens."
      },
      "refund(bytes,bytes[],address[],uint256[],uint8)": {
        "notice": "Refund a failed cross-chain transfer."
      },
      "transfer(address,address,uint256,uint64,uint64,uint32,uint8)": {
        "notice": "Send a cross-chain transfer either via liquidity pool-based bridge or in form of mint/burn."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 206,
        "contract": "contracts/test-helpers/ContractAsSender.sol:ContractAsSender",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 7,
        "contract": "contracts/test-helpers/ContractAsSender.sol:ContractAsSender",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 121,
        "contract": "contracts/test-helpers/ContractAsSender.sol:ContractAsSender",
        "label": "_paused",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 20499,
        "contract": "contracts/test-helpers/ContractAsSender.sol:ContractAsSender",
        "label": "pausers",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 21117,
        "contract": "contracts/test-helpers/ContractAsSender.sol:ContractAsSender",
        "label": "bridges",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_enum(BridgeType)8464,t_address)"
      },
      {
        "astId": 21121,
        "contract": "contracts/test-helpers/ContractAsSender.sol:ContractAsSender",
        "label": "records",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(BridgeType)8464": {
        "encoding": "inplace",
        "label": "enum BridgeSenderLib.BridgeType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_enum(BridgeType)8464,t_address)": {
        "encoding": "mapping",
        "key": "t_enum(BridgeType)8464",
        "label": "mapping(enum BridgeSenderLib.BridgeType => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}