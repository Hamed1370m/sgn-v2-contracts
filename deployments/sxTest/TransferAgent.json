{
  "address": "0xb51541df05DE07be38dcfc4a80c05389A54502BB",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum BridgeTransferLib.BridgeSendType",
          "name": "bridgeSendType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "bridgeAddr",
          "type": "address"
        }
      ],
      "name": "BridgeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum BridgeTransferLib.BridgeSendType",
          "name": "bridgeSendType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "transferId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "receiver",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "Type",
              "type": "uint8"
            },
            {
              "internalType": "bytes",
              "name": "Value",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct TransferAgent.Extension[]",
          "name": "extensions",
          "type": "tuple[]"
        }
      ],
      "name": "Supplement",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "enum BridgeTransferLib.BridgeSendType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "bridges",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum BridgeTransferLib.BridgeSendType",
          "name": "_bridgeSendType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setBridgeAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_receiver",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_dstChainId",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "_maxSlippage",
          "type": "uint32"
        },
        {
          "internalType": "enum BridgeTransferLib.BridgeSendType",
          "name": "_bridgeSendType",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "Type",
              "type": "uint8"
            },
            {
              "internalType": "bytes",
              "name": "Value",
              "type": "bytes"
            }
          ],
          "internalType": "struct TransferAgent.Extension[]",
          "name": "_extensions",
          "type": "tuple[]"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_receiver",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_dstChainId",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "_maxSlippage",
          "type": "uint32"
        },
        {
          "internalType": "enum BridgeTransferLib.BridgeSendType",
          "name": "_bridgeSendType",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "Type",
              "type": "uint8"
            },
            {
              "internalType": "bytes",
              "name": "Value",
              "type": "bytes"
            }
          ],
          "internalType": "struct TransferAgent.Extension[]",
          "name": "_extensions",
          "type": "tuple[]"
        }
      ],
      "name": "transferNative",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6b1ad187630227f2575ed6add92883e1303390a3c2daef9e8dbb16bffff7bde4",
  "receipt": {
    "to": null,
    "from": "0xD3E476239EC4Bd04daf76A4f8BA4E56139a41b5c",
    "contractAddress": "0xb51541df05DE07be38dcfc4a80c05389A54502BB",
    "transactionIndex": 0,
    "gasUsed": "1620182",
    "logsBloom": "0x
    "blockHash": "0x1ff3b02421e48d8d38f7963b1dc263e017e084d0b7ad944a12416305c5bf98ab",
    "transactionHash": "0x6b1ad187630227f2575ed6add92883e1303390a3c2daef9e8dbb16bffff7bde4",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 10294261,
        "transactionHash": "0x6b1ad187630227f2575ed6add92883e1303390a3c2daef9e8dbb16bffff7bde4",
        "address": "0xb51541df05DE07be38dcfc4a80c05389A54502BB",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d3e476239ec4bd04daf76a4f8ba4e56139a41b5c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x1ff3b02421e48d8d38f7963b1dc263e017e084d0b7ad944a12416305c5bf98ab"
      }
    ],
    "blockNumber": 10294261,
    "cumulativeGasUsed": "1620182",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4c86bc0c5bac4df4480c523ac34dbcd8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum BridgeTransferLib.BridgeSendType\",\"name\":\"bridgeSendType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridgeAddr\",\"type\":\"address\"}],\"name\":\"BridgeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum BridgeTransferLib.BridgeSendType\",\"name\":\"bridgeSendType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"receiver\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"Type\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"Value\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct TransferAgent.Extension[]\",\"name\":\"extensions\",\"type\":\"tuple[]\"}],\"name\":\"Supplement\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"enum BridgeTransferLib.BridgeSendType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"bridges\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum BridgeTransferLib.BridgeSendType\",\"name\":\"_bridgeSendType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setBridgeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_receiver\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"_maxSlippage\",\"type\":\"uint32\"},{\"internalType\":\"enum BridgeTransferLib.BridgeSendType\",\"name\":\"_bridgeSendType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"Type\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"Value\",\"type\":\"bytes\"}],\"internalType\":\"struct TransferAgent.Extension[]\",\"name\":\"_extensions\",\"type\":\"tuple[]\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_receiver\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"_maxSlippage\",\"type\":\"uint32\"},{\"internalType\":\"enum BridgeTransferLib.BridgeSendType\",\"name\":\"_bridgeSendType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"Type\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"Value\",\"type\":\"bytes\"}],\"internalType\":\"struct TransferAgent.Extension[]\",\"name\":\"_extensions\",\"type\":\"tuple[]\"}],\"name\":\"transferNative\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"transfer(bytes,address,uint256,uint64,uint64,uint32,uint8,(uint8,bytes)[])\":{\"params\":{\"_amount\":\"The amount of the transfer.\",\"_bridgeSendType\":\"The type of bridge used by this transfer. One of the {BridgeSendType} enum.\",\"_dstChainId\":\"The destination chain ID.\",\"_extensions\":\"A list of extension to be processed by agent, is designed to be used for extending        present transfer. Contact Celer team to learn about already supported type of extension.\",\"_maxSlippage\":\"The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.        Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least        (100% - max slippage percentage) * amount or the transfer can be refunded.        Only applicable to the {BridgeSendType.Liquidity}.\",\"_nonce\":\"A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\",\"_receiver\":\"The address of the receiver.\",\"_token\":\"The address of the token.\"}},\"transferNative(bytes,uint256,uint64,uint64,uint32,uint8,(uint8,bytes)[])\":{\"params\":{\"_amount\":\"The amount of the transfer.\",\"_bridgeSendType\":\"The type of bridge used by this transfer. One of the {BridgeSendType} enum.\",\"_dstChainId\":\"The destination chain ID.\",\"_extensions\":\"A list of extension to be processed by agent, is designed to be used for extending        present transfer. Contact Celer team to learn about already supported type of extension.\",\"_maxSlippage\":\"The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.        Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least        (100% - max slippage percentage) * amount or the transfer can be refunded.        Only applicable to the {BridgeSendType.Liquidity}.\",\"_nonce\":\"A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\",\"_receiver\":\"The address of the receiver.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Transfer agent. Designed to support arbitrary length receiver address for transfer. Supports the liquidity pool-based {Bridge}, the {OriginalTokenVault} for pegged deposit and the {PeggedTokenBridge} for pegged burn.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"transfer(bytes,address,uint256,uint64,uint64,uint32,uint8,(uint8,bytes)[])\":{\"notice\":\"Send a cross-chain transfer of ERC20 token either via liquidity pool-based bridge or in form of mint/burn.\"},\"transferNative(bytes,uint256,uint64,uint64,uint32,uint8,(uint8,bytes)[])\":{\"notice\":\"Send a cross-chain transfer of native token either via liquidity pool-based bridge or in form of mint/burn.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/proxy/TransferAgent.sol\":\"TransferAgent\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/interfaces/IBridge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IBridge {\\n    function send(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage\\n    ) external;\\n\\n    function sendNative(\\n        address _receiver,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage\\n    ) external payable;\\n\\n    function relay(\\n        bytes calldata _relayRequest,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    function transfers(bytes32 transferId) external view returns (bool);\\n\\n    function withdraws(bytes32 withdrawId) external view returns (bool);\\n\\n    function withdraw(\\n        bytes calldata _wdmsg,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    /**\\n     * @notice Verifies that a message is signed by a quorum among the signers.\\n     * @param _msg signed message\\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\\n     * @param _signers sorted list of current signers\\n     * @param _powers powers of current signers\\n     */\\n    function verifySigs(\\n        bytes memory _msg,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external view;\\n}\\n\",\"keccak256\":\"0x4346cb21c9e841e59418826942364ff505e363b29887daeeff303cf31474fbf4\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IOriginalTokenVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IOriginalTokenVault {\\n    /**\\n     * @notice Lock original tokens to trigger mint at a remote chain's PeggedTokenBridge\\n     * @param _token local token address\\n     * @param _amount locked token amount\\n     * @param _mintChainId destination chainId to mint tokens\\n     * @param _mintAccount destination account to receive minted tokens\\n     * @param _nonce user input to guarantee unique depositId\\n     */\\n    function deposit(\\n        address _token,\\n        uint256 _amount,\\n        uint64 _mintChainId,\\n        address _mintAccount,\\n        uint64 _nonce\\n    ) external;\\n\\n    /**\\n     * @notice Lock native token as original token to trigger mint at a remote chain's PeggedTokenBridge\\n     * @param _amount locked token amount\\n     * @param _mintChainId destination chainId to mint tokens\\n     * @param _mintAccount destination account to receive minted tokens\\n     * @param _nonce user input to guarantee unique depositId\\n     */\\n    function depositNative(\\n        uint256 _amount,\\n        uint64 _mintChainId,\\n        address _mintAccount,\\n        uint64 _nonce\\n    ) external payable;\\n\\n    /**\\n     * @notice Withdraw locked original tokens triggered by a burn at a remote chain's PeggedTokenBridge.\\n     * @param _request The serialized Withdraw protobuf.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the bridge's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function withdraw(\\n        bytes calldata _request,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    function records(bytes32 recordId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa8a542d10c8a00966d3600baf8c83f012c276b9b71f3bbb79aad2d39969e5ac0\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IOriginalTokenVaultV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IOriginalTokenVaultV2 {\\n    /**\\n     * @notice Lock original tokens to trigger mint at a remote chain's PeggedTokenBridge\\n     * @param _token local token address\\n     * @param _amount locked token amount\\n     * @param _mintChainId destination chainId to mint tokens\\n     * @param _mintAccount destination account to receive minted tokens\\n     * @param _nonce user input to guarantee unique depositId\\n     */\\n    function deposit(\\n        address _token,\\n        uint256 _amount,\\n        uint64 _mintChainId,\\n        address _mintAccount,\\n        uint64 _nonce\\n    ) external returns (bytes32);\\n\\n    /**\\n    * @notice Lock native token as original token to trigger mint at a remote chain's PeggedTokenBridge\\n     * @param _amount locked token amount\\n     * @param _mintChainId destination chainId to mint tokens\\n     * @param _mintAccount destination account to receive minted tokens\\n     * @param _nonce user input to guarantee unique depositId\\n     */\\n    function depositNative(\\n        uint256 _amount,\\n        uint64 _mintChainId,\\n        address _mintAccount,\\n        uint64 _nonce\\n    ) external payable returns (bytes32);\\n\\n    /**\\n     * @notice Withdraw locked original tokens triggered by a burn at a remote chain's PeggedTokenBridge.\\n     * @param _request The serialized Withdraw protobuf.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the bridge's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function withdraw(\\n        bytes calldata _request,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external returns (bytes32);\\n\\n    function records(bytes32 recordId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x51ff4f74faea32f007464041b3faa0b4f0f159504b7c17d3277e9567a8bcf9bc\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IPeggedTokenBridge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IPeggedTokenBridge {\\n    /**\\n     * @notice Burn tokens to trigger withdrawal at a remote chain's OriginalTokenVault\\n     * @param _token local token address\\n     * @param _amount locked token amount\\n     * @param _withdrawAccount account who withdraw original tokens on the remote chain\\n     * @param _nonce user input to guarantee unique depositId\\n     */\\n    function burn(\\n        address _token,\\n        uint256 _amount,\\n        address _withdrawAccount,\\n        uint64 _nonce\\n    ) external;\\n\\n    /**\\n     * @notice Mint tokens triggered by deposit at a remote chain's OriginalTokenVault.\\n     * @param _request The serialized Mint protobuf.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function mint(\\n        bytes calldata _request,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    function records(bytes32 recordId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5adc3e5f1c8767c9f4580b499b16aba25f41934a2f945e9f0227b28d4b0405ae\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IPeggedTokenBridgeV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IPeggedTokenBridgeV2 {\\n    /**\\n     * @notice Burn pegged tokens to trigger a cross-chain withdrawal of the original tokens at a remote chain's\\n     * OriginalTokenVault, or mint at another remote chain\\n     * @param _token The pegged token address.\\n     * @param _amount The amount to burn.\\n     * @param _toChainId If zero, withdraw from original vault; otherwise, the remote chain to mint tokens.\\n     * @param _toAccount The account to receive tokens on the remote chain\\n     * @param _nonce A number to guarantee unique depositId. Can be timestamp in practice.\\n     */\\n    function burn(\\n        address _token,\\n        uint256 _amount,\\n        uint64 _toChainId,\\n        address _toAccount,\\n        uint64 _nonce\\n    ) external returns (bytes32);\\n\\n    // same with `burn` above, use openzeppelin ERC20Burnable interface\\n    function burnFrom(\\n        address _token,\\n        uint256 _amount,\\n        uint64 _toChainId,\\n        address _toAccount,\\n        uint64 _nonce\\n    ) external returns (bytes32);\\n\\n    /**\\n     * @notice Mint tokens triggered by deposit at a remote chain's OriginalTokenVault.\\n     * @param _request The serialized Mint protobuf.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function mint(\\n        bytes calldata _request,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external returns (bytes32);\\n\\n    function records(bytes32 recordId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xea5828630c131a1c7017360d4c1729c71bdeb5eaf366a30c9637c82795cea9d5\",\"license\":\"GPL-3.0-only\"},\"contracts/libraries/BridgeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./PbBridge.sol\\\";\\nimport \\\"./PbPegged.sol\\\";\\nimport \\\"./PbPool.sol\\\";\\nimport \\\"../interfaces/IBridge.sol\\\";\\nimport \\\"../interfaces/IOriginalTokenVault.sol\\\";\\nimport \\\"../interfaces/IOriginalTokenVaultV2.sol\\\";\\nimport \\\"../interfaces/IPeggedTokenBridge.sol\\\";\\nimport \\\"../interfaces/IPeggedTokenBridgeV2.sol\\\";\\n\\ninterface INativeWrap {\\n    function nativeWrap() external view returns (address);\\n}\\n\\nlibrary BridgeTransferLib {\\n    using SafeERC20 for IERC20;\\n\\n    enum BridgeSendType {\\n        Null,\\n        Liquidity,\\n        PegDeposit,\\n        PegBurn,\\n        PegV2Deposit,\\n        PegV2Burn,\\n        PegV2BurnFrom\\n    }\\n\\n    enum BridgeReceiveType {\\n        Null,\\n        LqRelay,\\n        LqWithdraw,\\n        PegMint,\\n        PegWithdraw,\\n        PegV2Mint,\\n        PegV2Withdraw\\n    }\\n\\n    struct ReceiveInfo {\\n        bytes32 transferId;\\n        address receiver;\\n        address token; // 0 address for native token\\n        uint256 amount;\\n        bytes32 refid; // reference id, e.g., srcTransferId for refund\\n    }\\n\\n    // ============== Internal library functions called by apps ==============\\n\\n    /**\\n     * @notice Send a cross-chain transfer of ERC20 token either via liquidity pool-based bridge or in the form of pegged mint / burn.\\n     * @param _receiver The address of the receiver.\\n     * @param _token The address of the token.\\n     * @param _amount The amount of the transfer.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\\n     *        Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least\\n     *        (100% - max slippage percentage) * amount or the transfer can be refunded.\\n     *        Only applicable to the {BridgeSendType.Liquidity}.\\n     * @param _bridgeSendType The type of the bridge used by this transfer. One of the {BridgeSendType} enum.\\n     * @param _bridgeAddr The address of the bridge used.\\n     */\\n    function sendTransfer(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage, // slippage * 1M, eg. 0.5% -> 5000\\n        BridgeSendType _bridgeSendType,\\n        address _bridgeAddr\\n    ) internal returns (bytes32) {\\n        bytes32 transferId;\\n        IERC20(_token).safeIncreaseAllowance(_bridgeAddr, _amount);\\n        if (_bridgeSendType == BridgeSendType.Liquidity) {\\n            IBridge(_bridgeAddr).send(_receiver, _token, _amount, _dstChainId, _nonce, _maxSlippage);\\n            transferId = keccak256(\\n                abi.encodePacked(address(this), _receiver, _token, _amount, _dstChainId, _nonce, uint64(block.chainid))\\n            );\\n        } else if (_bridgeSendType == BridgeSendType.PegDeposit) {\\n            IOriginalTokenVault(_bridgeAddr).deposit(_token, _amount, _dstChainId, _receiver, _nonce);\\n            transferId = keccak256(\\n                abi.encodePacked(address(this), _token, _amount, _dstChainId, _receiver, _nonce, uint64(block.chainid))\\n            );\\n        } else if (_bridgeSendType == BridgeSendType.PegBurn) {\\n            IPeggedTokenBridge(_bridgeAddr).burn(_token, _amount, _receiver, _nonce);\\n            transferId = keccak256(\\n                abi.encodePacked(address(this), _token, _amount, _receiver, _nonce, uint64(block.chainid))\\n            );\\n            // handle cases where certain tokens do not spend allowance for role-based burn\\n            IERC20(_token).safeApprove(_bridgeAddr, 0);\\n        } else if (_bridgeSendType == BridgeSendType.PegV2Deposit) {\\n            transferId = IOriginalTokenVaultV2(_bridgeAddr).deposit(_token, _amount, _dstChainId, _receiver, _nonce);\\n        } else if (_bridgeSendType == BridgeSendType.PegV2Burn) {\\n            transferId = IPeggedTokenBridgeV2(_bridgeAddr).burn(_token, _amount, _dstChainId, _receiver, _nonce);\\n            // handle cases where certain tokens do not spend allowance for role-based burn\\n            IERC20(_token).safeApprove(_bridgeAddr, 0);\\n        } else if (_bridgeSendType == BridgeSendType.PegV2BurnFrom) {\\n            transferId = IPeggedTokenBridgeV2(_bridgeAddr).burnFrom(_token, _amount, _dstChainId, _receiver, _nonce);\\n            // handle cases where certain tokens do not spend allowance for role-based burn\\n            IERC20(_token).safeApprove(_bridgeAddr, 0);\\n        } else {\\n            revert(\\\"bridge send type not supported\\\");\\n        }\\n        return transferId;\\n    }\\n\\n    /**\\n     * @notice Send a cross-chain transfer of native token either via liquidity pool-based bridge or in the form of pegged mint / burn.\\n     * @param _receiver The address of the receiver.\\n     * @param _amount The amount of the transfer.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\\n     *        Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least\\n     *        (100% - max slippage percentage) * amount or the transfer can be refunded.\\n     *        Only applicable to the {BridgeSendType.Liquidity}.\\n     * @param _bridgeSendType The type of the bridge used by this transfer. One of the {BridgeSendType} enum.\\n     * @param _bridgeAddr The address of the bridge used.\\n     */\\n    function sendNativeTransfer(\\n        address _receiver,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage, // slippage * 1M, eg. 0.5% -> 5000\\n        BridgeSendType _bridgeSendType,\\n        address _bridgeAddr\\n    ) internal returns (bytes32) {\\n        require(_bridgeSendType == BridgeSendType.Liquidity || _bridgeSendType == BridgeSendType.PegDeposit || _bridgeSendType == BridgeSendType.PegV2Deposit, \\\"Lib: invalid bridge send type\\\");\\n        address _token = INativeWrap(_bridgeAddr).nativeWrap();\\n        bytes32 transferId;\\n        if (_bridgeSendType == BridgeSendType.Liquidity) {\\n            IBridge(_bridgeAddr).sendNative{value: msg.value}(_receiver, _amount, _dstChainId, _nonce, _maxSlippage);\\n            transferId = keccak256(\\n                abi.encodePacked(address(this), _receiver, _token, _amount, _dstChainId, _nonce, uint64(block.chainid))\\n            );\\n        } else if (_bridgeSendType == BridgeSendType.PegDeposit) {\\n            IOriginalTokenVault(_bridgeAddr).depositNative{value: msg.value}(_amount, _dstChainId, _receiver, _nonce);\\n            transferId = keccak256(\\n                abi.encodePacked(address(this), _token, _amount, _dstChainId, _receiver, _nonce, uint64(block.chainid))\\n            );\\n        } else {\\n            // _bridgeSendType == BridgeSendType.PegV2Deposit\\n            transferId = IOriginalTokenVaultV2(_bridgeAddr).depositNative{value: msg.value}(_amount, _dstChainId, _receiver, _nonce);\\n        }\\n        return transferId;\\n    }\\n\\n    /**\\n     * @notice Receive a cross-chain transfer.\\n     * @param _request The serialized request protobuf.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     * @param _bridgeReceiveType The type of the received transfer. One of the {BridgeReceiveType} enum.\\n     * @param _bridgeAddr The address of the bridge used.\\n     */\\n    function receiveTransfer(\\n        bytes calldata _request,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers,\\n        BridgeReceiveType _bridgeReceiveType,\\n        address _bridgeAddr\\n    ) internal returns (ReceiveInfo memory) {\\n        if (_bridgeReceiveType == BridgeReceiveType.LqRelay) {\\n            return receiveLiquidityRelay(_request, _sigs, _signers, _powers, _bridgeAddr);\\n        } else if (_bridgeReceiveType == BridgeReceiveType.LqWithdraw) {\\n            return receiveLiquidityWithdraw(_request, _sigs, _signers, _powers, _bridgeAddr);\\n        } else if (_bridgeReceiveType == BridgeReceiveType.PegWithdraw) {\\n            return receivePegWithdraw(_request, _sigs, _signers, _powers, _bridgeAddr);\\n        } else if (_bridgeReceiveType == BridgeReceiveType.PegMint) {\\n            return receivePegMint(_request, _sigs, _signers, _powers, _bridgeAddr);\\n        } else if (_bridgeReceiveType == BridgeReceiveType.PegV2Withdraw) {\\n            return receivePegV2Withdraw(_request, _sigs, _signers, _powers, _bridgeAddr);\\n        } else if (_bridgeReceiveType == BridgeReceiveType.PegV2Mint) {\\n            return receivePegV2Mint(_request, _sigs, _signers, _powers, _bridgeAddr);\\n        } else {\\n            revert(\\\"bridge receive type not supported\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Receive a liquidity bridge relay.\\n     * @param _request The serialized request protobuf.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     * @param _bridgeAddr The address of liquidity bridge.\\n     */\\n    function receiveLiquidityRelay(\\n        bytes calldata _request,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers,\\n        address _bridgeAddr\\n    ) internal returns (ReceiveInfo memory) {\\n        ReceiveInfo memory recv;\\n        PbBridge.Relay memory request = PbBridge.decRelay(_request);\\n        recv.transferId = keccak256(\\n            abi.encodePacked(\\n                request.sender,\\n                request.receiver,\\n                request.token,\\n                request.amount,\\n                request.srcChainId,\\n                uint64(block.chainid),\\n                request.srcTransferId\\n            )\\n        );\\n        recv.refid = request.srcTransferId;\\n        recv.receiver = request.receiver;\\n        recv.token = request.token;\\n        recv.amount = request.amount;\\n        if (!IBridge(_bridgeAddr).transfers(recv.transferId)) {\\n            IBridge(_bridgeAddr).relay(_request, _sigs, _signers, _powers);\\n        }\\n        return recv;\\n    }\\n\\n    /**\\n     * @notice Receive a liquidity bridge withdrawal.\\n     * @param _request The serialized request protobuf.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     * @param _bridgeAddr The address of liquidity bridge.\\n     */\\n    function receiveLiquidityWithdraw(\\n        bytes calldata _request,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers,\\n        address _bridgeAddr\\n    ) internal returns (ReceiveInfo memory) {\\n        ReceiveInfo memory recv;\\n        PbPool.WithdrawMsg memory request = PbPool.decWithdrawMsg(_request);\\n        recv.transferId = keccak256(\\n            abi.encodePacked(request.chainid, request.seqnum, request.receiver, request.token, request.amount)\\n        );\\n        recv.refid = request.refid;\\n        recv.receiver = request.receiver;\\n        if (INativeWrap(_bridgeAddr).nativeWrap() == request.token) {\\n            recv.token = address(0);\\n        } else {\\n            recv.token = request.token;\\n        }\\n        recv.amount = request.amount;\\n        if (!IBridge(_bridgeAddr).withdraws(recv.transferId)) {\\n            IBridge(_bridgeAddr).withdraw(_request, _sigs, _signers, _powers);\\n        }\\n        return recv;\\n    }\\n\\n    /**\\n     * @notice Receive an OriginalTokenVault withdrawal.\\n     * @param _request The serialized request protobuf.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     * @param _bridgeAddr The address of OriginalTokenVault.\\n     */\\n    function receivePegWithdraw(\\n        bytes calldata _request,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers,\\n        address _bridgeAddr\\n    ) internal returns (ReceiveInfo memory) {\\n        ReceiveInfo memory recv;\\n        PbPegged.Withdraw memory request = PbPegged.decWithdraw(_request);\\n        recv.transferId = keccak256(\\n            abi.encodePacked(\\n                request.receiver,\\n                request.token,\\n                request.amount,\\n                request.burnAccount,\\n                request.refChainId,\\n                request.refId\\n            )\\n        );\\n        recv.refid = request.refId;\\n        recv.receiver = request.receiver;\\n        if (INativeWrap(_bridgeAddr).nativeWrap() == request.token) {\\n            recv.token = address(0);\\n        } else {\\n            recv.token = request.token;\\n        }\\n        recv.amount = request.amount;\\n        if (!IOriginalTokenVault(_bridgeAddr).records(recv.transferId)) {\\n            IOriginalTokenVault(_bridgeAddr).withdraw(_request, _sigs, _signers, _powers);\\n        }\\n        return recv;\\n    }\\n\\n    /**\\n     * @notice Receive a PeggedTokenBridge mint.\\n     * @param _request The serialized request protobuf.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     * @param _bridgeAddr The address of PeggedTokenBridge.\\n     */\\n    function receivePegMint(\\n        bytes calldata _request,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers,\\n        address _bridgeAddr\\n    ) internal returns (ReceiveInfo memory) {\\n        ReceiveInfo memory recv;\\n        PbPegged.Mint memory request = PbPegged.decMint(_request);\\n        recv.transferId = keccak256(\\n            abi.encodePacked(\\n                request.account,\\n                request.token,\\n                request.amount,\\n                request.depositor,\\n                request.refChainId,\\n                request.refId\\n            )\\n        );\\n        recv.refid = request.refId;\\n        recv.receiver = request.account;\\n        recv.token = request.token;\\n        recv.amount = request.amount;\\n        if (!IPeggedTokenBridge(_bridgeAddr).records(recv.transferId)) {\\n            IPeggedTokenBridge(_bridgeAddr).mint(_request, _sigs, _signers, _powers);\\n        }\\n        return recv;\\n    }\\n\\n    /**\\n     * @notice Receive an OriginalTokenVaultV2 withdrawal.\\n     * @param _request The serialized request protobuf.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A request must be signed-off by\\n     * +2/3 of the bridge's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     * @param _bridgeAddr The address of OriginalTokenVaultV2.\\n     */\\n    function receivePegV2Withdraw(\\n        bytes calldata _request,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers,\\n        address _bridgeAddr\\n    ) internal returns (ReceiveInfo memory) {\\n        ReceiveInfo memory recv;\\n        PbPegged.Withdraw memory request = PbPegged.decWithdraw(_request);\\n        if (IOriginalTokenVaultV2(_bridgeAddr).records(request.refId)) {\\n            recv.transferId = keccak256(\\n                abi.encodePacked(\\n                    request.receiver,\\n                    request.token,\\n                    request.amount,\\n                    request.burnAccount,\\n                    request.refChainId,\\n                    request.refId,\\n                    _bridgeAddr\\n                )\\n            );\\n        } else {\\n            recv.transferId = IOriginalTokenVaultV2(_bridgeAddr).withdraw(_request, _sigs, _signers, _powers);\\n        }\\n        recv.refid = request.refId;\\n        recv.receiver = request.receiver;\\n        if (INativeWrap(_bridgeAddr).nativeWrap() == request.token) {\\n            recv.token = address(0);\\n        } else {\\n            recv.token = request.token;\\n        }\\n        recv.amount = request.amount;\\n        return recv;\\n    }\\n\\n    /**\\n     * @notice Receive a PeggedTokenBridgeV2 mint.\\n     * @param _request The serialized request protobuf.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A request must be signed-off by\\n     * +2/3 of the bridge's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     * @param _bridgeAddr The address of PeggedTokenBridgeV2.\\n     */\\n    function receivePegV2Mint(\\n        bytes calldata _request,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers,\\n        address _bridgeAddr\\n    ) internal returns (ReceiveInfo memory) {\\n        ReceiveInfo memory recv;\\n        PbPegged.Mint memory request = PbPegged.decMint(_request);\\n        if (IPeggedTokenBridgeV2(_bridgeAddr).records(request.refId)) {\\n            recv.transferId = keccak256(\\n                abi.encodePacked(\\n                    request.account,\\n                    request.token,\\n                    request.amount,\\n                    request.depositor,\\n                    request.refChainId,\\n                    request.refId,\\n                    _bridgeAddr\\n                )\\n            );\\n        } else {\\n            recv.transferId = IPeggedTokenBridgeV2(_bridgeAddr).mint(_request, _sigs, _signers, _powers);\\n        }\\n        recv.refid = request.refId;\\n        recv.receiver = request.account;\\n        recv.token = request.token;\\n        recv.amount = request.amount;\\n        return recv;\\n    }\\n\\n    function bridgeRefundType(BridgeSendType _bridgeSendType) internal pure returns (BridgeReceiveType) {\\n        if (_bridgeSendType == BridgeSendType.Liquidity) {\\n            return BridgeReceiveType.LqWithdraw;\\n        }\\n        if (_bridgeSendType == BridgeSendType.PegDeposit) {\\n            return BridgeReceiveType.PegWithdraw;\\n        }\\n        if (_bridgeSendType == BridgeSendType.PegBurn) {\\n            return BridgeReceiveType.PegMint;\\n        }\\n        if (_bridgeSendType == BridgeSendType.PegV2Deposit) {\\n            return BridgeReceiveType.PegV2Withdraw;\\n        }\\n        if (_bridgeSendType == BridgeSendType.PegV2Burn || _bridgeSendType == BridgeSendType.PegV2BurnFrom) {\\n            return BridgeReceiveType.PegV2Mint;\\n        }\\n        return BridgeReceiveType.Null;\\n    }\\n}\\n\",\"keccak256\":\"0x0d1e1e4262c6e596106f44cad5e261ca0a98a612c15135ff9bad92f416781485\",\"license\":\"GPL-3.0-only\"},\"contracts/libraries/Pb.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\n// runtime proto sol library\\nlibrary Pb {\\n    enum WireType {\\n        Varint,\\n        Fixed64,\\n        LengthDelim,\\n        StartGroup,\\n        EndGroup,\\n        Fixed32\\n    }\\n\\n    struct Buffer {\\n        uint256 idx; // the start index of next read. when idx=b.length, we're done\\n        bytes b; // hold serialized proto msg, readonly\\n    }\\n\\n    // create a new in-memory Buffer object from raw msg bytes\\n    function fromBytes(bytes memory raw) internal pure returns (Buffer memory buf) {\\n        buf.b = raw;\\n        buf.idx = 0;\\n    }\\n\\n    // whether there are unread bytes\\n    function hasMore(Buffer memory buf) internal pure returns (bool) {\\n        return buf.idx < buf.b.length;\\n    }\\n\\n    // decode current field number and wiretype\\n    function decKey(Buffer memory buf) internal pure returns (uint256 tag, WireType wiretype) {\\n        uint256 v = decVarint(buf);\\n        tag = v / 8;\\n        wiretype = WireType(v & 7);\\n    }\\n\\n    // count tag occurrences, return an array due to no memory map support\\n    // have to create array for (maxtag+1) size. cnts[tag] = occurrences\\n    // should keep buf.idx unchanged because this is only a count function\\n    function cntTags(Buffer memory buf, uint256 maxtag) internal pure returns (uint256[] memory cnts) {\\n        uint256 originalIdx = buf.idx;\\n        cnts = new uint256[](maxtag + 1); // protobuf's tags are from 1 rather than 0\\n        uint256 tag;\\n        WireType wire;\\n        while (hasMore(buf)) {\\n            (tag, wire) = decKey(buf);\\n            cnts[tag] += 1;\\n            skipValue(buf, wire);\\n        }\\n        buf.idx = originalIdx;\\n    }\\n\\n    // read varint from current buf idx, move buf.idx to next read, return the int value\\n    function decVarint(Buffer memory buf) internal pure returns (uint256 v) {\\n        bytes10 tmp; // proto int is at most 10 bytes (7 bits can be used per byte)\\n        bytes memory bb = buf.b; // get buf.b mem addr to use in assembly\\n        v = buf.idx; // use v to save one additional uint variable\\n        assembly {\\n            tmp := mload(add(add(bb, 32), v)) // load 10 bytes from buf.b[buf.idx] to tmp\\n        }\\n        uint256 b; // store current byte content\\n        v = 0; // reset to 0 for return value\\n        for (uint256 i = 0; i < 10; i++) {\\n            assembly {\\n                b := byte(i, tmp) // don't use tmp[i] because it does bound check and costs extra\\n            }\\n            v |= (b & 0x7F) << (i * 7);\\n            if (b & 0x80 == 0) {\\n                buf.idx += i + 1;\\n                return v;\\n            }\\n        }\\n        revert(); // i=10, invalid varint stream\\n    }\\n\\n    // read length delimited field and return bytes\\n    function decBytes(Buffer memory buf) internal pure returns (bytes memory b) {\\n        uint256 len = decVarint(buf);\\n        uint256 end = buf.idx + len;\\n        require(end <= buf.b.length); // avoid overflow\\n        b = new bytes(len);\\n        bytes memory bufB = buf.b; // get buf.b mem addr to use in assembly\\n        uint256 bStart;\\n        uint256 bufBStart = buf.idx;\\n        assembly {\\n            bStart := add(b, 32)\\n            bufBStart := add(add(bufB, 32), bufBStart)\\n        }\\n        for (uint256 i = 0; i < len; i += 32) {\\n            assembly {\\n                mstore(add(bStart, i), mload(add(bufBStart, i)))\\n            }\\n        }\\n        buf.idx = end;\\n    }\\n\\n    // return packed ints\\n    function decPacked(Buffer memory buf) internal pure returns (uint256[] memory t) {\\n        uint256 len = decVarint(buf);\\n        uint256 end = buf.idx + len;\\n        require(end <= buf.b.length); // avoid overflow\\n        // array in memory must be init w/ known length\\n        // so we have to create a tmp array w/ max possible len first\\n        uint256[] memory tmp = new uint256[](len);\\n        uint256 i = 0; // count how many ints are there\\n        while (buf.idx < end) {\\n            tmp[i] = decVarint(buf);\\n            i++;\\n        }\\n        t = new uint256[](i); // init t with correct length\\n        for (uint256 j = 0; j < i; j++) {\\n            t[j] = tmp[j];\\n        }\\n        return t;\\n    }\\n\\n    // move idx pass current value field, to beginning of next tag or msg end\\n    function skipValue(Buffer memory buf, WireType wire) internal pure {\\n        if (wire == WireType.Varint) {\\n            decVarint(buf);\\n        } else if (wire == WireType.LengthDelim) {\\n            uint256 len = decVarint(buf);\\n            buf.idx += len; // skip len bytes value data\\n            require(buf.idx <= buf.b.length); // avoid overflow\\n        } else {\\n            revert();\\n        } // unsupported wiretype\\n    }\\n\\n    // type conversion help utils\\n    function _bool(uint256 x) internal pure returns (bool v) {\\n        return x != 0;\\n    }\\n\\n    function _uint256(bytes memory b) internal pure returns (uint256 v) {\\n        require(b.length <= 32); // b's length must be smaller than or equal to 32\\n        assembly {\\n            v := mload(add(b, 32))\\n        } // load all 32bytes to v\\n        v = v >> (8 * (32 - b.length)); // only first b.length is valid\\n    }\\n\\n    function _address(bytes memory b) internal pure returns (address v) {\\n        v = _addressPayable(b);\\n    }\\n\\n    function _addressPayable(bytes memory b) internal pure returns (address payable v) {\\n        require(b.length == 20);\\n        //load 32bytes then shift right 12 bytes\\n        assembly {\\n            v := div(mload(add(b, 32)), 0x1000000000000000000000000)\\n        }\\n    }\\n\\n    function _bytes32(bytes memory b) internal pure returns (bytes32 v) {\\n        require(b.length == 32);\\n        assembly {\\n            v := mload(add(b, 32))\\n        }\\n    }\\n\\n    // uint[] to uint8[]\\n    function uint8s(uint256[] memory arr) internal pure returns (uint8[] memory t) {\\n        t = new uint8[](arr.length);\\n        for (uint256 i = 0; i < t.length; i++) {\\n            t[i] = uint8(arr[i]);\\n        }\\n    }\\n\\n    function uint32s(uint256[] memory arr) internal pure returns (uint32[] memory t) {\\n        t = new uint32[](arr.length);\\n        for (uint256 i = 0; i < t.length; i++) {\\n            t[i] = uint32(arr[i]);\\n        }\\n    }\\n\\n    function uint64s(uint256[] memory arr) internal pure returns (uint64[] memory t) {\\n        t = new uint64[](arr.length);\\n        for (uint256 i = 0; i < t.length; i++) {\\n            t[i] = uint64(arr[i]);\\n        }\\n    }\\n\\n    function bools(uint256[] memory arr) internal pure returns (bool[] memory t) {\\n        t = new bool[](arr.length);\\n        for (uint256 i = 0; i < t.length; i++) {\\n            t[i] = arr[i] != 0;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x66fd8c7045b0794eca747bd534928197604a8f9c9ecadb1cfded2b45d4de5fb3\",\"license\":\"GPL-3.0-only\"},\"contracts/libraries/PbBridge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// Code generated by protoc-gen-sol. DO NOT EDIT.\\n// source: bridge.proto\\npragma solidity 0.8.9;\\nimport \\\"./Pb.sol\\\";\\n\\nlibrary PbBridge {\\n    using Pb for Pb.Buffer; // so we can call Pb funcs on Buffer obj\\n\\n    struct Relay {\\n        address sender; // tag: 1\\n        address receiver; // tag: 2\\n        address token; // tag: 3\\n        uint256 amount; // tag: 4\\n        uint64 srcChainId; // tag: 5\\n        uint64 dstChainId; // tag: 6\\n        bytes32 srcTransferId; // tag: 7\\n    } // end struct Relay\\n\\n    function decRelay(bytes memory raw) internal pure returns (Relay memory m) {\\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\\n\\n        uint256 tag;\\n        Pb.WireType wire;\\n        while (buf.hasMore()) {\\n            (tag, wire) = buf.decKey();\\n            if (false) {}\\n            // solidity has no switch/case\\n            else if (tag == 1) {\\n                m.sender = Pb._address(buf.decBytes());\\n            } else if (tag == 2) {\\n                m.receiver = Pb._address(buf.decBytes());\\n            } else if (tag == 3) {\\n                m.token = Pb._address(buf.decBytes());\\n            } else if (tag == 4) {\\n                m.amount = Pb._uint256(buf.decBytes());\\n            } else if (tag == 5) {\\n                m.srcChainId = uint64(buf.decVarint());\\n            } else if (tag == 6) {\\n                m.dstChainId = uint64(buf.decVarint());\\n            } else if (tag == 7) {\\n                m.srcTransferId = Pb._bytes32(buf.decBytes());\\n            } else {\\n                buf.skipValue(wire);\\n            } // skip value of unknown tag\\n        }\\n    } // end decoder Relay\\n}\\n\",\"keccak256\":\"0xe7f444d4bddc65637fd050d5f8e42ee781f7a00f97cb403e786b891418d0a1e0\",\"license\":\"GPL-3.0-only\"},\"contracts/libraries/PbPegged.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// Code generated by protoc-gen-sol. DO NOT EDIT.\\n// source: contracts/libraries/proto/pegged.proto\\npragma solidity 0.8.9;\\nimport \\\"./Pb.sol\\\";\\n\\nlibrary PbPegged {\\n    using Pb for Pb.Buffer; // so we can call Pb funcs on Buffer obj\\n\\n    struct Mint {\\n        address token; // tag: 1\\n        address account; // tag: 2\\n        uint256 amount; // tag: 3\\n        address depositor; // tag: 4\\n        uint64 refChainId; // tag: 5\\n        bytes32 refId; // tag: 6\\n    } // end struct Mint\\n\\n    function decMint(bytes memory raw) internal pure returns (Mint memory m) {\\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\\n\\n        uint256 tag;\\n        Pb.WireType wire;\\n        while (buf.hasMore()) {\\n            (tag, wire) = buf.decKey();\\n            if (false) {}\\n            // solidity has no switch/case\\n            else if (tag == 1) {\\n                m.token = Pb._address(buf.decBytes());\\n            } else if (tag == 2) {\\n                m.account = Pb._address(buf.decBytes());\\n            } else if (tag == 3) {\\n                m.amount = Pb._uint256(buf.decBytes());\\n            } else if (tag == 4) {\\n                m.depositor = Pb._address(buf.decBytes());\\n            } else if (tag == 5) {\\n                m.refChainId = uint64(buf.decVarint());\\n            } else if (tag == 6) {\\n                m.refId = Pb._bytes32(buf.decBytes());\\n            } else {\\n                buf.skipValue(wire);\\n            } // skip value of unknown tag\\n        }\\n    } // end decoder Mint\\n\\n    struct Withdraw {\\n        address token; // tag: 1\\n        address receiver; // tag: 2\\n        uint256 amount; // tag: 3\\n        address burnAccount; // tag: 4\\n        uint64 refChainId; // tag: 5\\n        bytes32 refId; // tag: 6\\n    } // end struct Withdraw\\n\\n    function decWithdraw(bytes memory raw) internal pure returns (Withdraw memory m) {\\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\\n\\n        uint256 tag;\\n        Pb.WireType wire;\\n        while (buf.hasMore()) {\\n            (tag, wire) = buf.decKey();\\n            if (false) {}\\n            // solidity has no switch/case\\n            else if (tag == 1) {\\n                m.token = Pb._address(buf.decBytes());\\n            } else if (tag == 2) {\\n                m.receiver = Pb._address(buf.decBytes());\\n            } else if (tag == 3) {\\n                m.amount = Pb._uint256(buf.decBytes());\\n            } else if (tag == 4) {\\n                m.burnAccount = Pb._address(buf.decBytes());\\n            } else if (tag == 5) {\\n                m.refChainId = uint64(buf.decVarint());\\n            } else if (tag == 6) {\\n                m.refId = Pb._bytes32(buf.decBytes());\\n            } else {\\n                buf.skipValue(wire);\\n            } // skip value of unknown tag\\n        }\\n    } // end decoder Withdraw\\n}\\n\",\"keccak256\":\"0xe58dcfc1f75da74e214f99765086946f8ef007d5d0baafe736ac1f72b0604cd5\",\"license\":\"GPL-3.0-only\"},\"contracts/libraries/PbPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// Code generated by protoc-gen-sol. DO NOT EDIT.\\n// source: contracts/libraries/proto/pool.proto\\npragma solidity 0.8.9;\\nimport \\\"./Pb.sol\\\";\\n\\nlibrary PbPool {\\n    using Pb for Pb.Buffer; // so we can call Pb funcs on Buffer obj\\n\\n    struct WithdrawMsg {\\n        uint64 chainid; // tag: 1\\n        uint64 seqnum; // tag: 2\\n        address receiver; // tag: 3\\n        address token; // tag: 4\\n        uint256 amount; // tag: 5\\n        bytes32 refid; // tag: 6\\n    } // end struct WithdrawMsg\\n\\n    function decWithdrawMsg(bytes memory raw) internal pure returns (WithdrawMsg memory m) {\\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\\n\\n        uint256 tag;\\n        Pb.WireType wire;\\n        while (buf.hasMore()) {\\n            (tag, wire) = buf.decKey();\\n            if (false) {}\\n            // solidity has no switch/case\\n            else if (tag == 1) {\\n                m.chainid = uint64(buf.decVarint());\\n            } else if (tag == 2) {\\n                m.seqnum = uint64(buf.decVarint());\\n            } else if (tag == 3) {\\n                m.receiver = Pb._address(buf.decBytes());\\n            } else if (tag == 4) {\\n                m.token = Pb._address(buf.decBytes());\\n            } else if (tag == 5) {\\n                m.amount = Pb._uint256(buf.decBytes());\\n            } else if (tag == 6) {\\n                m.refid = Pb._bytes32(buf.decBytes());\\n            } else {\\n                buf.skipValue(wire);\\n            } // skip value of unknown tag\\n        }\\n    } // end decoder WithdrawMsg\\n}\\n\",\"keccak256\":\"0x7efd38eaa0f2d7a1ed9070e7bc940ecd041c59f5c48aba26174c46f99991f63d\",\"license\":\"GPL-3.0-only\"},\"contracts/proxy/TransferAgent.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"../libraries/BridgeTransferLib.sol\\\";\\nimport \\\"../safeguard/Ownable.sol\\\";\\n\\n/**\\n * @title Transfer agent. Designed to support arbitrary length receiver address for transfer. Supports the liquidity pool-based {Bridge}, the {OriginalTokenVault} for pegged\\n * deposit and the {PeggedTokenBridge} for pegged burn.\\n */\\ncontract TransferAgent is ReentrancyGuard, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    struct Extension {\\n        uint8 Type;\\n        bytes Value;\\n    }\\n\\n    mapping(BridgeTransferLib.BridgeSendType => address) public bridges;\\n\\n    event Supplement(\\n        BridgeTransferLib.BridgeSendType bridgeSendType,\\n        bytes32 transferId,\\n        address sender,\\n        bytes receiver,\\n        Extension[] extensions\\n    );\\n    event BridgeUpdated(BridgeTransferLib.BridgeSendType bridgeSendType, address bridgeAddr);\\n\\n    /**\\n     * @notice Send a cross-chain transfer of ERC20 token either via liquidity pool-based bridge or in form of mint/burn.\\n     * @param _receiver The address of the receiver.\\n     * @param _token The address of the token.\\n     * @param _amount The amount of the transfer.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\\n     *        Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least\\n     *        (100% - max slippage percentage) * amount or the transfer can be refunded.\\n     *        Only applicable to the {BridgeSendType.Liquidity}.\\n     * @param _bridgeSendType The type of bridge used by this transfer. One of the {BridgeSendType} enum.\\n     * @param _extensions A list of extension to be processed by agent, is designed to be used for extending\\n     *        present transfer. Contact Celer team to learn about already supported type of extension.\\n     */\\n    function transfer(\\n        bytes calldata _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage, // slippage * 1M, eg. 0.5% -> 5000\\n        BridgeTransferLib.BridgeSendType _bridgeSendType,\\n        Extension[] calldata _extensions\\n    ) external nonReentrant returns (bytes32) {\\n        bytes32 transferId;\\n        {\\n            address _bridgeAddr = bridges[_bridgeSendType];\\n            require(_bridgeAddr != address(0), \\\"unknown bridge type\\\");\\n            IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n            transferId = BridgeTransferLib.sendTransfer(\\n                address(0),\\n                _token,\\n                _amount,\\n                _dstChainId,\\n                _nonce,\\n                _maxSlippage,\\n                _bridgeSendType,\\n                _bridgeAddr\\n            );\\n        }\\n        emit Supplement(_bridgeSendType, transferId, msg.sender, _receiver, _extensions);\\n        return transferId;\\n    }\\n\\n    /**\\n     * @notice Send a cross-chain transfer of native token either via liquidity pool-based bridge or in form of mint/burn.\\n     * @param _receiver The address of the receiver.\\n     * @param _amount The amount of the transfer.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\\n     *        Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least\\n     *        (100% - max slippage percentage) * amount or the transfer can be refunded.\\n     *        Only applicable to the {BridgeSendType.Liquidity}.\\n     * @param _bridgeSendType The type of bridge used by this transfer. One of the {BridgeSendType} enum.\\n     * @param _extensions A list of extension to be processed by agent, is designed to be used for extending\\n     *        present transfer. Contact Celer team to learn about already supported type of extension.\\n     */\\n    function transferNative(\\n        bytes calldata _receiver,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage, // slippage * 1M, eg. 0.5% -> 5000\\n        BridgeTransferLib.BridgeSendType _bridgeSendType,\\n        Extension[] calldata _extensions\\n    ) external payable nonReentrant returns (bytes32) {\\n        bytes32 transferId;\\n        {\\n            address _bridgeAddr = bridges[_bridgeSendType];\\n            require(_bridgeAddr != address(0), \\\"unknown bridge type\\\");\\n            require(msg.value == _amount, \\\"amount mismatch\\\");\\n            transferId = BridgeTransferLib.sendNativeTransfer(\\n                address(0),\\n                _amount,\\n                _dstChainId,\\n                _nonce,\\n                _maxSlippage,\\n                _bridgeSendType,\\n                _bridgeAddr\\n            );\\n        }\\n        emit Supplement(_bridgeSendType, transferId, msg.sender, _receiver, _extensions);\\n        return transferId;\\n    }\\n\\n    // ----------------------Admin operation-----------------------\\n\\n    function setBridgeAddress(BridgeTransferLib.BridgeSendType _bridgeSendType, address _addr) public onlyOwner {\\n        require(_addr != address(0), \\\"invalid address\\\");\\n        bridges[_bridgeSendType] = _addr;\\n        emit BridgeUpdated(_bridgeSendType, _addr);\\n    }\\n}\\n\",\"keccak256\":\"0x317bfba6afd117afaa48e9e8fc639d32472deb4da62c44a3392e709f78c5ff1d\",\"license\":\"GPL-3.0-only\"},\"contracts/safeguard/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n *\\n * This adds a normal func that setOwner if _owner is address(0). So we can't allow\\n * renounceOwnership. So we can support Proxy based upgradable contract\\n */\\nabstract contract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Only to be called by inherit contracts, in their init func called by Proxy\\n     * we require _owner == address(0), which is only possible when it's a delegateCall\\n     * because constructor sets _owner in contract state.\\n     */\\n    function initOwner() internal {\\n        require(_owner == address(0), \\\"owner already set\\\");\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x2a92103195b8dce0f34fdf9bf7f94ddf38bf8edf0c0fd4be21323c47016687e9\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600160005561001f33610024565b610076565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611b97806100856000396000f3fe6080604052600436106100655760003560e01c80638da5cb5b116100435780638da5cb5b1461010d578063c5d8ac7e1461012b578063f2fde38b1461013e57600080fd5b806339b0070c1461006a57806365d67c331461009d5780636701d514146100eb575b600080fd5b34801561007657600080fd5b5061008a6100853660046116d2565b61015e565b6040519081526020015b60405180910390f35b3480156100a957600080fd5b506100d36100b83660046117a7565b6002602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610094565b3480156100f757600080fd5b5061010b6101063660046117c2565b6102cf565b005b34801561011957600080fd5b506001546001600160a01b03166100d3565b61008a6101393660046117f9565b610425565b34801561014a57600080fd5b5061010b6101593660046118ba565b6105c9565b6000600260005414156101b85760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60026000818155908190818760068111156101d5576101d56118d7565b60068111156101e6576101e66118d7565b81526020810191909152604001600020546001600160a01b031690508061024f5760405162461bcd60e51b815260206004820152601360248201527f756e6b6e6f776e2062726964676520747970650000000000000000000000000060448201526064016101af565b6102646001600160a01b038c1633308d6106ba565b61027560008c8c8c8c8c8c88610758565b9150507f3f2b4c063a18045940932b9fba423a72e3b8d36e63ca462720d880f7b64504ca8582338f8f89896040516102b39796959493929190611938565b60405180910390a160016000559b9a5050505050505050505050565b336102e26001546001600160a01b031690565b6001600160a01b0316146103385760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101af565b6001600160a01b03811661038e5760405162461bcd60e51b815260206004820152600f60248201527f696e76616c69642061646472657373000000000000000000000000000000000060448201526064016101af565b80600260008460068111156103a5576103a56118d7565b60068111156103b6576103b66118d7565b815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055507fe85507dd8a6159a69bf9f4aa5ae1283824ec9948b7d4a03d5cb457070f312dfc8282604051610419929190611a44565b60405180910390a15050565b60006002600054141561047a5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016101af565b6002600081815590819081876006811115610497576104976118d7565b60068111156104a8576104a86118d7565b81526020810191909152604001600020546001600160a01b03169050806105115760405162461bcd60e51b815260206004820152601360248201527f756e6b6e6f776e2062726964676520747970650000000000000000000000000060448201526064016101af565b8934146105605760405162461bcd60e51b815260206004820152600f60248201527f616d6f756e74206d69736d61746368000000000000000000000000000000000060448201526064016101af565b61057060008b8b8b8b8b87610d3b565b9150507f3f2b4c063a18045940932b9fba423a72e3b8d36e63ca462720d880f7b64504ca8582338e8e89896040516105ae9796959493929190611938565b60405180910390a160016000559a9950505050505050505050565b336105dc6001546001600160a01b031690565b6001600160a01b0316146106325760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101af565b6001600160a01b0381166106ae5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016101af565b6106b781611115565b50565b6040516001600160a01b03808516602483015283166044820152606481018290526107529085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261117f565b50505050565b60008061076f6001600160a01b038a16848a611269565b6001846006811115610783576107836118d7565b141561089e5760405163a5977fbb60e01b81526001600160a01b038b811660048301528a81166024830152604482018a905267ffffffffffffffff808a1660648401528816608483015263ffffffff871660a483015284169063a5977fbb9060c401600060405180830381600087803b1580156107ff57600080fd5b505af1158015610813573d6000803e3d6000fd5b50506040516bffffffffffffffffffffffff1930606090811b821660208401528e811b821660348401528d901b166048820152605c81018b90526001600160c01b031960c08b811b8216607c8401528a811b8216608484015246901b16608c82015260940191506108819050565b604051602081830303815290604052805190602001209050610d2e565b60028460068111156108b2576108b26118d7565b14156109b8576040516308d18d8960e21b81526001600160a01b038a81166004830152602482018a905267ffffffffffffffff808a1660448401528c821660648401528816608483015284169063234636249060a401600060405180830381600087803b15801561092257600080fd5b505af1158015610936573d6000803e3d6000fd5b50505050308989898d8a466040516020016108819796959493929190606097881b6bffffffffffffffffffffffff19908116825296881b87166014820152602881019590955260c093841b6001600160c01b031990811660488701529290961b909416605084015292811b831660648301529290921b16606c82015260740190565b60038460068111156109cc576109cc6118d7565b1415610ae057604051636f3c863f60e11b81526001600160a01b038a81166004830152602482018a90528b8116604483015267ffffffffffffffff8816606483015284169063de790c7e90608401600060405180830381600087803b158015610a3457600080fd5b505af1158015610a48573d6000803e3d6000fd5b50506040516bffffffffffffffffffffffff1930606090811b821660208401528d811b82166034840152604883018d90528e901b1660688201526001600160c01b031960c08a811b8216607c84015246901b166084820152608c019150610aac9050565b60408051601f1981840301815291905280516020909101209050610adb6001600160a01b038a1684600061132a565b610d2e565b6004846006811115610af457610af46118d7565b1415610ba3576040516308d18d8960e21b81526001600160a01b038a81166004830152602482018a905267ffffffffffffffff808a1660448401528c821660648401528816608483015284169063234636249060a401602060405180830381600087803b158015610b6457600080fd5b505af1158015610b78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9c9190611a68565b9050610d2e565b6005846006811115610bb757610bb76118d7565b1415610c775760405163a002930160e01b81526001600160a01b038a81166004830152602482018a905267ffffffffffffffff808a1660448401528c821660648401528816608483015284169063a00293019060a4015b602060405180830381600087803b158015610c2857600080fd5b505af1158015610c3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c609190611a68565b9050610adb6001600160a01b038a1684600061132a565b6006846006811115610c8b57610c8b6118d7565b1415610ce657604051639e422c3360e01b81526001600160a01b038a81166004830152602482018a905267ffffffffffffffff808a1660448401528c8216606484015288166084830152841690639e422c339060a401610c0e565b60405162461bcd60e51b815260206004820152601e60248201527f6272696467652073656e642074797065206e6f7420737570706f72746564000060448201526064016101af565b9998505050505050505050565b60006001836006811115610d5157610d516118d7565b1480610d6e57506002836006811115610d6c57610d6c6118d7565b145b80610d8a57506004836006811115610d8857610d886118d7565b145b610dd65760405162461bcd60e51b815260206004820152601d60248201527f4c69623a20696e76616c6964206272696467652073656e64207479706500000060448201526064016101af565b6000826001600160a01b031663457bfa2f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e1157600080fd5b505afa158015610e25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e499190611a81565b905060006001856006811115610e6157610e616118d7565b1415610f5957604051633f2e5fc360e01b81526001600160a01b038b81166004830152602482018b905267ffffffffffffffff808b1660448401528916606483015263ffffffff88166084830152851690633f2e5fc390349060a4016000604051808303818588803b158015610ed657600080fd5b505af1158015610eea573d6000803e3d6000fd5b50506040516bffffffffffffffffffffffff1930606090811b821660208401528f811b8216603484015287901b166048820152605c81018d90526001600160c01b031960c08d811b8216607c8401528c811b8216608484015246901b16608c8201526094019250610881915050565b6002856006811115610f6d57610f6d6118d7565b141561106c5760405162a95fd760e01b8152600481018a905267ffffffffffffffff808a1660248301526001600160a01b038c81166044840152908916606483015285169062a95fd79034906084016000604051808303818588803b158015610fd557600080fd5b505af1158015610fe9573d6000803e3d6000fd5b505050505030828a8a8d8b466040516020016108819796959493929190606097881b6bffffffffffffffffffffffff19908116825296881b87166014820152602881019590955260c093841b6001600160c01b031990811660488701529290961b909416605084015292811b831660648301529290921b16606c82015260740190565b60405162a95fd760e01b8152600481018a905267ffffffffffffffff808a1660248301526001600160a01b038c81166044840152908916606483015285169062a95fd79034906084016020604051808303818588803b1580156110ce57600080fd5b505af11580156110e2573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906111079190611a68565b9a9950505050505050505050565b600180546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006111d4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166114559092919063ffffffff16565b80519091501561126457808060200190518101906111f29190611a9e565b6112645760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016101af565b505050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b1580156112b557600080fd5b505afa1580156112c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ed9190611a68565b6112f79190611ac0565b6040516001600160a01b03851660248201526044810182905290915061075290859063095ea7b360e01b906064016106ee565b8015806113b35750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561137957600080fd5b505afa15801561138d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b19190611a68565b155b6114255760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084016101af565b6040516001600160a01b03831660248201526044810182905261126490849063095ea7b360e01b906064016106ee565b6060611464848460008561146e565b90505b9392505050565b6060824710156114e65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016101af565b6001600160a01b0385163b61153d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101af565b600080866001600160a01b031685876040516115599190611b12565b60006040518083038185875af1925050503d8060008114611596576040519150601f19603f3d011682016040523d82523d6000602084013e61159b565b606091505b50915091506115ab8282866115b6565b979650505050505050565b606083156115c5575081611467565b8251156115d55782518084602001fd5b8160405162461bcd60e51b81526004016101af9190611b2e565b60008083601f84011261160157600080fd5b50813567ffffffffffffffff81111561161957600080fd5b60208301915083602082850101111561163157600080fd5b9250929050565b6001600160a01b03811681146106b757600080fd5b803567ffffffffffffffff8116811461166557600080fd5b919050565b803563ffffffff8116811461166557600080fd5b80356007811061166557600080fd5b60008083601f84011261169f57600080fd5b50813567ffffffffffffffff8111156116b757600080fd5b6020830191508360208260051b850101111561163157600080fd5b6000806000806000806000806000806101008b8d0312156116f257600080fd5b8a3567ffffffffffffffff8082111561170a57600080fd5b6117168e838f016115ef565b909c509a5060208d0135915061172b82611638565b81995060408d0135985061174160608e0161164d565b975061174f60808e0161164d565b965061175d60a08e0161166a565b955061176b60c08e0161167e565b945060e08d013591508082111561178157600080fd5b5061178e8d828e0161168d565b915080935050809150509295989b9194979a5092959850565b6000602082840312156117b957600080fd5b6114678261167e565b600080604083850312156117d557600080fd5b6117de8361167e565b915060208301356117ee81611638565b809150509250929050565b600080600080600080600080600060e08a8c03121561181757600080fd5b893567ffffffffffffffff8082111561182f57600080fd5b61183b8d838e016115ef565b909b50995060208c0135985089915061185660408d0161164d565b975061186460608d0161164d565b965061187260808d0161166a565b955061188060a08d0161167e565b945060c08c013591508082111561189657600080fd5b506118a38c828d0161168d565b915080935050809150509295985092959850929598565b6000602082840312156118cc57600080fd5b813561146781611638565b634e487b7160e01b600052602160045260246000fd5b6007811061190b57634e487b7160e01b600052602160045260246000fd5b9052565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b61194281896118ed565b60006020888184015260406001600160a01b0389168185015260a0606085015261197060a08501888a61190f565b8481036080860152858152828101600587901b820184018860005b89811015611a3057848303601f190184528135368c9003603e190181126119b157600080fd5b8b01803560ff81168082146119c557600080fd5b8552508088013536829003601e190181126119df57600080fd5b8101803567ffffffffffffffff8111156119f857600080fd5b803603831315611a0757600080fd5b888a870152611a1b898701828c850161190f565b968a019695505050918701915060010161198b565b50909e9d5050505050505050505050505050565b60408101611a5282856118ed565b6001600160a01b03831660208301529392505050565b600060208284031215611a7a57600080fd5b5051919050565b600060208284031215611a9357600080fd5b815161146781611638565b600060208284031215611ab057600080fd5b8151801515811461146757600080fd5b60008219821115611ae157634e487b7160e01b600052601160045260246000fd5b500190565b60005b83811015611b01578181015183820152602001611ae9565b838111156107525750506000910152565b60008251611b24818460208701611ae6565b9190910192915050565b6020815260008251806020840152611b4d816040850160208701611ae6565b601f01601f1916919091016040019291505056fea2646970667358221220561fe3475257c3c94d9125e0e6e7679cfe936272130de55c816a352cb0f7609264736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106100655760003560e01c80638da5cb5b116100435780638da5cb5b1461010d578063c5d8ac7e1461012b578063f2fde38b1461013e57600080fd5b806339b0070c1461006a57806365d67c331461009d5780636701d514146100eb575b600080fd5b34801561007657600080fd5b5061008a6100853660046116d2565b61015e565b6040519081526020015b60405180910390f35b3480156100a957600080fd5b506100d36100b83660046117a7565b6002602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610094565b3480156100f757600080fd5b5061010b6101063660046117c2565b6102cf565b005b34801561011957600080fd5b506001546001600160a01b03166100d3565b61008a6101393660046117f9565b610425565b34801561014a57600080fd5b5061010b6101593660046118ba565b6105c9565b6000600260005414156101b85760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60026000818155908190818760068111156101d5576101d56118d7565b60068111156101e6576101e66118d7565b81526020810191909152604001600020546001600160a01b031690508061024f5760405162461bcd60e51b815260206004820152601360248201527f756e6b6e6f776e2062726964676520747970650000000000000000000000000060448201526064016101af565b6102646001600160a01b038c1633308d6106ba565b61027560008c8c8c8c8c8c88610758565b9150507f3f2b4c063a18045940932b9fba423a72e3b8d36e63ca462720d880f7b64504ca8582338f8f89896040516102b39796959493929190611938565b60405180910390a160016000559b9a5050505050505050505050565b336102e26001546001600160a01b031690565b6001600160a01b0316146103385760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101af565b6001600160a01b03811661038e5760405162461bcd60e51b815260206004820152600f60248201527f696e76616c69642061646472657373000000000000000000000000000000000060448201526064016101af565b80600260008460068111156103a5576103a56118d7565b60068111156103b6576103b66118d7565b815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055507fe85507dd8a6159a69bf9f4aa5ae1283824ec9948b7d4a03d5cb457070f312dfc8282604051610419929190611a44565b60405180910390a15050565b60006002600054141561047a5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016101af565b6002600081815590819081876006811115610497576104976118d7565b60068111156104a8576104a86118d7565b81526020810191909152604001600020546001600160a01b03169050806105115760405162461bcd60e51b815260206004820152601360248201527f756e6b6e6f776e2062726964676520747970650000000000000000000000000060448201526064016101af565b8934146105605760405162461bcd60e51b815260206004820152600f60248201527f616d6f756e74206d69736d61746368000000000000000000000000000000000060448201526064016101af565b61057060008b8b8b8b8b87610d3b565b9150507f3f2b4c063a18045940932b9fba423a72e3b8d36e63ca462720d880f7b64504ca8582338e8e89896040516105ae9796959493929190611938565b60405180910390a160016000559a9950505050505050505050565b336105dc6001546001600160a01b031690565b6001600160a01b0316146106325760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101af565b6001600160a01b0381166106ae5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016101af565b6106b781611115565b50565b6040516001600160a01b03808516602483015283166044820152606481018290526107529085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261117f565b50505050565b60008061076f6001600160a01b038a16848a611269565b6001846006811115610783576107836118d7565b141561089e5760405163a5977fbb60e01b81526001600160a01b038b811660048301528a81166024830152604482018a905267ffffffffffffffff808a1660648401528816608483015263ffffffff871660a483015284169063a5977fbb9060c401600060405180830381600087803b1580156107ff57600080fd5b505af1158015610813573d6000803e3d6000fd5b50506040516bffffffffffffffffffffffff1930606090811b821660208401528e811b821660348401528d901b166048820152605c81018b90526001600160c01b031960c08b811b8216607c8401528a811b8216608484015246901b16608c82015260940191506108819050565b604051602081830303815290604052805190602001209050610d2e565b60028460068111156108b2576108b26118d7565b14156109b8576040516308d18d8960e21b81526001600160a01b038a81166004830152602482018a905267ffffffffffffffff808a1660448401528c821660648401528816608483015284169063234636249060a401600060405180830381600087803b15801561092257600080fd5b505af1158015610936573d6000803e3d6000fd5b50505050308989898d8a466040516020016108819796959493929190606097881b6bffffffffffffffffffffffff19908116825296881b87166014820152602881019590955260c093841b6001600160c01b031990811660488701529290961b909416605084015292811b831660648301529290921b16606c82015260740190565b60038460068111156109cc576109cc6118d7565b1415610ae057604051636f3c863f60e11b81526001600160a01b038a81166004830152602482018a90528b8116604483015267ffffffffffffffff8816606483015284169063de790c7e90608401600060405180830381600087803b158015610a3457600080fd5b505af1158015610a48573d6000803e3d6000fd5b50506040516bffffffffffffffffffffffff1930606090811b821660208401528d811b82166034840152604883018d90528e901b1660688201526001600160c01b031960c08a811b8216607c84015246901b166084820152608c019150610aac9050565b60408051601f1981840301815291905280516020909101209050610adb6001600160a01b038a1684600061132a565b610d2e565b6004846006811115610af457610af46118d7565b1415610ba3576040516308d18d8960e21b81526001600160a01b038a81166004830152602482018a905267ffffffffffffffff808a1660448401528c821660648401528816608483015284169063234636249060a401602060405180830381600087803b158015610b6457600080fd5b505af1158015610b78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9c9190611a68565b9050610d2e565b6005846006811115610bb757610bb76118d7565b1415610c775760405163a002930160e01b81526001600160a01b038a81166004830152602482018a905267ffffffffffffffff808a1660448401528c821660648401528816608483015284169063a00293019060a4015b602060405180830381600087803b158015610c2857600080fd5b505af1158015610c3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c609190611a68565b9050610adb6001600160a01b038a1684600061132a565b6006846006811115610c8b57610c8b6118d7565b1415610ce657604051639e422c3360e01b81526001600160a01b038a81166004830152602482018a905267ffffffffffffffff808a1660448401528c8216606484015288166084830152841690639e422c339060a401610c0e565b60405162461bcd60e51b815260206004820152601e60248201527f6272696467652073656e642074797065206e6f7420737570706f72746564000060448201526064016101af565b9998505050505050505050565b60006001836006811115610d5157610d516118d7565b1480610d6e57506002836006811115610d6c57610d6c6118d7565b145b80610d8a57506004836006811115610d8857610d886118d7565b145b610dd65760405162461bcd60e51b815260206004820152601d60248201527f4c69623a20696e76616c6964206272696467652073656e64207479706500000060448201526064016101af565b6000826001600160a01b031663457bfa2f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e1157600080fd5b505afa158015610e25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e499190611a81565b905060006001856006811115610e6157610e616118d7565b1415610f5957604051633f2e5fc360e01b81526001600160a01b038b81166004830152602482018b905267ffffffffffffffff808b1660448401528916606483015263ffffffff88166084830152851690633f2e5fc390349060a4016000604051808303818588803b158015610ed657600080fd5b505af1158015610eea573d6000803e3d6000fd5b50506040516bffffffffffffffffffffffff1930606090811b821660208401528f811b8216603484015287901b166048820152605c81018d90526001600160c01b031960c08d811b8216607c8401528c811b8216608484015246901b16608c8201526094019250610881915050565b6002856006811115610f6d57610f6d6118d7565b141561106c5760405162a95fd760e01b8152600481018a905267ffffffffffffffff808a1660248301526001600160a01b038c81166044840152908916606483015285169062a95fd79034906084016000604051808303818588803b158015610fd557600080fd5b505af1158015610fe9573d6000803e3d6000fd5b505050505030828a8a8d8b466040516020016108819796959493929190606097881b6bffffffffffffffffffffffff19908116825296881b87166014820152602881019590955260c093841b6001600160c01b031990811660488701529290961b909416605084015292811b831660648301529290921b16606c82015260740190565b60405162a95fd760e01b8152600481018a905267ffffffffffffffff808a1660248301526001600160a01b038c81166044840152908916606483015285169062a95fd79034906084016020604051808303818588803b1580156110ce57600080fd5b505af11580156110e2573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906111079190611a68565b9a9950505050505050505050565b600180546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006111d4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166114559092919063ffffffff16565b80519091501561126457808060200190518101906111f29190611a9e565b6112645760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016101af565b505050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b1580156112b557600080fd5b505afa1580156112c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ed9190611a68565b6112f79190611ac0565b6040516001600160a01b03851660248201526044810182905290915061075290859063095ea7b360e01b906064016106ee565b8015806113b35750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561137957600080fd5b505afa15801561138d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b19190611a68565b155b6114255760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084016101af565b6040516001600160a01b03831660248201526044810182905261126490849063095ea7b360e01b906064016106ee565b6060611464848460008561146e565b90505b9392505050565b6060824710156114e65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016101af565b6001600160a01b0385163b61153d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101af565b600080866001600160a01b031685876040516115599190611b12565b60006040518083038185875af1925050503d8060008114611596576040519150601f19603f3d011682016040523d82523d6000602084013e61159b565b606091505b50915091506115ab8282866115b6565b979650505050505050565b606083156115c5575081611467565b8251156115d55782518084602001fd5b8160405162461bcd60e51b81526004016101af9190611b2e565b60008083601f84011261160157600080fd5b50813567ffffffffffffffff81111561161957600080fd5b60208301915083602082850101111561163157600080fd5b9250929050565b6001600160a01b03811681146106b757600080fd5b803567ffffffffffffffff8116811461166557600080fd5b919050565b803563ffffffff8116811461166557600080fd5b80356007811061166557600080fd5b60008083601f84011261169f57600080fd5b50813567ffffffffffffffff8111156116b757600080fd5b6020830191508360208260051b850101111561163157600080fd5b6000806000806000806000806000806101008b8d0312156116f257600080fd5b8a3567ffffffffffffffff8082111561170a57600080fd5b6117168e838f016115ef565b909c509a5060208d0135915061172b82611638565b81995060408d0135985061174160608e0161164d565b975061174f60808e0161164d565b965061175d60a08e0161166a565b955061176b60c08e0161167e565b945060e08d013591508082111561178157600080fd5b5061178e8d828e0161168d565b915080935050809150509295989b9194979a5092959850565b6000602082840312156117b957600080fd5b6114678261167e565b600080604083850312156117d557600080fd5b6117de8361167e565b915060208301356117ee81611638565b809150509250929050565b600080600080600080600080600060e08a8c03121561181757600080fd5b893567ffffffffffffffff8082111561182f57600080fd5b61183b8d838e016115ef565b909b50995060208c0135985089915061185660408d0161164d565b975061186460608d0161164d565b965061187260808d0161166a565b955061188060a08d0161167e565b945060c08c013591508082111561189657600080fd5b506118a38c828d0161168d565b915080935050809150509295985092959850929598565b6000602082840312156118cc57600080fd5b813561146781611638565b634e487b7160e01b600052602160045260246000fd5b6007811061190b57634e487b7160e01b600052602160045260246000fd5b9052565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b61194281896118ed565b60006020888184015260406001600160a01b0389168185015260a0606085015261197060a08501888a61190f565b8481036080860152858152828101600587901b820184018860005b89811015611a3057848303601f190184528135368c9003603e190181126119b157600080fd5b8b01803560ff81168082146119c557600080fd5b8552508088013536829003601e190181126119df57600080fd5b8101803567ffffffffffffffff8111156119f857600080fd5b803603831315611a0757600080fd5b888a870152611a1b898701828c850161190f565b968a019695505050918701915060010161198b565b50909e9d5050505050505050505050505050565b60408101611a5282856118ed565b6001600160a01b03831660208301529392505050565b600060208284031215611a7a57600080fd5b5051919050565b600060208284031215611a9357600080fd5b815161146781611638565b600060208284031215611ab057600080fd5b8151801515811461146757600080fd5b60008219821115611ae157634e487b7160e01b600052601160045260246000fd5b500190565b60005b83811015611b01578181015183820152602001611ae9565b838111156107525750506000910152565b60008251611b24818460208701611ae6565b9190910192915050565b6020815260008251806020840152611b4d816040850160208701611ae6565b601f01601f1916919091016040019291505056fea2646970667358221220561fe3475257c3c94d9125e0e6e7679cfe936272130de55c816a352cb0f7609264736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "transfer(bytes,address,uint256,uint64,uint64,uint32,uint8,(uint8,bytes)[])": {
        "params": {
          "_amount": "The amount of the transfer.",
          "_bridgeSendType": "The type of bridge used by this transfer. One of the {BridgeSendType} enum.",
          "_dstChainId": "The destination chain ID.",
          "_extensions": "A list of extension to be processed by agent, is designed to be used for extending        present transfer. Contact Celer team to learn about already supported type of extension.",
          "_maxSlippage": "The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.        Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least        (100% - max slippage percentage) * amount or the transfer can be refunded.        Only applicable to the {BridgeSendType.Liquidity}.",
          "_nonce": "A number input to guarantee uniqueness of transferId. Can be timestamp in practice.",
          "_receiver": "The address of the receiver.",
          "_token": "The address of the token."
        }
      },
      "transferNative(bytes,uint256,uint64,uint64,uint32,uint8,(uint8,bytes)[])": {
        "params": {
          "_amount": "The amount of the transfer.",
          "_bridgeSendType": "The type of bridge used by this transfer. One of the {BridgeSendType} enum.",
          "_dstChainId": "The destination chain ID.",
          "_extensions": "A list of extension to be processed by agent, is designed to be used for extending        present transfer. Contact Celer team to learn about already supported type of extension.",
          "_maxSlippage": "The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.        Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least        (100% - max slippage percentage) * amount or the transfer can be refunded.        Only applicable to the {BridgeSendType.Liquidity}.",
          "_nonce": "A number input to guarantee uniqueness of transferId. Can be timestamp in practice.",
          "_receiver": "The address of the receiver."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Transfer agent. Designed to support arbitrary length receiver address for transfer. Supports the liquidity pool-based {Bridge}, the {OriginalTokenVault} for pegged deposit and the {PeggedTokenBridge} for pegged burn.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "transfer(bytes,address,uint256,uint64,uint64,uint32,uint8,(uint8,bytes)[])": {
        "notice": "Send a cross-chain transfer of ERC20 token either via liquidity pool-based bridge or in form of mint/burn."
      },
      "transferNative(bytes,uint256,uint64,uint64,uint32,uint8,(uint8,bytes)[])": {
        "notice": "Send a cross-chain transfer of native token either via liquidity pool-based bridge or in form of mint/burn."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 207,
        "contract": "contracts/proxy/TransferAgent.sol:TransferAgent",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 28309,
        "contract": "contracts/proxy/TransferAgent.sol:TransferAgent",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 27739,
        "contract": "contracts/proxy/TransferAgent.sol:TransferAgent",
        "label": "bridges",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_enum(BridgeSendType)7981,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_enum(BridgeSendType)7981": {
        "encoding": "inplace",
        "label": "enum BridgeTransferLib.BridgeSendType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_enum(BridgeSendType)7981,t_address)": {
        "encoding": "mapping",
        "key": "t_enum(BridgeSendType)7981",
        "label": "mapping(enum BridgeTransferLib.BridgeSendType => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}