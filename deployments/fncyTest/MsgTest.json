{
  "address": "0x2c2E3812742Ab2DA53a728A09F5DE670Aba584b6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_messageBus",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "sender",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "srcChainId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "Message2Received",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "messageBus",
          "type": "address"
        }
      ],
      "name": "MessageBusUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "srcChainId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "MessageReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "srcChainId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "MessageReceivedWithTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "Refunded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "drainToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_sender",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_srcChainId",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "executeMessage",
      "outputs": [
        {
          "internalType": "enum IMessageReceiverApp.ExecutionStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_srcChainId",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "executeMessage",
      "outputs": [
        {
          "internalType": "enum IMessageReceiverApp.ExecutionStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_srcChainId",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "executeMessageWithTransfer",
      "outputs": [
        {
          "internalType": "enum IMessageReceiverApp.ExecutionStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_srcChainId",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        }
      ],
      "name": "executeMessageWithTransferFallback",
      "outputs": [
        {
          "internalType": "enum IMessageReceiverApp.ExecutionStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "executeMessageWithTransferRefund",
      "outputs": [
        {
          "internalType": "enum IMessageReceiverApp.ExecutionStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "messageBus",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_receiver",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_dstChainId",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "sendMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_dstChainId",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "sendMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_dstChainId",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        }
      ],
      "name": "sendMessageWithNonce",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_dstChainId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "_maxSlippage",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "enum MsgDataTypes.BridgeSendType",
          "name": "_bridgeSendType",
          "type": "uint8"
        }
      ],
      "name": "sendMessageWithTransfer",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_dstChainId",
          "type": "uint64"
        },
        {
          "internalType": "bytes[]",
          "name": "_messages",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_fees",
          "type": "uint256[]"
        }
      ],
      "name": "sendMessages",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_messageBus",
          "type": "address"
        }
      ],
      "name": "setMessageBus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfff78b30acd6514eb1861b9d2966ba193f51b86ca87ae9883c54d38fb2878010",
  "receipt": {
    "to": null,
    "from": "0x58b529F9084D7eAA598EB3477Fe36064C5B7bbC1",
    "contractAddress": "0x2c2E3812742Ab2DA53a728A09F5DE670Aba584b6",
    "transactionIndex": 0,
    "gasUsed": "2322672",
    "logsBloom": "0x
    "blockHash": "0xc934c8a1e13fad6cebace8ad64769511d80f443b08013de53bf3640bad948b69",
    "transactionHash": "0xfff78b30acd6514eb1861b9d2966ba193f51b86ca87ae9883c54d38fb2878010",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5787672,
        "transactionHash": "0xfff78b30acd6514eb1861b9d2966ba193f51b86ca87ae9883c54d38fb2878010",
        "address": "0x2c2E3812742Ab2DA53a728A09F5DE670Aba584b6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000058b529f9084d7eaa598eb3477fe36064c5b7bbc1"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xc934c8a1e13fad6cebace8ad64769511d80f443b08013de53bf3640bad948b69"
      }
    ],
    "blockNumber": 5787672,
    "cumulativeGasUsed": "2322672",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE48151964556381B33f93E05E36381Fd53Ec053E"
  ],
  "numDeployments": 1,
  "solcInputHash": "ffbdee6c682c61f546bf4e109278038d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_messageBus\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"srcChainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"Message2Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"messageBus\",\"type\":\"address\"}],\"name\":\"MessageBusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"srcChainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"MessageReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"srcChainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"MessageReceivedWithTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"drainToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_sender\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_srcChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"executeMessage\",\"outputs\":[{\"internalType\":\"enum IMessageReceiverApp.ExecutionStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_srcChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"executeMessage\",\"outputs\":[{\"internalType\":\"enum IMessageReceiverApp.ExecutionStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_srcChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"executeMessageWithTransfer\",\"outputs\":[{\"internalType\":\"enum IMessageReceiverApp.ExecutionStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_srcChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"executeMessageWithTransferFallback\",\"outputs\":[{\"internalType\":\"enum IMessageReceiverApp.ExecutionStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"executeMessageWithTransferRefund\",\"outputs\":[{\"internalType\":\"enum IMessageReceiverApp.ExecutionStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageBus\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_receiver\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"sendMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"sendMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"}],\"name\":\"sendMessageWithNonce\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"_maxSlippage\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"enum MsgDataTypes.BridgeSendType\",\"name\":\"_bridgeSendType\",\"type\":\"uint8\"}],\"name\":\"sendMessageWithTransfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes[]\",\"name\":\"_messages\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_fees\",\"type\":\"uint256[]\"}],\"name\":\"sendMessages\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_messageBus\",\"type\":\"address\"}],\"name\":\"setMessageBus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"executeMessageWithTransferFallback(address,address,uint256,uint64,bytes,address)\":{\"params\":{\"_amount\":\"The amount of tokens received at this contract through the cross-chain bridge.\",\"_executor\":\"Address who called the MessageBus execution function\",\"_message\":\"Arbitrary message bytes originated from and encoded by the source app contract\",\"_sender\":\"The address of the source app contract\",\"_srcChainId\":\"The source chain ID where the transfer is originated from\",\"_token\":\"The address of the token that comes out of the bridge\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Application to test message with transfer refund flow \",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"executeMessageWithTransferFallback(address,address,uint256,uint64,bytes,address)\":{\"notice\":\"Only called by MessageBus if         1. executeMessageWithTransfer reverts, or         2. executeMessageWithTransfer returns ExecutionStatus.Fail The contract is guaranteed to have received the right amount of tokens before this function is called.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/message/apps/examples/MsgTest.sol\":\"MsgTest\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/interfaces/IBridge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IBridge {\\n    function send(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage\\n    ) external;\\n\\n    function sendNative(\\n        address _receiver,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage\\n    ) external payable;\\n\\n    function relay(\\n        bytes calldata _relayRequest,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    function transfers(bytes32 transferId) external view returns (bool);\\n\\n    function withdraws(bytes32 withdrawId) external view returns (bool);\\n\\n    function withdraw(\\n        bytes calldata _wdmsg,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    /**\\n     * @notice Verifies that a message is signed by a quorum among the signers.\\n     * @param _msg signed message\\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\\n     * @param _signers sorted list of current signers\\n     * @param _powers powers of current signers\\n     */\\n    function verifySigs(\\n        bytes memory _msg,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external view;\\n}\\n\",\"keccak256\":\"0x4346cb21c9e841e59418826942364ff505e363b29887daeeff303cf31474fbf4\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IOriginalTokenVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IOriginalTokenVault {\\n    /**\\n     * @notice Lock original tokens to trigger mint at a remote chain's PeggedTokenBridge\\n     * @param _token local token address\\n     * @param _amount locked token amount\\n     * @param _mintChainId destination chainId to mint tokens\\n     * @param _mintAccount destination account to receive minted tokens\\n     * @param _nonce user input to guarantee unique depositId\\n     */\\n    function deposit(\\n        address _token,\\n        uint256 _amount,\\n        uint64 _mintChainId,\\n        address _mintAccount,\\n        uint64 _nonce\\n    ) external;\\n\\n    /**\\n     * @notice Lock native token as original token to trigger mint at a remote chain's PeggedTokenBridge\\n     * @param _amount locked token amount\\n     * @param _mintChainId destination chainId to mint tokens\\n     * @param _mintAccount destination account to receive minted tokens\\n     * @param _nonce user input to guarantee unique depositId\\n     */\\n    function depositNative(\\n        uint256 _amount,\\n        uint64 _mintChainId,\\n        address _mintAccount,\\n        uint64 _nonce\\n    ) external payable;\\n\\n    /**\\n     * @notice Withdraw locked original tokens triggered by a burn at a remote chain's PeggedTokenBridge.\\n     * @param _request The serialized Withdraw protobuf.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the bridge's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function withdraw(\\n        bytes calldata _request,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    function records(bytes32 recordId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa8a542d10c8a00966d3600baf8c83f012c276b9b71f3bbb79aad2d39969e5ac0\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IOriginalTokenVaultV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IOriginalTokenVaultV2 {\\n    /**\\n     * @notice Lock original tokens to trigger mint at a remote chain's PeggedTokenBridge\\n     * @param _token local token address\\n     * @param _amount locked token amount\\n     * @param _mintChainId destination chainId to mint tokens\\n     * @param _mintAccount destination account to receive minted tokens\\n     * @param _nonce user input to guarantee unique depositId\\n     */\\n    function deposit(\\n        address _token,\\n        uint256 _amount,\\n        uint64 _mintChainId,\\n        address _mintAccount,\\n        uint64 _nonce\\n    ) external returns (bytes32);\\n\\n    /**\\n     * @notice Lock native token as original token to trigger mint at a remote chain's PeggedTokenBridge\\n     * @param _amount locked token amount\\n     * @param _mintChainId destination chainId to mint tokens\\n     * @param _mintAccount destination account to receive minted tokens\\n     * @param _nonce user input to guarantee unique depositId\\n     */\\n    function depositNative(\\n        uint256 _amount,\\n        uint64 _mintChainId,\\n        address _mintAccount,\\n        uint64 _nonce\\n    ) external payable returns (bytes32);\\n\\n    /**\\n     * @notice Withdraw locked original tokens triggered by a burn at a remote chain's PeggedTokenBridge.\\n     * @param _request The serialized Withdraw protobuf.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the bridge's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function withdraw(\\n        bytes calldata _request,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external returns (bytes32);\\n\\n    function records(bytes32 recordId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4fb1c1505ba3e30dcd6800b9c130affa17853f793c696bcef2472e03f9d0f8b4\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IPeggedTokenBridge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IPeggedTokenBridge {\\n    /**\\n     * @notice Burn tokens to trigger withdrawal at a remote chain's OriginalTokenVault\\n     * @param _token local token address\\n     * @param _amount locked token amount\\n     * @param _withdrawAccount account who withdraw original tokens on the remote chain\\n     * @param _nonce user input to guarantee unique depositId\\n     */\\n    function burn(\\n        address _token,\\n        uint256 _amount,\\n        address _withdrawAccount,\\n        uint64 _nonce\\n    ) external;\\n\\n    /**\\n     * @notice Mint tokens triggered by deposit at a remote chain's OriginalTokenVault.\\n     * @param _request The serialized Mint protobuf.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function mint(\\n        bytes calldata _request,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    function records(bytes32 recordId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5adc3e5f1c8767c9f4580b499b16aba25f41934a2f945e9f0227b28d4b0405ae\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IPeggedTokenBridgeV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IPeggedTokenBridgeV2 {\\n    /**\\n     * @notice Burn pegged tokens to trigger a cross-chain withdrawal of the original tokens at a remote chain's\\n     * OriginalTokenVault, or mint at another remote chain\\n     * @param _token The pegged token address.\\n     * @param _amount The amount to burn.\\n     * @param _toChainId If zero, withdraw from original vault; otherwise, the remote chain to mint tokens.\\n     * @param _toAccount The account to receive tokens on the remote chain\\n     * @param _nonce A number to guarantee unique depositId. Can be timestamp in practice.\\n     */\\n    function burn(\\n        address _token,\\n        uint256 _amount,\\n        uint64 _toChainId,\\n        address _toAccount,\\n        uint64 _nonce\\n    ) external returns (bytes32);\\n\\n    // same with `burn` above, use openzeppelin ERC20Burnable interface\\n    function burnFrom(\\n        address _token,\\n        uint256 _amount,\\n        uint64 _toChainId,\\n        address _toAccount,\\n        uint64 _nonce\\n    ) external returns (bytes32);\\n\\n    /**\\n     * @notice Mint tokens triggered by deposit at a remote chain's OriginalTokenVault.\\n     * @param _request The serialized Mint protobuf.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function mint(\\n        bytes calldata _request,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external returns (bytes32);\\n\\n    function records(bytes32 recordId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xea5828630c131a1c7017360d4c1729c71bdeb5eaf366a30c9637c82795cea9d5\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/ISigsVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface ISigsVerifier {\\n    /**\\n     * @notice Verifies that a message is signed by a quorum among the signers.\\n     * @param _msg signed message\\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\\n     * @param _signers sorted list of current signers\\n     * @param _powers powers of current signers\\n     */\\n    function verifySigs(\\n        bytes memory _msg,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external view;\\n}\\n\",\"keccak256\":\"0x0d0b090d078a5f50ea7b751331614785e536fc09bcff28bfe08a60613ebca1ae\",\"license\":\"GPL-3.0-only\"},\"contracts/message/apps/examples/MsgTest.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../framework/MessageApp.sol\\\";\\n\\n/** @title Application to test message with transfer refund flow */\\ncontract MsgTest is MessageApp {\\n    using SafeERC20 for IERC20;\\n    uint64 nonce;\\n\\n    event MessageReceivedWithTransfer(\\n        address token,\\n        uint256 amount,\\n        address sender,\\n        uint64 srcChainId,\\n        address receiver,\\n        bytes message\\n    );\\n    event Refunded(address receiver, address token, uint256 amount, bytes message);\\n    event MessageReceived(address sender, uint64 srcChainId, uint64 nonce, bytes message);\\n    event Message2Received(bytes sender, uint64 srcChainId, uint64 nonce, bytes message);\\n\\n    constructor(address _messageBus) MessageApp(_messageBus) {}\\n\\n    function sendMessageWithTransfer(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint32 _maxSlippage,\\n        bytes calldata _message,\\n        MsgDataTypes.BridgeSendType _bridgeSendType\\n    ) external payable {\\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n        bytes memory message = abi.encode(msg.sender, _message);\\n        sendMessageWithTransfer(\\n            _receiver,\\n            _token,\\n            _amount,\\n            _dstChainId,\\n            nonce,\\n            _maxSlippage,\\n            message,\\n            _bridgeSendType,\\n            msg.value\\n        );\\n        nonce++;\\n    }\\n\\n    function executeMessageWithTransfer(\\n        address _sender,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _srcChainId,\\n        bytes memory _message,\\n        address // executor\\n    ) external payable override onlyMessageBus returns (ExecutionStatus) {\\n        (address receiver, bytes memory message) = abi.decode((_message), (address, bytes));\\n        IERC20(_token).safeTransfer(receiver, _amount);\\n        emit MessageReceivedWithTransfer(_token, _amount, _sender, _srcChainId, receiver, message);\\n        return ExecutionStatus.Success;\\n    }\\n\\n    function executeMessageWithTransferRefund(\\n        address _token,\\n        uint256 _amount,\\n        bytes calldata _message,\\n        address // executor\\n    ) external payable override onlyMessageBus returns (ExecutionStatus) {\\n        (address receiver, bytes memory message) = abi.decode((_message), (address, bytes));\\n        IERC20(_token).safeTransfer(receiver, _amount);\\n        emit Refunded(receiver, _token, _amount, message);\\n        return ExecutionStatus.Success;\\n    }\\n\\n    function sendMessage(\\n        address _receiver,\\n        uint64 _dstChainId,\\n        bytes calldata _message\\n    ) external payable {\\n        bytes memory message = abi.encode(nonce, _message);\\n        nonce++;\\n        sendMessage(_receiver, _dstChainId, message, msg.value);\\n    }\\n\\n    function sendMessage(\\n        bytes calldata _receiver,\\n        uint64 _dstChainId,\\n        bytes calldata _message\\n    ) external payable {\\n        bytes memory message = abi.encode(nonce, _message);\\n        nonce++;\\n        sendMessage(_receiver, _dstChainId, message, msg.value);\\n    }\\n\\n    function sendMessages(\\n        address _receiver,\\n        uint64 _dstChainId,\\n        bytes[] calldata _messages,\\n        uint256[] calldata _fees\\n    ) external payable {\\n        for (uint256 i = 0; i < _messages.length; i++) {\\n            bytes memory message = abi.encode(nonce, _messages[i]);\\n            nonce++;\\n            sendMessage(_receiver, _dstChainId, message, _fees[i]);\\n        }\\n    }\\n\\n    function sendMessageWithNonce(\\n        address _receiver,\\n        uint64 _dstChainId,\\n        bytes calldata _message,\\n        uint64 _nonce\\n    ) external payable {\\n        bytes memory message = abi.encode(_nonce, _message);\\n        sendMessage(_receiver, _dstChainId, message, msg.value);\\n    }\\n\\n    function executeMessage(\\n        address _sender,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address // executor\\n    ) external payable override onlyMessageBus returns (ExecutionStatus) {\\n        (uint64 n, bytes memory message) = abi.decode((_message), (uint64, bytes));\\n        require(n != 100000000000001, \\\"invalid nonce\\\"); // test revert with reason\\n        if (n == 100000000000002) {\\n            // test revert without reason\\n            revert();\\n        } else if (n == 100000000000003) {\\n            return ExecutionStatus.Retry;\\n        }\\n        // test execution revert\\n        require(n != 100000000000004, string.concat(MsgDataTypes.ABORT_PREFIX, \\\"invalid nonce\\\"));\\n        emit MessageReceived(_sender, _srcChainId, n, message);\\n        return ExecutionStatus.Success;\\n    }\\n\\n    function executeMessage(\\n        bytes calldata _sender,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address // executor\\n    ) external payable override onlyMessageBus returns (ExecutionStatus) {\\n        (uint64 n, bytes memory message) = abi.decode((_message), (uint64, bytes));\\n        emit Message2Received(_sender, _srcChainId, n, message);\\n        return ExecutionStatus.Success;\\n    }\\n\\n    function drainToken(address _token, uint256 _amount) external onlyOwner {\\n        IERC20(_token).safeTransfer(msg.sender, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x38e49cd9e40d2258243ded7a2632bd86b14dd80358728a5877a178855bed0c06\",\"license\":\"GPL-3.0-only\"},\"contracts/message/framework/MessageApp.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./MessageSenderApp.sol\\\";\\nimport \\\"./MessageReceiverApp.sol\\\";\\n\\nabstract contract MessageApp is MessageSenderApp, MessageReceiverApp {\\n    constructor(address _messageBus) {\\n        messageBus = _messageBus;\\n    }\\n}\\n\",\"keccak256\":\"0xb43a38d0b69963a5f844b2f3f70d05f4cedd0b0b96986c91294887164ad9c174\",\"license\":\"GPL-3.0-only\"},\"contracts/message/framework/MessageBusAddress.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../../safeguard/Ownable.sol\\\";\\n\\nabstract contract MessageBusAddress is Ownable {\\n    event MessageBusUpdated(address messageBus);\\n\\n    address public messageBus;\\n\\n    function setMessageBus(address _messageBus) public onlyOwner {\\n        messageBus = _messageBus;\\n        emit MessageBusUpdated(messageBus);\\n    }\\n}\\n\",\"keccak256\":\"0xa5ba122d7b4f48d89cdb79b3678e392651457720ed52732f433ca7eca1ff182a\",\"license\":\"GPL-3.0-only\"},\"contracts/message/framework/MessageReceiverApp.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../interfaces/IMessageReceiverApp.sol\\\";\\nimport \\\"./MessageBusAddress.sol\\\";\\n\\nabstract contract MessageReceiverApp is IMessageReceiverApp, MessageBusAddress {\\n    modifier onlyMessageBus() {\\n        require(msg.sender == messageBus, \\\"caller is not message bus\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Called by MessageBus to execute a message\\n     * @param _sender The address of the source app contract\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessage(\\n        address _sender,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable virtual override onlyMessageBus returns (ExecutionStatus) {}\\n\\n    // execute message from non-evm chain with bytes for sender address,\\n    // otherwise same as above.\\n    function executeMessage(\\n        bytes calldata _sender,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable virtual override onlyMessageBus returns (ExecutionStatus) {}\\n\\n    /**\\n     * @notice Called by MessageBus to execute a message with an associated token transfer.\\n     * The contract is guaranteed to have received the right amount of tokens before this function is called.\\n     * @param _sender The address of the source app contract\\n     * @param _token The address of the token that comes out of the bridge\\n     * @param _amount The amount of tokens received at this contract through the cross-chain bridge.\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessageWithTransfer(\\n        address _sender,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable virtual override onlyMessageBus returns (ExecutionStatus) {}\\n\\n    /**\\n     * @notice Only called by MessageBus if\\n     *         1. executeMessageWithTransfer reverts, or\\n     *         2. executeMessageWithTransfer returns ExecutionStatus.Fail\\n     * The contract is guaranteed to have received the right amount of tokens before this function is called.\\n     * @param _sender The address of the source app contract\\n     * @param _token The address of the token that comes out of the bridge\\n     * @param _amount The amount of tokens received at this contract through the cross-chain bridge.\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessageWithTransferFallback(\\n        address _sender,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable virtual override onlyMessageBus returns (ExecutionStatus) {}\\n\\n    /**\\n     * @notice Called by MessageBus to process refund of the original transfer from this contract.\\n     * The contract is guaranteed to have received the refund before this function is called.\\n     * @param _token The token address of the original transfer\\n     * @param _amount The amount of the original transfer\\n     * @param _message The same message associated with the original transfer\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessageWithTransferRefund(\\n        address _token,\\n        uint256 _amount,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable virtual override onlyMessageBus returns (ExecutionStatus) {}\\n}\\n\",\"keccak256\":\"0x66547bc8f8113af83be3cfa2568f5519edb0fbc6d8235afd3e2977d56eea55a4\",\"license\":\"GPL-3.0-only\"},\"contracts/message/framework/MessageSenderApp.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../libraries/MsgDataTypes.sol\\\";\\nimport \\\"../libraries/MessageSenderLib.sol\\\";\\nimport \\\"../messagebus/MessageBus.sol\\\";\\nimport \\\"./MessageBusAddress.sol\\\";\\n\\nabstract contract MessageSenderApp is MessageBusAddress {\\n    using SafeERC20 for IERC20;\\n\\n    // ============== Utility functions called by apps ==============\\n\\n    /**\\n     * @notice Sends a message to a contract on another chain.\\n     * Sender needs to make sure the uniqueness of the message Id, which is computed as\\n     * hash(type.MessageOnly, sender, receiver, srcChainId, srcTxHash, dstChainId, message).\\n     * If messages with the same Id are sent, only one of them will succeed at dst chain.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     * @param _fee The fee amount to pay to MessageBus.\\n     */\\n    function sendMessage(\\n        address _receiver,\\n        uint64 _dstChainId,\\n        bytes memory _message,\\n        uint256 _fee\\n    ) internal {\\n        MessageSenderLib.sendMessage(_receiver, _dstChainId, _message, messageBus, _fee);\\n    }\\n\\n    // Send message to non-evm chain with bytes for receiver address,\\n    // otherwise same as above.\\n    function sendMessage(\\n        bytes calldata _receiver,\\n        uint64 _dstChainId,\\n        bytes memory _message,\\n        uint256 _fee\\n    ) internal {\\n        MessageSenderLib.sendMessage(_receiver, _dstChainId, _message, messageBus, _fee);\\n    }\\n\\n    /**\\n     * @notice Sends a message associated with a transfer to a contract on another chain.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _token The address of the token to be sent.\\n     * @param _amount The amount of tokens to be sent.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\\n     *        Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least\\n     *        (100% - max slippage percentage) * amount or the transfer can be refunded.\\n     *        Only applicable to the {MsgDataTypes.BridgeSendType.Liquidity}.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     *        If message is empty, only the token transfer will be sent\\n     * @param _bridgeSendType One of the {BridgeSendType} enum.\\n     * @param _fee The fee amount to pay to MessageBus.\\n     * @return The transfer ID.\\n     */\\n    function sendMessageWithTransfer(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage,\\n        bytes memory _message,\\n        MsgDataTypes.BridgeSendType _bridgeSendType,\\n        uint256 _fee\\n    ) internal returns (bytes32) {\\n        return\\n            MessageSenderLib.sendMessageWithTransfer(\\n                _receiver,\\n                _token,\\n                _amount,\\n                _dstChainId,\\n                _nonce,\\n                _maxSlippage,\\n                _message,\\n                _bridgeSendType,\\n                messageBus,\\n                _fee\\n            );\\n    }\\n\\n    /**\\n     * @notice Sends a token transfer via a bridge.\\n     * @dev sendMessageWithTransfer with empty message\\n     * @param _receiver The address of the destination app contract.\\n     * @param _token The address of the token to be sent.\\n     * @param _amount The amount of tokens to be sent.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\\n     *        Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least\\n     *        (100% - max slippage percentage) * amount or the transfer can be refunded.\\n     *        Only applicable to the {MsgDataTypes.BridgeSendType.Liquidity}.\\n     * @param _bridgeSendType One of the {BridgeSendType} enum.\\n     */\\n    function sendTokenTransfer(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage,\\n        MsgDataTypes.BridgeSendType _bridgeSendType\\n    ) internal returns (bytes32) {\\n        return\\n            MessageSenderLib.sendMessageWithTransfer(\\n                _receiver,\\n                _token,\\n                _amount,\\n                _dstChainId,\\n                _nonce,\\n                _maxSlippage,\\n                \\\"\\\", // empty message, which will not trigger sendMessage\\n                _bridgeSendType,\\n                messageBus,\\n                0\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x1723a1a9c08fa5d7ec1f3d8d650aae926cd20dac09026847275b0cae895022a9\",\"license\":\"GPL-3.0-only\"},\"contracts/message/interfaces/IMessageBus.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../libraries/MsgDataTypes.sol\\\";\\n\\ninterface IMessageBus {\\n    /**\\n     * @notice Send a message to a contract on another chain.\\n     * Sender needs to make sure the uniqueness of the message Id, which is computed as\\n     * hash(type.MessageOnly, sender, receiver, srcChainId, srcTxHash, dstChainId, message).\\n     * If messages with the same Id are sent, only one of them will succeed at dst chain..\\n     * A fee is charged in the native gas token.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     */\\n    function sendMessage(\\n        address _receiver,\\n        uint256 _dstChainId,\\n        bytes calldata _message\\n    ) external payable;\\n\\n    // same as above, except that receiver is an non-evm chain address,\\n    function sendMessage(\\n        bytes calldata _receiver,\\n        uint256 _dstChainId,\\n        bytes calldata _message\\n    ) external payable;\\n\\n    /**\\n     * @notice Send a message associated with a token transfer to a contract on another chain.\\n     * If messages with the same srcTransferId are sent, only one of them will succeed at dst chain..\\n     * A fee is charged in the native token.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _srcBridge The bridge contract to send the transfer with.\\n     * @param _srcTransferId The transfer ID.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     */\\n    function sendMessageWithTransfer(\\n        address _receiver,\\n        uint256 _dstChainId,\\n        address _srcBridge,\\n        bytes32 _srcTransferId,\\n        bytes calldata _message\\n    ) external payable;\\n\\n    /**\\n     * @notice Execute a message not associated with a transfer.\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function executeMessage(\\n        bytes calldata _message,\\n        MsgDataTypes.RouteInfo calldata _route,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external payable;\\n\\n    /**\\n     * @notice Execute a message with a successful transfer.\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _transfer The transfer info.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function executeMessageWithTransfer(\\n        bytes calldata _message,\\n        MsgDataTypes.TransferInfo calldata _transfer,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external payable;\\n\\n    /**\\n     * @notice Execute a message with a refunded transfer.\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _transfer The transfer info.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function executeMessageWithTransferRefund(\\n        bytes calldata _message, // the same message associated with the original transfer\\n        MsgDataTypes.TransferInfo calldata _transfer,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external payable;\\n\\n    /**\\n     * @notice Withdraws message fee in the form of native gas token.\\n     * @param _account The address receiving the fee.\\n     * @param _cumulativeFee The cumulative fee credited to the account. Tracked by SGN.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A withdrawal must be\\n     * signed-off by +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function withdrawFee(\\n        address _account,\\n        uint256 _cumulativeFee,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    /**\\n     * @notice Calculates the required fee for the message.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     @ @return The required fee.\\n     */\\n    function calcFee(bytes calldata _message) external view returns (uint256);\\n\\n    function liquidityBridge() external view returns (address);\\n\\n    function pegBridge() external view returns (address);\\n\\n    function pegBridgeV2() external view returns (address);\\n\\n    function pegVault() external view returns (address);\\n\\n    function pegVaultV2() external view returns (address);\\n}\\n\",\"keccak256\":\"0x68747982fe77157a371e44ef21546f0eef7ef3d4ca0c3803b44044891e090ab9\",\"license\":\"GPL-3.0-only\"},\"contracts/message/interfaces/IMessageReceiverApp.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessageReceiverApp {\\n    enum ExecutionStatus {\\n        Fail, // execution failed, finalized\\n        Success, // execution succeeded, finalized\\n        Retry // execution rejected, can retry later\\n    }\\n\\n    /**\\n     * @notice Called by MessageBus to execute a message\\n     * @param _sender The address of the source app contract\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessage(\\n        address _sender,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable returns (ExecutionStatus);\\n\\n    // same as above, except that sender is an non-evm chain address,\\n    // otherwise same as above.\\n    function executeMessage(\\n        bytes calldata _sender,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable returns (ExecutionStatus);\\n\\n    /**\\n     * @notice Called by MessageBus to execute a message with an associated token transfer.\\n     * The contract is guaranteed to have received the right amount of tokens before this function is called.\\n     * @param _sender The address of the source app contract\\n     * @param _token The address of the token that comes out of the bridge\\n     * @param _amount The amount of tokens received at this contract through the cross-chain bridge.\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessageWithTransfer(\\n        address _sender,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable returns (ExecutionStatus);\\n\\n    /**\\n     * @notice Only called by MessageBus if\\n     *         1. executeMessageWithTransfer reverts, or\\n     *         2. executeMessageWithTransfer returns ExecutionStatus.Fail\\n     * The contract is guaranteed to have received the right amount of tokens before this function is called.\\n     * @param _sender The address of the source app contract\\n     * @param _token The address of the token that comes out of the bridge\\n     * @param _amount The amount of tokens received at this contract through the cross-chain bridge.\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessageWithTransferFallback(\\n        address _sender,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable returns (ExecutionStatus);\\n\\n    /**\\n     * @notice Called by MessageBus to process refund of the original transfer from this contract.\\n     * The contract is guaranteed to have received the refund before this function is called.\\n     * @param _token The token address of the original transfer\\n     * @param _amount The amount of the original transfer\\n     * @param _message The same message associated with the original transfer\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessageWithTransferRefund(\\n        address _token,\\n        uint256 _amount,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable returns (ExecutionStatus);\\n}\\n\",\"keccak256\":\"0x11f3d44aa2212ae89f4a6078c62248681deb0daa1592a482943e0f466d532498\",\"license\":\"GPL-3.0-only\"},\"contracts/message/libraries/MessageSenderLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../../interfaces/IBridge.sol\\\";\\nimport \\\"../../interfaces/IOriginalTokenVault.sol\\\";\\nimport \\\"../../interfaces/IOriginalTokenVaultV2.sol\\\";\\nimport \\\"../../interfaces/IPeggedTokenBridge.sol\\\";\\nimport \\\"../../interfaces/IPeggedTokenBridgeV2.sol\\\";\\nimport \\\"../interfaces/IMessageBus.sol\\\";\\nimport \\\"./MsgDataTypes.sol\\\";\\n\\nlibrary MessageSenderLib {\\n    using SafeERC20 for IERC20;\\n\\n    // ============== Internal library functions called by apps ==============\\n\\n    /**\\n     * @notice Sends a message to an app on another chain via MessageBus without an associated transfer.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     * @param _messageBus The address of the MessageBus on this chain.\\n     * @param _fee The fee amount to pay to MessageBus.\\n     */\\n    function sendMessage(\\n        address _receiver,\\n        uint64 _dstChainId,\\n        bytes memory _message,\\n        address _messageBus,\\n        uint256 _fee\\n    ) internal {\\n        IMessageBus(_messageBus).sendMessage{value: _fee}(_receiver, _dstChainId, _message);\\n    }\\n\\n    // Send message to non-evm chain with bytes for receiver address,\\n    // otherwise same as above.\\n    function sendMessage(\\n        bytes calldata _receiver,\\n        uint64 _dstChainId,\\n        bytes memory _message,\\n        address _messageBus,\\n        uint256 _fee\\n    ) internal {\\n        IMessageBus(_messageBus).sendMessage{value: _fee}(_receiver, _dstChainId, _message);\\n    }\\n\\n    /**\\n     * @notice Sends a message to an app on another chain via MessageBus with an associated transfer.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _token The address of the token to be sent.\\n     * @param _amount The amount of tokens to be sent.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\\n     * Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the\\n     * transfer can be refunded. Only applicable to the {MsgDataTypes.BridgeSendType.Liquidity}.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     * @param _bridgeSendType One of the {MsgDataTypes.BridgeSendType} enum.\\n     * @param _messageBus The address of the MessageBus on this chain.\\n     * @param _fee The fee amount to pay to MessageBus.\\n     * @return The transfer ID.\\n     */\\n    function sendMessageWithTransfer(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage,\\n        bytes memory _message,\\n        MsgDataTypes.BridgeSendType _bridgeSendType,\\n        address _messageBus,\\n        uint256 _fee\\n    ) internal returns (bytes32) {\\n        (bytes32 transferId, address bridge) = sendTokenTransfer(\\n            _receiver,\\n            _token,\\n            _amount,\\n            _dstChainId,\\n            _nonce,\\n            _maxSlippage,\\n            _bridgeSendType,\\n            _messageBus\\n        );\\n        if (_message.length > 0) {\\n            IMessageBus(_messageBus).sendMessageWithTransfer{value: _fee}(\\n                _receiver,\\n                _dstChainId,\\n                bridge,\\n                transferId,\\n                _message\\n            );\\n        }\\n        return transferId;\\n    }\\n\\n    /**\\n     * @notice Sends a token transfer via a bridge.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _token The address of the token to be sent.\\n     * @param _amount The amount of tokens to be sent.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\\n     * Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the\\n     * transfer can be refunded.\\n     * @param _bridgeSendType One of the {MsgDataTypes.BridgeSendType} enum.\\n     */\\n    function sendTokenTransfer(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage,\\n        MsgDataTypes.BridgeSendType _bridgeSendType,\\n        address _messageBus\\n    ) internal returns (bytes32 transferId, address bridge) {\\n        if (_bridgeSendType == MsgDataTypes.BridgeSendType.Liquidity) {\\n            bridge = IMessageBus(_messageBus).liquidityBridge();\\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\\n            IBridge(bridge).send(_receiver, _token, _amount, _dstChainId, _nonce, _maxSlippage);\\n            transferId = computeLiqBridgeTransferId(_receiver, _token, _amount, _dstChainId, _nonce);\\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegDeposit) {\\n            bridge = IMessageBus(_messageBus).pegVault();\\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\\n            IOriginalTokenVault(bridge).deposit(_token, _amount, _dstChainId, _receiver, _nonce);\\n            transferId = computePegV1DepositId(_receiver, _token, _amount, _dstChainId, _nonce);\\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegBurn) {\\n            bridge = IMessageBus(_messageBus).pegBridge();\\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\\n            IPeggedTokenBridge(bridge).burn(_token, _amount, _receiver, _nonce);\\n            // handle cases where certain tokens do not spend allowance for role-based burn\\n            IERC20(_token).safeApprove(bridge, 0);\\n            transferId = computePegV1BurnId(_receiver, _token, _amount, _nonce);\\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegV2Deposit) {\\n            bridge = IMessageBus(_messageBus).pegVaultV2();\\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\\n            transferId = IOriginalTokenVaultV2(bridge).deposit(_token, _amount, _dstChainId, _receiver, _nonce);\\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegV2Burn) {\\n            bridge = IMessageBus(_messageBus).pegBridgeV2();\\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\\n            transferId = IPeggedTokenBridgeV2(bridge).burn(_token, _amount, _dstChainId, _receiver, _nonce);\\n            // handle cases where certain tokens do not spend allowance for role-based burn\\n            IERC20(_token).safeApprove(bridge, 0);\\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegV2BurnFrom) {\\n            bridge = IMessageBus(_messageBus).pegBridgeV2();\\n            IERC20(_token).safeIncreaseAllowance(bridge, _amount);\\n            transferId = IPeggedTokenBridgeV2(bridge).burnFrom(_token, _amount, _dstChainId, _receiver, _nonce);\\n            // handle cases where certain tokens do not spend allowance for role-based burn\\n            IERC20(_token).safeApprove(bridge, 0);\\n        } else {\\n            revert(\\\"bridge type not supported\\\");\\n        }\\n    }\\n\\n    function computeLiqBridgeTransferId(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce\\n    ) internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(address(this), _receiver, _token, _amount, _dstChainId, _nonce, uint64(block.chainid))\\n            );\\n    }\\n\\n    function computePegV1DepositId(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce\\n    ) internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(address(this), _token, _amount, _dstChainId, _receiver, _nonce, uint64(block.chainid))\\n            );\\n    }\\n\\n    function computePegV1BurnId(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _nonce\\n    ) internal view returns (bytes32) {\\n        return keccak256(abi.encodePacked(address(this), _token, _amount, _receiver, _nonce, uint64(block.chainid)));\\n    }\\n}\\n\",\"keccak256\":\"0x06a4f94959404a8040613278d3f7f6fde797f241f7e7088ac9262740adb1b6ba\",\"license\":\"GPL-3.0-only\"},\"contracts/message/libraries/MsgDataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nlibrary MsgDataTypes {\\n    string constant ABORT_PREFIX = \\\"MSG::ABORT:\\\";\\n\\n    // bridge operation type at the sender side (src chain)\\n    enum BridgeSendType {\\n        Null,\\n        Liquidity,\\n        PegDeposit,\\n        PegBurn,\\n        PegV2Deposit,\\n        PegV2Burn,\\n        PegV2BurnFrom\\n    }\\n\\n    // bridge operation type at the receiver side (dst chain)\\n    enum TransferType {\\n        Null,\\n        LqRelay, // relay through liquidity bridge\\n        LqWithdraw, // withdraw from liquidity bridge\\n        PegMint, // mint through pegged token bridge\\n        PegWithdraw, // withdraw from original token vault\\n        PegV2Mint, // mint through pegged token bridge v2\\n        PegV2Withdraw // withdraw from original token vault v2\\n    }\\n\\n    enum MsgType {\\n        MessageWithTransfer,\\n        MessageOnly\\n    }\\n\\n    enum TxStatus {\\n        Null,\\n        Success,\\n        Fail,\\n        Fallback,\\n        Pending // transient state within a transaction\\n    }\\n\\n    struct TransferInfo {\\n        TransferType t;\\n        address sender;\\n        address receiver;\\n        address token;\\n        uint256 amount;\\n        uint64 wdseq; // only needed for LqWithdraw (refund)\\n        uint64 srcChainId;\\n        bytes32 refId;\\n        bytes32 srcTxHash; // src chain msg tx hash\\n    }\\n\\n    struct RouteInfo {\\n        address sender;\\n        address receiver;\\n        uint64 srcChainId;\\n        bytes32 srcTxHash; // src chain msg tx hash\\n    }\\n\\n    // used for msg from non-evm chains with longer-bytes address\\n    struct RouteInfo2 {\\n        bytes sender;\\n        address receiver;\\n        uint64 srcChainId;\\n        bytes32 srcTxHash;\\n    }\\n\\n    // combination of RouteInfo and RouteInfo2 for easier processing\\n    struct Route {\\n        address sender; // from RouteInfo\\n        bytes senderBytes; // from RouteInfo2\\n        address receiver;\\n        uint64 srcChainId;\\n        bytes32 srcTxHash;\\n    }\\n\\n    struct MsgWithTransferExecutionParams {\\n        bytes message;\\n        TransferInfo transfer;\\n        bytes[] sigs;\\n        address[] signers;\\n        uint256[] powers;\\n    }\\n\\n    struct BridgeTransferParams {\\n        bytes request;\\n        bytes[] sigs;\\n        address[] signers;\\n        uint256[] powers;\\n    }\\n}\\n\",\"keccak256\":\"0x874f823022e87fe4b652abc1b696b4b42e5f63dd3f622e59efa378ac32e6a6fd\",\"license\":\"GPL-3.0-only\"},\"contracts/message/messagebus/MessageBus.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./MessageBusSender.sol\\\";\\nimport \\\"./MessageBusReceiver.sol\\\";\\n\\ncontract MessageBus is MessageBusSender, MessageBusReceiver {\\n    constructor(\\n        ISigsVerifier _sigsVerifier,\\n        address _liquidityBridge,\\n        address _pegBridge,\\n        address _pegVault,\\n        address _pegBridgeV2,\\n        address _pegVaultV2\\n    )\\n        MessageBusSender(_sigsVerifier)\\n        MessageBusReceiver(_liquidityBridge, _pegBridge, _pegVault, _pegBridgeV2, _pegVaultV2)\\n    {}\\n\\n    // this is only to be called by Proxy via delegateCall as initOwner will require _owner is 0.\\n    // so calling init on this contract directly will guarantee to fail\\n    function init(\\n        address _liquidityBridge,\\n        address _pegBridge,\\n        address _pegVault,\\n        address _pegBridgeV2,\\n        address _pegVaultV2\\n    ) external {\\n        // MUST manually call ownable init and must only call once\\n        initOwner();\\n        // we don't need sender init as _sigsVerifier is immutable so already in the deployed code\\n        initReceiver(_liquidityBridge, _pegBridge, _pegVault, _pegBridgeV2, _pegVaultV2);\\n    }\\n}\\n\",\"keccak256\":\"0x8e252a4ac47506486b44c1db07426bc183fb8f71dd677c3e393abef18a6d07db\",\"license\":\"GPL-3.0-only\"},\"contracts/message/messagebus/MessageBusReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.9;\\n\\nimport \\\"../libraries/MsgDataTypes.sol\\\";\\nimport \\\"../interfaces/IMessageReceiverApp.sol\\\";\\nimport \\\"../../interfaces/IBridge.sol\\\";\\nimport \\\"../../interfaces/IOriginalTokenVault.sol\\\";\\nimport \\\"../../interfaces/IOriginalTokenVaultV2.sol\\\";\\nimport \\\"../../interfaces/IPeggedTokenBridge.sol\\\";\\nimport \\\"../../interfaces/IPeggedTokenBridgeV2.sol\\\";\\nimport \\\"../../safeguard/Ownable.sol\\\";\\n\\ncontract MessageBusReceiver is Ownable {\\n    mapping(bytes32 => MsgDataTypes.TxStatus) public executedMessages;\\n\\n    address public liquidityBridge; // liquidity bridge address\\n    address public pegBridge; // peg bridge address\\n    address public pegVault; // peg original vault address\\n    address public pegBridgeV2; // peg bridge address\\n    address public pegVaultV2; // peg original vault address\\n\\n    // minimum amount of gas needed by this contract before it tries to\\n    // deliver a message to the target contract.\\n    uint256 public preExecuteMessageGasUsage;\\n\\n    event Executed(\\n        MsgDataTypes.MsgType msgType,\\n        bytes32 msgId,\\n        MsgDataTypes.TxStatus status,\\n        address indexed receiver,\\n        uint64 srcChainId,\\n        bytes32 srcTxHash\\n    );\\n    event NeedRetry(MsgDataTypes.MsgType msgType, bytes32 msgId, uint64 srcChainId, bytes32 srcTxHash);\\n    event CallReverted(string reason); // help debug\\n\\n    event LiquidityBridgeUpdated(address liquidityBridge);\\n    event PegBridgeUpdated(address pegBridge);\\n    event PegVaultUpdated(address pegVault);\\n    event PegBridgeV2Updated(address pegBridgeV2);\\n    event PegVaultV2Updated(address pegVaultV2);\\n\\n    constructor(\\n        address _liquidityBridge,\\n        address _pegBridge,\\n        address _pegVault,\\n        address _pegBridgeV2,\\n        address _pegVaultV2\\n    ) {\\n        liquidityBridge = _liquidityBridge;\\n        pegBridge = _pegBridge;\\n        pegVault = _pegVault;\\n        pegBridgeV2 = _pegBridgeV2;\\n        pegVaultV2 = _pegVaultV2;\\n    }\\n\\n    function initReceiver(\\n        address _liquidityBridge,\\n        address _pegBridge,\\n        address _pegVault,\\n        address _pegBridgeV2,\\n        address _pegVaultV2\\n    ) internal {\\n        require(liquidityBridge == address(0), \\\"liquidityBridge already set\\\");\\n        liquidityBridge = _liquidityBridge;\\n        pegBridge = _pegBridge;\\n        pegVault = _pegVault;\\n        pegBridgeV2 = _pegBridgeV2;\\n        pegVaultV2 = _pegVaultV2;\\n    }\\n\\n    // ============== functions called by executor ==============\\n\\n    /**\\n     * @notice Execute a message with a successful transfer.\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _transfer The transfer info.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function executeMessageWithTransfer(\\n        bytes calldata _message,\\n        MsgDataTypes.TransferInfo calldata _transfer,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) public payable {\\n        // For message with token transfer, message Id is computed through transfer info\\n        // in order to guarantee that each transfer can only be used once.\\n        bytes32 messageId = verifyTransfer(_transfer);\\n        require(executedMessages[messageId] == MsgDataTypes.TxStatus.Null, \\\"transfer already executed\\\");\\n        executedMessages[messageId] = MsgDataTypes.TxStatus.Pending;\\n\\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \\\"MessageWithTransfer\\\"));\\n        IBridge(liquidityBridge).verifySigs(\\n            abi.encodePacked(domain, messageId, _message, _transfer.srcTxHash),\\n            _sigs,\\n            _signers,\\n            _powers\\n        );\\n        MsgDataTypes.TxStatus status;\\n        IMessageReceiverApp.ExecutionStatus est = executeMessageWithTransfer(_transfer, _message);\\n        if (est == IMessageReceiverApp.ExecutionStatus.Success) {\\n            status = MsgDataTypes.TxStatus.Success;\\n        } else if (est == IMessageReceiverApp.ExecutionStatus.Retry) {\\n            executedMessages[messageId] = MsgDataTypes.TxStatus.Null;\\n            emit NeedRetry(\\n                MsgDataTypes.MsgType.MessageWithTransfer,\\n                messageId,\\n                _transfer.srcChainId,\\n                _transfer.srcTxHash\\n            );\\n            return;\\n        } else {\\n            est = executeMessageWithTransferFallback(_transfer, _message);\\n            if (est == IMessageReceiverApp.ExecutionStatus.Success) {\\n                status = MsgDataTypes.TxStatus.Fallback;\\n            } else {\\n                status = MsgDataTypes.TxStatus.Fail;\\n            }\\n        }\\n        executedMessages[messageId] = status;\\n        emitMessageWithTransferExecutedEvent(messageId, status, _transfer);\\n    }\\n\\n    /**\\n     * @notice Execute a message with a refunded transfer.\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _transfer The transfer info.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function executeMessageWithTransferRefund(\\n        bytes calldata _message, // the same message associated with the original transfer\\n        MsgDataTypes.TransferInfo calldata _transfer,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) public payable {\\n        // similar to executeMessageWithTransfer\\n        bytes32 messageId = verifyTransfer(_transfer);\\n        require(executedMessages[messageId] == MsgDataTypes.TxStatus.Null, \\\"transfer already executed\\\");\\n        executedMessages[messageId] = MsgDataTypes.TxStatus.Pending;\\n\\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \\\"MessageWithTransferRefund\\\"));\\n        IBridge(liquidityBridge).verifySigs(\\n            abi.encodePacked(domain, messageId, _message, _transfer.srcTxHash),\\n            _sigs,\\n            _signers,\\n            _powers\\n        );\\n        MsgDataTypes.TxStatus status;\\n        IMessageReceiverApp.ExecutionStatus est = executeMessageWithTransferRefund(_transfer, _message);\\n        if (est == IMessageReceiverApp.ExecutionStatus.Success) {\\n            status = MsgDataTypes.TxStatus.Success;\\n        } else if (est == IMessageReceiverApp.ExecutionStatus.Retry) {\\n            executedMessages[messageId] = MsgDataTypes.TxStatus.Null;\\n            emit NeedRetry(\\n                MsgDataTypes.MsgType.MessageWithTransfer,\\n                messageId,\\n                _transfer.srcChainId,\\n                _transfer.srcTxHash\\n            );\\n            return;\\n        } else {\\n            status = MsgDataTypes.TxStatus.Fail;\\n        }\\n        executedMessages[messageId] = status;\\n        emitMessageWithTransferExecutedEvent(messageId, status, _transfer);\\n    }\\n\\n    /**\\n     * @notice Execute a message not associated with a transfer.\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _route The info about the sender and the receiver.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function executeMessage(\\n        bytes calldata _message,\\n        MsgDataTypes.RouteInfo calldata _route,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external payable {\\n        MsgDataTypes.Route memory route = getRouteInfo(_route);\\n        executeMessage(_message, route, _sigs, _signers, _powers, \\\"Message\\\");\\n    }\\n\\n    // execute message from non-evm chain with bytes for sender address,\\n    // otherwise same as above.\\n    function executeMessage(\\n        bytes calldata _message,\\n        MsgDataTypes.RouteInfo2 calldata _route,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external payable {\\n        MsgDataTypes.Route memory route = getRouteInfo(_route);\\n        executeMessage(_message, route, _sigs, _signers, _powers, \\\"Message2\\\");\\n    }\\n\\n    function executeMessage(\\n        bytes calldata _message,\\n        MsgDataTypes.Route memory _route,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers,\\n        string memory domainName\\n    ) private {\\n        // For message without associated token transfer, message Id is computed through message info,\\n        // in order to guarantee that each message can only be applied once\\n        bytes32 messageId = computeMessageOnlyId(_route, _message);\\n        require(executedMessages[messageId] == MsgDataTypes.TxStatus.Null, \\\"message already executed\\\");\\n        executedMessages[messageId] = MsgDataTypes.TxStatus.Pending;\\n\\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), domainName));\\n        IBridge(liquidityBridge).verifySigs(abi.encodePacked(domain, messageId), _sigs, _signers, _powers);\\n        MsgDataTypes.TxStatus status;\\n        IMessageReceiverApp.ExecutionStatus est = executeMessage(_route, _message);\\n        if (est == IMessageReceiverApp.ExecutionStatus.Success) {\\n            status = MsgDataTypes.TxStatus.Success;\\n        } else if (est == IMessageReceiverApp.ExecutionStatus.Retry) {\\n            executedMessages[messageId] = MsgDataTypes.TxStatus.Null;\\n            emit NeedRetry(MsgDataTypes.MsgType.MessageOnly, messageId, _route.srcChainId, _route.srcTxHash);\\n            return;\\n        } else {\\n            status = MsgDataTypes.TxStatus.Fail;\\n        }\\n        executedMessages[messageId] = status;\\n        emitMessageOnlyExecutedEvent(messageId, status, _route);\\n    }\\n\\n    // ================= utils (to avoid stack too deep) =================\\n\\n    function emitMessageWithTransferExecutedEvent(\\n        bytes32 _messageId,\\n        MsgDataTypes.TxStatus _status,\\n        MsgDataTypes.TransferInfo calldata _transfer\\n    ) private {\\n        emit Executed(\\n            MsgDataTypes.MsgType.MessageWithTransfer,\\n            _messageId,\\n            _status,\\n            _transfer.receiver,\\n            _transfer.srcChainId,\\n            _transfer.srcTxHash\\n        );\\n    }\\n\\n    function emitMessageOnlyExecutedEvent(\\n        bytes32 _messageId,\\n        MsgDataTypes.TxStatus _status,\\n        MsgDataTypes.Route memory _route\\n    ) private {\\n        emit Executed(\\n            MsgDataTypes.MsgType.MessageOnly,\\n            _messageId,\\n            _status,\\n            _route.receiver,\\n            _route.srcChainId,\\n            _route.srcTxHash\\n        );\\n    }\\n\\n    function executeMessageWithTransfer(MsgDataTypes.TransferInfo calldata _transfer, bytes calldata _message)\\n        private\\n        returns (IMessageReceiverApp.ExecutionStatus)\\n    {\\n        uint256 gasLeftBeforeExecution = gasleft();\\n        (bool ok, bytes memory res) = address(_transfer.receiver).call{value: msg.value}(\\n            abi.encodeWithSelector(\\n                IMessageReceiverApp.executeMessageWithTransfer.selector,\\n                _transfer.sender,\\n                _transfer.token,\\n                _transfer.amount,\\n                _transfer.srcChainId,\\n                _message,\\n                msg.sender\\n            )\\n        );\\n        if (ok) {\\n            return abi.decode((res), (IMessageReceiverApp.ExecutionStatus));\\n        }\\n        handleExecutionRevert(gasLeftBeforeExecution, res);\\n        return IMessageReceiverApp.ExecutionStatus.Fail;\\n    }\\n\\n    function executeMessageWithTransferFallback(MsgDataTypes.TransferInfo calldata _transfer, bytes calldata _message)\\n        private\\n        returns (IMessageReceiverApp.ExecutionStatus)\\n    {\\n        uint256 gasLeftBeforeExecution = gasleft();\\n        (bool ok, bytes memory res) = address(_transfer.receiver).call{value: msg.value}(\\n            abi.encodeWithSelector(\\n                IMessageReceiverApp.executeMessageWithTransferFallback.selector,\\n                _transfer.sender,\\n                _transfer.token,\\n                _transfer.amount,\\n                _transfer.srcChainId,\\n                _message,\\n                msg.sender\\n            )\\n        );\\n        if (ok) {\\n            return abi.decode((res), (IMessageReceiverApp.ExecutionStatus));\\n        }\\n        handleExecutionRevert(gasLeftBeforeExecution, res);\\n        return IMessageReceiverApp.ExecutionStatus.Fail;\\n    }\\n\\n    function executeMessageWithTransferRefund(MsgDataTypes.TransferInfo calldata _transfer, bytes calldata _message)\\n        private\\n        returns (IMessageReceiverApp.ExecutionStatus)\\n    {\\n        uint256 gasLeftBeforeExecution = gasleft();\\n        (bool ok, bytes memory res) = address(_transfer.receiver).call{value: msg.value}(\\n            abi.encodeWithSelector(\\n                IMessageReceiverApp.executeMessageWithTransferRefund.selector,\\n                _transfer.token,\\n                _transfer.amount,\\n                _message,\\n                msg.sender\\n            )\\n        );\\n        if (ok) {\\n            return abi.decode((res), (IMessageReceiverApp.ExecutionStatus));\\n        }\\n        handleExecutionRevert(gasLeftBeforeExecution, res);\\n        return IMessageReceiverApp.ExecutionStatus.Fail;\\n    }\\n\\n    function verifyTransfer(MsgDataTypes.TransferInfo calldata _transfer) private view returns (bytes32) {\\n        bytes32 transferId;\\n        address bridgeAddr;\\n        if (_transfer.t == MsgDataTypes.TransferType.LqRelay) {\\n            transferId = keccak256(\\n                abi.encodePacked(\\n                    _transfer.sender,\\n                    _transfer.receiver,\\n                    _transfer.token,\\n                    _transfer.amount,\\n                    _transfer.srcChainId,\\n                    uint64(block.chainid),\\n                    _transfer.refId\\n                )\\n            );\\n            bridgeAddr = liquidityBridge;\\n            require(IBridge(bridgeAddr).transfers(transferId) == true, \\\"bridge relay not exist\\\");\\n        } else if (_transfer.t == MsgDataTypes.TransferType.LqWithdraw) {\\n            transferId = keccak256(\\n                abi.encodePacked(\\n                    uint64(block.chainid),\\n                    _transfer.wdseq,\\n                    _transfer.receiver,\\n                    _transfer.token,\\n                    _transfer.amount\\n                )\\n            );\\n            bridgeAddr = liquidityBridge;\\n            require(IBridge(bridgeAddr).withdraws(transferId) == true, \\\"bridge withdraw not exist\\\");\\n        } else if (\\n            _transfer.t == MsgDataTypes.TransferType.PegMint || _transfer.t == MsgDataTypes.TransferType.PegWithdraw\\n        ) {\\n            transferId = keccak256(\\n                abi.encodePacked(\\n                    _transfer.receiver,\\n                    _transfer.token,\\n                    _transfer.amount,\\n                    _transfer.sender,\\n                    _transfer.srcChainId,\\n                    _transfer.refId\\n                )\\n            );\\n            if (_transfer.t == MsgDataTypes.TransferType.PegMint) {\\n                bridgeAddr = pegBridge;\\n                require(IPeggedTokenBridge(bridgeAddr).records(transferId) == true, \\\"mint record not exist\\\");\\n            } else {\\n                // _transfer.t == MsgDataTypes.TransferType.PegWithdraw\\n                bridgeAddr = pegVault;\\n                require(IOriginalTokenVault(bridgeAddr).records(transferId) == true, \\\"withdraw record not exist\\\");\\n            }\\n        } else if (\\n            _transfer.t == MsgDataTypes.TransferType.PegV2Mint || _transfer.t == MsgDataTypes.TransferType.PegV2Withdraw\\n        ) {\\n            if (_transfer.t == MsgDataTypes.TransferType.PegV2Mint) {\\n                bridgeAddr = pegBridgeV2;\\n            } else {\\n                // MsgDataTypes.TransferType.PegV2Withdraw\\n                bridgeAddr = pegVaultV2;\\n            }\\n            transferId = keccak256(\\n                abi.encodePacked(\\n                    _transfer.receiver,\\n                    _transfer.token,\\n                    _transfer.amount,\\n                    _transfer.sender,\\n                    _transfer.srcChainId,\\n                    _transfer.refId,\\n                    bridgeAddr\\n                )\\n            );\\n            if (_transfer.t == MsgDataTypes.TransferType.PegV2Mint) {\\n                require(IPeggedTokenBridgeV2(bridgeAddr).records(transferId) == true, \\\"mint record not exist\\\");\\n            } else {\\n                // MsgDataTypes.TransferType.PegV2Withdraw\\n                require(IOriginalTokenVaultV2(bridgeAddr).records(transferId) == true, \\\"withdraw record not exist\\\");\\n            }\\n        }\\n        return keccak256(abi.encodePacked(MsgDataTypes.MsgType.MessageWithTransfer, bridgeAddr, transferId));\\n    }\\n\\n    function computeMessageOnlyId(MsgDataTypes.Route memory _route, bytes calldata _message)\\n        private\\n        view\\n        returns (bytes32)\\n    {\\n        bytes memory sender = _route.senderBytes;\\n        if (sender.length == 0) {\\n            sender = abi.encodePacked(_route.sender);\\n        }\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    MsgDataTypes.MsgType.MessageOnly,\\n                    sender,\\n                    _route.receiver,\\n                    _route.srcChainId,\\n                    _route.srcTxHash,\\n                    uint64(block.chainid),\\n                    _message\\n                )\\n            );\\n    }\\n\\n    function executeMessage(MsgDataTypes.Route memory _route, bytes calldata _message)\\n        private\\n        returns (IMessageReceiverApp.ExecutionStatus)\\n    {\\n        uint256 gasLeftBeforeExecution = gasleft();\\n        bool ok;\\n        bytes memory res;\\n        if (_route.senderBytes.length == 0) {\\n            (ok, res) = address(_route.receiver).call{value: msg.value}(\\n                abi.encodeWithSelector(\\n                    bytes4(keccak256(bytes(\\\"executeMessage(address,uint64,bytes,address)\\\"))),\\n                    _route.sender,\\n                    _route.srcChainId,\\n                    _message,\\n                    msg.sender\\n                )\\n            );\\n        } else {\\n            (ok, res) = address(_route.receiver).call{value: msg.value}(\\n                abi.encodeWithSelector(\\n                    bytes4(keccak256(bytes(\\\"executeMessage(bytes,uint64,bytes,address)\\\"))),\\n                    _route.senderBytes,\\n                    _route.srcChainId,\\n                    _message,\\n                    msg.sender\\n                )\\n            );\\n        }\\n        if (ok) {\\n            return abi.decode((res), (IMessageReceiverApp.ExecutionStatus));\\n        }\\n        handleExecutionRevert(gasLeftBeforeExecution, res);\\n        return IMessageReceiverApp.ExecutionStatus.Fail;\\n    }\\n\\n    function handleExecutionRevert(uint256 _gasLeftBeforeExecution, bytes memory _returnData) private {\\n        uint256 gasLeftAfterExecution = gasleft();\\n        uint256 maxTargetGasLimit = block.gaslimit - preExecuteMessageGasUsage;\\n        if (_gasLeftBeforeExecution < maxTargetGasLimit && gasLeftAfterExecution <= _gasLeftBeforeExecution / 64) {\\n            // if this happens, the executor must have not provided sufficient gas limit,\\n            // then the tx should revert instead of recording a non-retryable failure status\\n            // https://github.com/wolflo/evm-opcodes/blob/main/gas.md#aa-f-gas-to-send-with-call-operations\\n            assembly {\\n                invalid()\\n            }\\n        }\\n        string memory revertMsg = getRevertMsg(_returnData);\\n        // revert the execution if the revert message has the ABORT prefix\\n        checkAbortPrefix(revertMsg);\\n        // otherwiase, emit revert message, return and mark the execution as failed (non-retryable)\\n        emit CallReverted(revertMsg);\\n    }\\n\\n    // https://ethereum.stackexchange.com/a/83577\\n    // https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/base/Multicall.sol\\n    function getRevertMsg(bytes memory _returnData) private pure returns (string memory) {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\n        assembly {\\n            // Slice the sighash.\\n            _returnData := add(_returnData, 0x04)\\n        }\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\n    }\\n\\n    function checkAbortPrefix(string memory _revertMsg) private pure {\\n        bytes memory prefixBytes = bytes(MsgDataTypes.ABORT_PREFIX);\\n        bytes memory msgBytes = bytes(_revertMsg);\\n        if (msgBytes.length >= prefixBytes.length) {\\n            for (uint256 i = 0; i < prefixBytes.length; i++) {\\n                if (msgBytes[i] != prefixBytes[i]) {\\n                    return; // prefix not match, return\\n                }\\n            }\\n            revert(_revertMsg); // prefix match, revert\\n        }\\n    }\\n\\n    function getRouteInfo(MsgDataTypes.RouteInfo calldata _route) private pure returns (MsgDataTypes.Route memory) {\\n        return MsgDataTypes.Route(_route.sender, \\\"\\\", _route.receiver, _route.srcChainId, _route.srcTxHash);\\n    }\\n\\n    function getRouteInfo(MsgDataTypes.RouteInfo2 calldata _route) private pure returns (MsgDataTypes.Route memory) {\\n        return MsgDataTypes.Route(address(0), _route.sender, _route.receiver, _route.srcChainId, _route.srcTxHash);\\n    }\\n\\n    // ================= helper functions =====================\\n\\n    /**\\n     * @notice combine bridge transfer and msg execution calls into a single tx\\n     * @dev caller needs to get the required input params from SGN\\n     * @param _transferParams params to call bridge transfer\\n     * @param _msgParams params to execute message\\n     */\\n    function transferAndExecuteMsg(\\n        MsgDataTypes.BridgeTransferParams calldata _transferParams,\\n        MsgDataTypes.MsgWithTransferExecutionParams calldata _msgParams\\n    ) external {\\n        _bridgeTransfer(_msgParams.transfer.t, _transferParams);\\n        executeMessageWithTransfer(\\n            _msgParams.message,\\n            _msgParams.transfer,\\n            _msgParams.sigs,\\n            _msgParams.signers,\\n            _msgParams.powers\\n        );\\n    }\\n\\n    /**\\n     * @notice combine bridge refund and msg execution calls into a single tx\\n     * @dev caller needs to get the required input params from SGN\\n     * @param _transferParams params to call bridge transfer for refund\\n     * @param _msgParams params to execute message for refund\\n     */\\n    function refundAndExecuteMsg(\\n        MsgDataTypes.BridgeTransferParams calldata _transferParams,\\n        MsgDataTypes.MsgWithTransferExecutionParams calldata _msgParams\\n    ) external {\\n        _bridgeTransfer(_msgParams.transfer.t, _transferParams);\\n        executeMessageWithTransferRefund(\\n            _msgParams.message,\\n            _msgParams.transfer,\\n            _msgParams.sigs,\\n            _msgParams.signers,\\n            _msgParams.powers\\n        );\\n    }\\n\\n    function _bridgeTransfer(MsgDataTypes.TransferType t, MsgDataTypes.BridgeTransferParams calldata _transferParams)\\n        private\\n    {\\n        if (t == MsgDataTypes.TransferType.LqRelay) {\\n            IBridge(liquidityBridge).relay(\\n                _transferParams.request,\\n                _transferParams.sigs,\\n                _transferParams.signers,\\n                _transferParams.powers\\n            );\\n        } else if (t == MsgDataTypes.TransferType.LqWithdraw) {\\n            IBridge(liquidityBridge).withdraw(\\n                _transferParams.request,\\n                _transferParams.sigs,\\n                _transferParams.signers,\\n                _transferParams.powers\\n            );\\n        } else if (t == MsgDataTypes.TransferType.PegMint) {\\n            IPeggedTokenBridge(pegBridge).mint(\\n                _transferParams.request,\\n                _transferParams.sigs,\\n                _transferParams.signers,\\n                _transferParams.powers\\n            );\\n        } else if (t == MsgDataTypes.TransferType.PegV2Mint) {\\n            IPeggedTokenBridgeV2(pegBridgeV2).mint(\\n                _transferParams.request,\\n                _transferParams.sigs,\\n                _transferParams.signers,\\n                _transferParams.powers\\n            );\\n        } else if (t == MsgDataTypes.TransferType.PegWithdraw) {\\n            IOriginalTokenVault(pegVault).withdraw(\\n                _transferParams.request,\\n                _transferParams.sigs,\\n                _transferParams.signers,\\n                _transferParams.powers\\n            );\\n        } else if (t == MsgDataTypes.TransferType.PegV2Withdraw) {\\n            IOriginalTokenVaultV2(pegVaultV2).withdraw(\\n                _transferParams.request,\\n                _transferParams.sigs,\\n                _transferParams.signers,\\n                _transferParams.powers\\n            );\\n        }\\n    }\\n\\n    // ================= contract config =================\\n\\n    function setLiquidityBridge(address _addr) public onlyOwner {\\n        require(_addr != address(0), \\\"invalid address\\\");\\n        liquidityBridge = _addr;\\n        emit LiquidityBridgeUpdated(liquidityBridge);\\n    }\\n\\n    function setPegBridge(address _addr) public onlyOwner {\\n        require(_addr != address(0), \\\"invalid address\\\");\\n        pegBridge = _addr;\\n        emit PegBridgeUpdated(pegBridge);\\n    }\\n\\n    function setPegVault(address _addr) public onlyOwner {\\n        require(_addr != address(0), \\\"invalid address\\\");\\n        pegVault = _addr;\\n        emit PegVaultUpdated(pegVault);\\n    }\\n\\n    function setPegBridgeV2(address _addr) public onlyOwner {\\n        require(_addr != address(0), \\\"invalid address\\\");\\n        pegBridgeV2 = _addr;\\n        emit PegBridgeV2Updated(pegBridgeV2);\\n    }\\n\\n    function setPegVaultV2(address _addr) public onlyOwner {\\n        require(_addr != address(0), \\\"invalid address\\\");\\n        pegVaultV2 = _addr;\\n        emit PegVaultV2Updated(pegVaultV2);\\n    }\\n\\n    function setPreExecuteMessageGasUsage(uint256 _usage) public onlyOwner {\\n        preExecuteMessageGasUsage = _usage;\\n    }\\n}\\n\",\"keccak256\":\"0x839b32cd10f0beff3c7a3d01fd43b8c1cba6da54dc04ae442349d31aa4389ca1\",\"license\":\"GPL-3.0-only\"},\"contracts/message/messagebus/MessageBusSender.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../../safeguard/Ownable.sol\\\";\\nimport \\\"../../interfaces/ISigsVerifier.sol\\\";\\n\\ncontract MessageBusSender is Ownable {\\n    ISigsVerifier public immutable sigsVerifier;\\n\\n    uint256 public feeBase;\\n    uint256 public feePerByte;\\n    mapping(address => uint256) public withdrawnFees;\\n\\n    event Message(address indexed sender, address receiver, uint256 dstChainId, bytes message, uint256 fee);\\n    // message to non-evm chain with >20 bytes addr\\n    event Message2(address indexed sender, bytes receiver, uint256 dstChainId, bytes message, uint256 fee);\\n\\n    event MessageWithTransfer(\\n        address indexed sender,\\n        address receiver,\\n        uint256 dstChainId,\\n        address bridge,\\n        bytes32 srcTransferId,\\n        bytes message,\\n        uint256 fee\\n    );\\n\\n    event FeeWithdrawn(address receiver, uint256 amount);\\n\\n    event FeeBaseUpdated(uint256 feeBase);\\n    event FeePerByteUpdated(uint256 feePerByte);\\n\\n    constructor(ISigsVerifier _sigsVerifier) {\\n        sigsVerifier = _sigsVerifier;\\n    }\\n\\n    /**\\n     * @notice Sends a message to a contract on another chain.\\n     * Sender needs to make sure the uniqueness of the message Id, which is computed as\\n     * hash(type.MessageOnly, sender, receiver, srcChainId, srcTxHash, dstChainId, message).\\n     * If messages with the same Id are sent, only one of them will succeed at dst chain.\\n     * A fee is charged in the native gas token.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     */\\n    function sendMessage(\\n        address _receiver,\\n        uint256 _dstChainId,\\n        bytes calldata _message\\n    ) external payable {\\n        _sendMessage(_dstChainId, _message);\\n        emit Message(msg.sender, _receiver, _dstChainId, _message, msg.value);\\n    }\\n\\n    // Send message to non-evm chain with bytes for receiver address,\\n    // otherwise same as above.\\n    function sendMessage(\\n        bytes calldata _receiver,\\n        uint256 _dstChainId,\\n        bytes calldata _message\\n    ) external payable {\\n        _sendMessage(_dstChainId, _message);\\n        emit Message2(msg.sender, _receiver, _dstChainId, _message, msg.value);\\n    }\\n\\n    function _sendMessage(uint256 _dstChainId, bytes calldata _message) private {\\n        require(_dstChainId != block.chainid, \\\"Invalid chainId\\\");\\n        uint256 minFee = calcFee(_message);\\n        require(msg.value >= minFee, \\\"Insufficient fee\\\");\\n    }\\n\\n    /**\\n     * @notice Sends a message associated with a transfer to a contract on another chain.\\n     * If messages with the same srcTransferId are sent, only one of them will succeed.\\n     * A fee is charged in the native token.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _srcBridge The bridge contract to send the transfer with.\\n     * @param _srcTransferId The transfer ID.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     */\\n    function sendMessageWithTransfer(\\n        address _receiver,\\n        uint256 _dstChainId,\\n        address _srcBridge,\\n        bytes32 _srcTransferId,\\n        bytes calldata _message\\n    ) external payable {\\n        require(_dstChainId != block.chainid, \\\"Invalid chainId\\\");\\n        uint256 minFee = calcFee(_message);\\n        require(msg.value >= minFee, \\\"Insufficient fee\\\");\\n        // SGN needs to verify\\n        // 1. msg.sender matches sender of the src transfer\\n        // 2. dstChainId matches dstChainId of the src transfer\\n        // 3. bridge is either liquidity bridge, peg src vault, or peg dst bridge\\n        emit MessageWithTransfer(msg.sender, _receiver, _dstChainId, _srcBridge, _srcTransferId, _message, msg.value);\\n    }\\n\\n    /**\\n     * @notice Withdraws message fee in the form of native gas token.\\n     * @param _account The address receiving the fee.\\n     * @param _cumulativeFee The cumulative fee credited to the account. Tracked by SGN.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A withdrawal must be\\n     * signed-off by +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function withdrawFee(\\n        address _account,\\n        uint256 _cumulativeFee,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external {\\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \\\"withdrawFee\\\"));\\n        sigsVerifier.verifySigs(abi.encodePacked(domain, _account, _cumulativeFee), _sigs, _signers, _powers);\\n        uint256 amount = _cumulativeFee - withdrawnFees[_account];\\n        require(amount > 0, \\\"No new amount to withdraw\\\");\\n        withdrawnFees[_account] = _cumulativeFee;\\n        (bool sent, ) = _account.call{value: amount, gas: 50000}(\\\"\\\");\\n        require(sent, \\\"failed to withdraw fee\\\");\\n        emit FeeWithdrawn(_account, amount);\\n    }\\n\\n    /**\\n     * @notice Calculates the required fee for the message.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     @ @return The required fee.\\n     */\\n    function calcFee(bytes calldata _message) public view returns (uint256) {\\n        return feeBase + _message.length * feePerByte;\\n    }\\n\\n    // -------------------- Admin --------------------\\n\\n    function setFeePerByte(uint256 _fee) external onlyOwner {\\n        feePerByte = _fee;\\n        emit FeePerByteUpdated(feePerByte);\\n    }\\n\\n    function setFeeBase(uint256 _fee) external onlyOwner {\\n        feeBase = _fee;\\n        emit FeeBaseUpdated(feeBase);\\n    }\\n}\\n\",\"keccak256\":\"0x22aadae5fb5a42f5c5dd5feda58590263de339ee358f550764e73fc82a2dcf09\",\"license\":\"GPL-3.0-only\"},\"contracts/safeguard/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n *\\n * This adds a normal func that setOwner if _owner is address(0). So we can't allow\\n * renounceOwnership. So we can support Proxy based upgradable contract\\n */\\nabstract contract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Only to be called by inherit contracts, in their init func called by Proxy\\n     * we require _owner == address(0), which is only possible when it's a delegateCall\\n     * because constructor sets _owner in contract state.\\n     */\\n    function initOwner() internal {\\n        require(_owner == address(0), \\\"owner already set\\\");\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x2a92103195b8dce0f34fdf9bf7f94ddf38bf8edf0c0fd4be21323c47016687e9\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002936380380620029368339810160408190526200003491620000b7565b80620000403362000067565b600180546001600160a01b0319166001600160a01b039290921691909117905550620000e9565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215620000ca57600080fd5b81516001600160a01b0381168114620000e257600080fd5b9392505050565b61283d80620000f96000396000f3fe6080604052600436106100e85760003560e01c80637cd2bffc1161008a5780639d4323be116100595780639d4323be14610202578063a1a227fa14610222578063c81739cd14610242578063f2fde38b1461025557600080fd5b80637cd2bffc1461019757806386dfc3c8146101aa5780638da5cb5b146101bd5780639c649fdf146101ef57600080fd5b8063547cad12116100c6578063547cad121461013e5780635ab7afc61461015e5780637767b8d7146101715780637bcf9fe11461018457600080fd5b8063063ce4e5146100ed5780630bcb4982146101165780633c8790d714610129575b600080fd5b6101006100fb366004611c83565b610275565b60405161010d9190611d2e565b60405180910390f35b610100610124366004611d56565b610338565b61013c610137366004611e0d565b61040a565b005b34801561014a57600080fd5b5061013c610159366004611e9f565b6104fa565b61010061016c366004611ebc565b6105c4565b61013c61017f366004611f52565b61062c565b61013c610192366004612007565b6106e0565b6101006101a5366004612141565b61071c565b61013c6101b83660046121c2565b6107e2565b3480156101c957600080fd5b506000546001600160a01b03165b6040516001600160a01b03909116815260200161010d565b6101006101fd366004612245565b610874565b34801561020e57600080fd5b5061013c61021d366004612291565b610a2a565b34801561022e57600080fd5b506001546101d7906001600160a01b031681565b61013c6102503660046122bd565b610aab565b34801561026157600080fd5b5061013c610270366004611e9f565b610b43565b6001546000906001600160a01b031633146102d75760405162461bcd60e51b815260206004820152601960248201527f63616c6c6572206973206e6f74206d657373616765206275730000000000000060448201526064015b60405180910390fd5b6000806102e68587018761231f565b915091507f93bff870467428ead6659a7a554cb75cc2ca56d416714397a31d7dd90fdf3b9c89898985856040516103219594939291906123e5565b60405180910390a150600198975050505050505050565b6001546000906001600160a01b031633146103955760405162461bcd60e51b815260206004820152601960248201527f63616c6c6572206973206e6f74206d657373616765206275730000000000000060448201526064016102ce565b6000806103a48587018761242e565b90925090506103bd6001600160a01b0389168389610c34565b7f28b3e4c963e8ed6cdcdd38aa916a725939823a99bbfa73fe91297cbd65076ebd828989846040516103f2949392919061244c565b60405180910390a16001925050505b95945050505050565b60005b838110156104f157600154600090600160a01b90046001600160401b031686868481811061043d5761043d612488565b905060200281019061044f919061249e565b604051602001610461939291906124e4565b60408051808303601f1901815291905260018054919250600160a01b9091046001600160401b03169060146104958361251d565b91906101000a8154816001600160401b0302191690836001600160401b03160217905550506104de8888838787878181106104d2576104d2612488565b90506020020135610cc9565b50806104e981612543565b91505061040d565b50505050505050565b3361050d6000546001600160a01b031690565b6001600160a01b0316146105635760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102ce565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527f3f8223bcd8b3b875473e9f9e14e1ad075451a2b5ffd31591655da9a01516bf5e9060200160405180910390a150565b6001546000906001600160a01b031633146106215760405162461bcd60e51b815260206004820152601960248201527f63616c6c6572206973206e6f74206d657373616765206275730000000000000060448201526064016102ce565b979650505050505050565b6106416001600160a01b038816333089610ceb565b60003384846040516020016106589392919061255c565b604051602081830303815290604052905061068f89898989600160149054906101000a90046001600160401b03168a878934610d23565b5060018054600160a01b90046001600160401b03169060146106b08361251d565b91906101000a8154816001600160401b0302191690836001600160401b0316021790555050505050505050505050565b60008184846040516020016106f7939291906124e4565b604051602081830303815290604052905061071486868334610cc9565b505050505050565b6001546000906001600160a01b031633146107795760405162461bcd60e51b815260206004820152601960248201527f63616c6c6572206973206e6f74206d657373616765206275730000000000000060448201526064016102ce565b60008084806020019051810190610790919061257f565b90925090506107a96001600160a01b0389168389610c34565b7f853d38177348cfc87290e96c941a5fb96dc3da8a07c31163ddffe4da6661b76f88888b8986866040516103219695949392919061260b565b6000600160149054906101000a90046001600160401b0316838360405160200161080e939291906124e4565b60408051808303601f1901815291905260018054919250600160a01b9091046001600160401b03169060146108428361251d565b91906101000a8154816001600160401b0302191690836001600160401b03160217905550506107148686868434610d5a565b6001546000906001600160a01b031633146108d15760405162461bcd60e51b815260206004820152601960248201527f63616c6c6572206973206e6f74206d657373616765206275730000000000000060448201526064016102ce565b6000806108e08587018761231f565b91509150816001600160401b0316655af3107a4001036109325760405162461bcd60e51b815260206004820152600d60248201526c696e76616c6964206e6f6e636560981b60448201526064016102ce565b816001600160401b0316655af3107a40020361094d57600080fd5b816001600160401b0316655af3107a40030361096e57600292505050610401565b816001600160401b0316655af3107a400414156040518060400160405280600b81526020017f4d53473a3a41424f52543a0000000000000000000000000000000000000000008152506040516020016109c79190612654565b604051602081830303815290604052906109f45760405162461bcd60e51b81526004016102ce9190612685565b507f2bc20c63cdcc1b0e6aeb64fcaaf7ea3c8b999228a4a9ed2a2df1d2e17dd12520888884846040516103f29493929190612698565b33610a3d6000546001600160a01b031690565b6001600160a01b031614610a935760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102ce565b610aa76001600160a01b0383163383610c34565b5050565b6000600160149054906101000a90046001600160401b03168383604051602001610ad7939291906124e4565b60408051808303601f1901815291905260018054919250600160a01b9091046001600160401b0316906014610b0b8361251d565b91906101000a8154816001600160401b0302191690836001600160401b0316021790555050610b3c85858334610cc9565b5050505050565b33610b566000546001600160a01b031690565b6001600160a01b031614610bac5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102ce565b6001600160a01b038116610c285760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016102ce565b610c3181610d78565b50565b6040516001600160a01b038316602482015260448101829052610cc490849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610dd5565b505050565b600154610ce5908590859085906001600160a01b031685610eba565b50505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610ce59085906323b872dd60e01b90608401610c60565b6000610d4c8a8a8a8a8a8a8a8a600160009054906101000a90046001600160a01b03168b610f25565b9a9950505050505050505050565b600154610b3c9086908690869086906001600160a01b031686610fbe565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000610e2a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661102c9092919063ffffffff16565b805190915015610cc45780806020019051810190610e4891906126d3565b610cc45760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016102ce565b604051634f9e72ad60e11b81526001600160a01b03831690639f3ce55a908390610eec908990899089906004016126f5565b6000604051808303818588803b158015610f0557600080fd5b505af1158015610f19573d6000803e3d6000fd5b50505050505050505050565b6000806000610f3a8d8d8d8d8d8d8c8c611045565b8851919350915015610fae57846001600160a01b0316634289fbb3858f8d85878d6040518763ffffffff1660e01b8152600401610f7b959493929190612726565b6000604051808303818588803b158015610f9457600080fd5b505af1158015610fa8573d6000803e3d6000fd5b50505050505b509b9a5050505050505050505050565b604051637d7a101d60e01b81526001600160a01b03831690637d7a101d908390610ff2908a908a908a908a90600401612767565b6000604051808303818588803b15801561100b57600080fd5b505af115801561101f573d6000803e3d6000fd5b5050505050505050505050565b606061103b84846000856117d0565b90505b9392505050565b600080600184600681111561105c5761105c611d18565b0361117a57826001600160a01b03166382980dc46040518163ffffffff1660e01b8152600401602060405180830381865afa15801561109f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c3919061279c565b90506110d96001600160a01b038a16828a61190d565b60405163a5977fbb60e01b81526001600160a01b038b811660048301528a81166024830152604482018a90526001600160401b03808a1660648401528816608483015263ffffffff871660a483015282169063a5977fbb9060c401600060405180830381600087803b15801561114e57600080fd5b505af1158015611162573d6000803e3d6000fd5b505050506111738a8a8a8a8a6119bf565b91506117c3565b600284600681111561118e5761118e611d18565b0361129957826001600160a01b031663d8257d176040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f5919061279c565b905061120b6001600160a01b038a16828a61190d565b6040516308d18d8960e21b81526001600160a01b038a81166004830152602482018a90526001600160401b03808a1660448401528c821660648401528816608483015282169063234636249060a401600060405180830381600087803b15801561127457600080fd5b505af1158015611288573d6000803e3d6000fd5b505050506111738a8a8a8a8a611a47565b60038460068111156112ad576112ad611d18565b0361143357826001600160a01b031663dfa2dbaf6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611314919061279c565b905061132a6001600160a01b038a16828a61190d565b604051636f3c863f60e11b81526001600160a01b038a81166004830152602482018a90528b811660448301526001600160401b038816606483015282169063de790c7e90608401600060405180830381600087803b15801561138b57600080fd5b505af115801561139f573d6000803e3d6000fd5b506113b9925050506001600160a01b038a16826000611ab5565b604080516bffffffffffffffffffffffff1930606090811b82166020808501919091528d821b83166034850152604884018d9052908e901b90911660688301526001600160c01b031960c08a811b8216607c85015246901b1660848301528251808303606c018152608c9092019092528051910120611173565b600484600681111561144757611447611d18565b0361155657826001600160a01b031663c66a9c5a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561148a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ae919061279c565b90506114c46001600160a01b038a16828a61190d565b6040516308d18d8960e21b81526001600160a01b038a81166004830152602482018a90526001600160401b03808a1660448401528c821660648401528816608483015282169063234636249060a4016020604051808303816000875af1158015611532573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117391906127b9565b600584600681111561156a5761156a611d18565b0361169657826001600160a01b03166395b12c276040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d1919061279c565b90506115e76001600160a01b038a16828a61190d565b60405163a002930160e01b81526001600160a01b038a81166004830152602482018a90526001600160401b03808a1660448401528c821660648401528816608483015282169063a00293019060a4015b6020604051808303816000875af1158015611656573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061167a91906127b9565b91506116916001600160a01b038a16826000611ab5565b6117c3565b60068460068111156116aa576116aa611d18565b0361177b57826001600160a01b03166395b12c276040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611711919061279c565b90506117276001600160a01b038a16828a61190d565b604051639e422c3360e01b81526001600160a01b038a81166004830152602482018a90526001600160401b03808a1660448401528c8216606484015288166084830152821690639e422c339060a401611637565b60405162461bcd60e51b815260206004820152601960248201527f6272696467652074797065206e6f7420737570706f727465640000000000000060448201526064016102ce565b9850989650505050505050565b6060824710156118485760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016102ce565b6001600160a01b0385163b61189f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102ce565b600080866001600160a01b031685876040516118bb91906127d2565b60006040518083038185875af1925050503d80600081146118f8576040519150601f19603f3d011682016040523d82523d6000602084013e6118fd565b606091505b5091509150610621828286611bd1565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa15801561195e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061198291906127b9565b61198c91906127ee565b6040516001600160a01b038516602482015260448101829052909150610ce590859063095ea7b360e01b90606401610c60565b6040516bffffffffffffffffffffffff1930606090811b8216602084015287811b8216603484015286901b166048820152605c81018490526001600160c01b031960c084811b8216607c84015283811b8216608484015246901b16608c8201526000906094015b60405160208183030381529060405280519060200120905095945050505050565b6040516bffffffffffffffffffffffff1930606090811b8216602084015286811b82166034840152604883018690526001600160c01b031960c086811b821660688601529189901b909216607084015283811b8216608484015246901b16608c820152600090609401611a26565b801580611b2f5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015611b09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b2d91906127b9565b155b611ba15760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084016102ce565b6040516001600160a01b038316602482015260448101829052610cc490849063095ea7b360e01b90606401610c60565b60608315611be057508161103e565b825115611bf05782518084602001fd5b8160405162461bcd60e51b81526004016102ce9190612685565b60008083601f840112611c1c57600080fd5b5081356001600160401b03811115611c3357600080fd5b602083019150836020828501011115611c4b57600080fd5b9250929050565b80356001600160401b0381168114611c6957600080fd5b919050565b6001600160a01b0381168114610c3157600080fd5b60008060008060008060808789031215611c9c57600080fd5b86356001600160401b0380821115611cb357600080fd5b611cbf8a838b01611c0a565b9098509650869150611cd360208a01611c52565b95506040890135915080821115611ce957600080fd5b50611cf689828a01611c0a565b9094509250506060870135611d0a81611c6e565b809150509295509295509295565b634e487b7160e01b600052602160045260246000fd5b6020810160038310611d5057634e487b7160e01b600052602160045260246000fd5b91905290565b600080600080600060808688031215611d6e57600080fd5b8535611d7981611c6e565b94506020860135935060408601356001600160401b03811115611d9b57600080fd5b611da788828901611c0a565b9094509250506060860135611dbb81611c6e565b809150509295509295909350565b60008083601f840112611ddb57600080fd5b5081356001600160401b03811115611df257600080fd5b6020830191508360208260051b8501011115611c4b57600080fd5b60008060008060008060808789031215611e2657600080fd5b8635611e3181611c6e565b9550611e3f60208801611c52565b945060408701356001600160401b0380821115611e5b57600080fd5b611e678a838b01611dc9565b90965094506060890135915080821115611e8057600080fd5b50611e8d89828a01611dc9565b979a9699509497509295939492505050565b600060208284031215611eb157600080fd5b813561103e81611c6e565b600080600080600080600060c0888a031215611ed757600080fd5b8735611ee281611c6e565b96506020880135611ef281611c6e565b955060408801359450611f0760608901611c52565b935060808801356001600160401b03811115611f2257600080fd5b611f2e8a828b01611c0a565b90945092505060a0880135611f4281611c6e565b8091505092959891949750929550565b60008060008060008060008060e0898b031215611f6e57600080fd5b8835611f7981611c6e565b97506020890135611f8981611c6e565b965060408901359550611f9e60608a01611c52565b9450608089013563ffffffff81168114611fb757600080fd5b935060a08901356001600160401b03811115611fd257600080fd5b611fde8b828c01611c0a565b90945092505060c089013560078110611ff657600080fd5b809150509295985092959890939650565b60008060008060006080868803121561201f57600080fd5b853561202a81611c6e565b945061203860208701611c52565b935060408601356001600160401b0381111561205357600080fd5b61205f88828901611c0a565b9094509250612072905060608701611c52565b90509295509295909350565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156120bc576120bc61207e565b604052919050565b60006001600160401b038211156120dd576120dd61207e565b50601f01601f191660200190565b600082601f8301126120fc57600080fd5b813561210f61210a826120c4565b612094565b81815284602083860101111561212457600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060008060c0878903121561215a57600080fd5b863561216581611c6e565b9550602087013561217581611c6e565b94506040870135935061218a60608801611c52565b925060808701356001600160401b038111156121a557600080fd5b6121b189828a016120eb565b92505060a0870135611d0a81611c6e565b6000806000806000606086880312156121da57600080fd5b85356001600160401b03808211156121f157600080fd5b6121fd89838a01611c0a565b909750955085915061221160208901611c52565b9450604088013591508082111561222757600080fd5b5061223488828901611c0a565b969995985093965092949392505050565b60008060008060006080868803121561225d57600080fd5b853561226881611c6e565b945061227660208701611c52565b935060408601356001600160401b03811115611d9b57600080fd5b600080604083850312156122a457600080fd5b82356122af81611c6e565b946020939093013593505050565b600080600080606085870312156122d357600080fd5b84356122de81611c6e565b93506122ec60208601611c52565b925060408501356001600160401b0381111561230757600080fd5b61231387828801611c0a565b95989497509550505050565b6000806040838503121561233257600080fd5b61233b83611c52565b915060208301356001600160401b0381111561235657600080fd5b612362858286016120eb565b9150509250929050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60005b838110156123b0578181015183820152602001612398565b50506000910152565b600081518084526123d1816020860160208601612395565b601f01601f19169290920160200192915050565b6080815260006123f960808301878961236c565b6001600160401b03868116602085015285166040840152828103606084015261242281856123b9565b98975050505050505050565b6000806040838503121561244157600080fd5b823561233b81611c6e565b60006001600160a01b0380871683528086166020840152508360408301526080606083015261247e60808301846123b9565b9695505050505050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e198436030181126124b557600080fd5b8301803591506001600160401b038211156124cf57600080fd5b602001915036819003821315611c4b57600080fd5b6001600160401b038416815260406020820152600061040160408301848661236c565b634e487b7160e01b600052601160045260246000fd5b60006001600160401b0380831681810361253957612539612507565b6001019392505050565b60006001820161255557612555612507565b5060010190565b6001600160a01b038416815260406020820152600061040160408301848661236c565b6000806040838503121561259257600080fd5b825161259d81611c6e565b60208401519092506001600160401b038111156125b957600080fd5b8301601f810185136125ca57600080fd5b80516125d861210a826120c4565b8181528660208385010111156125ed57600080fd5b6125fe826020830160208601612395565b8093505050509250929050565b60006001600160a01b03808916835287602084015280871660408401526001600160401b038616606084015280851660808401525060c060a083015261242260c08301846123b9565b60008251612666818460208701612395565b6c696e76616c6964206e6f6e636560981b920191825250600d01919050565b60208152600061103e60208301846123b9565b6001600160a01b038516815260006001600160401b0380861660208401528085166040840152506080606083015261247e60808301846123b9565b6000602082840312156126e557600080fd5b8151801515811461103e57600080fd5b6001600160a01b03841681526001600160401b038316602082015260606040820152600061040160608301846123b9565b60006001600160a01b0380881683526001600160401b038716602084015280861660408401525083606083015260a0608083015261062160a08301846123b9565b60608152600061277b60608301868861236c565b6001600160401b0385166020840152828103604084015261062181856123b9565b6000602082840312156127ae57600080fd5b815161103e81611c6e565b6000602082840312156127cb57600080fd5b5051919050565b600082516127e4818460208701612395565b9190910192915050565b8082018082111561280157612801612507565b9291505056fea264697066735822122077be2d0438f7b24b1cb29ec11ab14510f4bf62c8d2b8b26fbf12997e8d615ce364736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100e85760003560e01c80637cd2bffc1161008a5780639d4323be116100595780639d4323be14610202578063a1a227fa14610222578063c81739cd14610242578063f2fde38b1461025557600080fd5b80637cd2bffc1461019757806386dfc3c8146101aa5780638da5cb5b146101bd5780639c649fdf146101ef57600080fd5b8063547cad12116100c6578063547cad121461013e5780635ab7afc61461015e5780637767b8d7146101715780637bcf9fe11461018457600080fd5b8063063ce4e5146100ed5780630bcb4982146101165780633c8790d714610129575b600080fd5b6101006100fb366004611c83565b610275565b60405161010d9190611d2e565b60405180910390f35b610100610124366004611d56565b610338565b61013c610137366004611e0d565b61040a565b005b34801561014a57600080fd5b5061013c610159366004611e9f565b6104fa565b61010061016c366004611ebc565b6105c4565b61013c61017f366004611f52565b61062c565b61013c610192366004612007565b6106e0565b6101006101a5366004612141565b61071c565b61013c6101b83660046121c2565b6107e2565b3480156101c957600080fd5b506000546001600160a01b03165b6040516001600160a01b03909116815260200161010d565b6101006101fd366004612245565b610874565b34801561020e57600080fd5b5061013c61021d366004612291565b610a2a565b34801561022e57600080fd5b506001546101d7906001600160a01b031681565b61013c6102503660046122bd565b610aab565b34801561026157600080fd5b5061013c610270366004611e9f565b610b43565b6001546000906001600160a01b031633146102d75760405162461bcd60e51b815260206004820152601960248201527f63616c6c6572206973206e6f74206d657373616765206275730000000000000060448201526064015b60405180910390fd5b6000806102e68587018761231f565b915091507f93bff870467428ead6659a7a554cb75cc2ca56d416714397a31d7dd90fdf3b9c89898985856040516103219594939291906123e5565b60405180910390a150600198975050505050505050565b6001546000906001600160a01b031633146103955760405162461bcd60e51b815260206004820152601960248201527f63616c6c6572206973206e6f74206d657373616765206275730000000000000060448201526064016102ce565b6000806103a48587018761242e565b90925090506103bd6001600160a01b0389168389610c34565b7f28b3e4c963e8ed6cdcdd38aa916a725939823a99bbfa73fe91297cbd65076ebd828989846040516103f2949392919061244c565b60405180910390a16001925050505b95945050505050565b60005b838110156104f157600154600090600160a01b90046001600160401b031686868481811061043d5761043d612488565b905060200281019061044f919061249e565b604051602001610461939291906124e4565b60408051808303601f1901815291905260018054919250600160a01b9091046001600160401b03169060146104958361251d565b91906101000a8154816001600160401b0302191690836001600160401b03160217905550506104de8888838787878181106104d2576104d2612488565b90506020020135610cc9565b50806104e981612543565b91505061040d565b50505050505050565b3361050d6000546001600160a01b031690565b6001600160a01b0316146105635760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102ce565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527f3f8223bcd8b3b875473e9f9e14e1ad075451a2b5ffd31591655da9a01516bf5e9060200160405180910390a150565b6001546000906001600160a01b031633146106215760405162461bcd60e51b815260206004820152601960248201527f63616c6c6572206973206e6f74206d657373616765206275730000000000000060448201526064016102ce565b979650505050505050565b6106416001600160a01b038816333089610ceb565b60003384846040516020016106589392919061255c565b604051602081830303815290604052905061068f89898989600160149054906101000a90046001600160401b03168a878934610d23565b5060018054600160a01b90046001600160401b03169060146106b08361251d565b91906101000a8154816001600160401b0302191690836001600160401b0316021790555050505050505050505050565b60008184846040516020016106f7939291906124e4565b604051602081830303815290604052905061071486868334610cc9565b505050505050565b6001546000906001600160a01b031633146107795760405162461bcd60e51b815260206004820152601960248201527f63616c6c6572206973206e6f74206d657373616765206275730000000000000060448201526064016102ce565b60008084806020019051810190610790919061257f565b90925090506107a96001600160a01b0389168389610c34565b7f853d38177348cfc87290e96c941a5fb96dc3da8a07c31163ddffe4da6661b76f88888b8986866040516103219695949392919061260b565b6000600160149054906101000a90046001600160401b0316838360405160200161080e939291906124e4565b60408051808303601f1901815291905260018054919250600160a01b9091046001600160401b03169060146108428361251d565b91906101000a8154816001600160401b0302191690836001600160401b03160217905550506107148686868434610d5a565b6001546000906001600160a01b031633146108d15760405162461bcd60e51b815260206004820152601960248201527f63616c6c6572206973206e6f74206d657373616765206275730000000000000060448201526064016102ce565b6000806108e08587018761231f565b91509150816001600160401b0316655af3107a4001036109325760405162461bcd60e51b815260206004820152600d60248201526c696e76616c6964206e6f6e636560981b60448201526064016102ce565b816001600160401b0316655af3107a40020361094d57600080fd5b816001600160401b0316655af3107a40030361096e57600292505050610401565b816001600160401b0316655af3107a400414156040518060400160405280600b81526020017f4d53473a3a41424f52543a0000000000000000000000000000000000000000008152506040516020016109c79190612654565b604051602081830303815290604052906109f45760405162461bcd60e51b81526004016102ce9190612685565b507f2bc20c63cdcc1b0e6aeb64fcaaf7ea3c8b999228a4a9ed2a2df1d2e17dd12520888884846040516103f29493929190612698565b33610a3d6000546001600160a01b031690565b6001600160a01b031614610a935760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102ce565b610aa76001600160a01b0383163383610c34565b5050565b6000600160149054906101000a90046001600160401b03168383604051602001610ad7939291906124e4565b60408051808303601f1901815291905260018054919250600160a01b9091046001600160401b0316906014610b0b8361251d565b91906101000a8154816001600160401b0302191690836001600160401b0316021790555050610b3c85858334610cc9565b5050505050565b33610b566000546001600160a01b031690565b6001600160a01b031614610bac5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102ce565b6001600160a01b038116610c285760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016102ce565b610c3181610d78565b50565b6040516001600160a01b038316602482015260448101829052610cc490849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610dd5565b505050565b600154610ce5908590859085906001600160a01b031685610eba565b50505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610ce59085906323b872dd60e01b90608401610c60565b6000610d4c8a8a8a8a8a8a8a8a600160009054906101000a90046001600160a01b03168b610f25565b9a9950505050505050505050565b600154610b3c9086908690869086906001600160a01b031686610fbe565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000610e2a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661102c9092919063ffffffff16565b805190915015610cc45780806020019051810190610e4891906126d3565b610cc45760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016102ce565b604051634f9e72ad60e11b81526001600160a01b03831690639f3ce55a908390610eec908990899089906004016126f5565b6000604051808303818588803b158015610f0557600080fd5b505af1158015610f19573d6000803e3d6000fd5b50505050505050505050565b6000806000610f3a8d8d8d8d8d8d8c8c611045565b8851919350915015610fae57846001600160a01b0316634289fbb3858f8d85878d6040518763ffffffff1660e01b8152600401610f7b959493929190612726565b6000604051808303818588803b158015610f9457600080fd5b505af1158015610fa8573d6000803e3d6000fd5b50505050505b509b9a5050505050505050505050565b604051637d7a101d60e01b81526001600160a01b03831690637d7a101d908390610ff2908a908a908a908a90600401612767565b6000604051808303818588803b15801561100b57600080fd5b505af115801561101f573d6000803e3d6000fd5b5050505050505050505050565b606061103b84846000856117d0565b90505b9392505050565b600080600184600681111561105c5761105c611d18565b0361117a57826001600160a01b03166382980dc46040518163ffffffff1660e01b8152600401602060405180830381865afa15801561109f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c3919061279c565b90506110d96001600160a01b038a16828a61190d565b60405163a5977fbb60e01b81526001600160a01b038b811660048301528a81166024830152604482018a90526001600160401b03808a1660648401528816608483015263ffffffff871660a483015282169063a5977fbb9060c401600060405180830381600087803b15801561114e57600080fd5b505af1158015611162573d6000803e3d6000fd5b505050506111738a8a8a8a8a6119bf565b91506117c3565b600284600681111561118e5761118e611d18565b0361129957826001600160a01b031663d8257d176040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f5919061279c565b905061120b6001600160a01b038a16828a61190d565b6040516308d18d8960e21b81526001600160a01b038a81166004830152602482018a90526001600160401b03808a1660448401528c821660648401528816608483015282169063234636249060a401600060405180830381600087803b15801561127457600080fd5b505af1158015611288573d6000803e3d6000fd5b505050506111738a8a8a8a8a611a47565b60038460068111156112ad576112ad611d18565b0361143357826001600160a01b031663dfa2dbaf6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611314919061279c565b905061132a6001600160a01b038a16828a61190d565b604051636f3c863f60e11b81526001600160a01b038a81166004830152602482018a90528b811660448301526001600160401b038816606483015282169063de790c7e90608401600060405180830381600087803b15801561138b57600080fd5b505af115801561139f573d6000803e3d6000fd5b506113b9925050506001600160a01b038a16826000611ab5565b604080516bffffffffffffffffffffffff1930606090811b82166020808501919091528d821b83166034850152604884018d9052908e901b90911660688301526001600160c01b031960c08a811b8216607c85015246901b1660848301528251808303606c018152608c9092019092528051910120611173565b600484600681111561144757611447611d18565b0361155657826001600160a01b031663c66a9c5a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561148a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ae919061279c565b90506114c46001600160a01b038a16828a61190d565b6040516308d18d8960e21b81526001600160a01b038a81166004830152602482018a90526001600160401b03808a1660448401528c821660648401528816608483015282169063234636249060a4016020604051808303816000875af1158015611532573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117391906127b9565b600584600681111561156a5761156a611d18565b0361169657826001600160a01b03166395b12c276040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d1919061279c565b90506115e76001600160a01b038a16828a61190d565b60405163a002930160e01b81526001600160a01b038a81166004830152602482018a90526001600160401b03808a1660448401528c821660648401528816608483015282169063a00293019060a4015b6020604051808303816000875af1158015611656573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061167a91906127b9565b91506116916001600160a01b038a16826000611ab5565b6117c3565b60068460068111156116aa576116aa611d18565b0361177b57826001600160a01b03166395b12c276040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611711919061279c565b90506117276001600160a01b038a16828a61190d565b604051639e422c3360e01b81526001600160a01b038a81166004830152602482018a90526001600160401b03808a1660448401528c8216606484015288166084830152821690639e422c339060a401611637565b60405162461bcd60e51b815260206004820152601960248201527f6272696467652074797065206e6f7420737570706f727465640000000000000060448201526064016102ce565b9850989650505050505050565b6060824710156118485760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016102ce565b6001600160a01b0385163b61189f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102ce565b600080866001600160a01b031685876040516118bb91906127d2565b60006040518083038185875af1925050503d80600081146118f8576040519150601f19603f3d011682016040523d82523d6000602084013e6118fd565b606091505b5091509150610621828286611bd1565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa15801561195e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061198291906127b9565b61198c91906127ee565b6040516001600160a01b038516602482015260448101829052909150610ce590859063095ea7b360e01b90606401610c60565b6040516bffffffffffffffffffffffff1930606090811b8216602084015287811b8216603484015286901b166048820152605c81018490526001600160c01b031960c084811b8216607c84015283811b8216608484015246901b16608c8201526000906094015b60405160208183030381529060405280519060200120905095945050505050565b6040516bffffffffffffffffffffffff1930606090811b8216602084015286811b82166034840152604883018690526001600160c01b031960c086811b821660688601529189901b909216607084015283811b8216608484015246901b16608c820152600090609401611a26565b801580611b2f5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015611b09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b2d91906127b9565b155b611ba15760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084016102ce565b6040516001600160a01b038316602482015260448101829052610cc490849063095ea7b360e01b90606401610c60565b60608315611be057508161103e565b825115611bf05782518084602001fd5b8160405162461bcd60e51b81526004016102ce9190612685565b60008083601f840112611c1c57600080fd5b5081356001600160401b03811115611c3357600080fd5b602083019150836020828501011115611c4b57600080fd5b9250929050565b80356001600160401b0381168114611c6957600080fd5b919050565b6001600160a01b0381168114610c3157600080fd5b60008060008060008060808789031215611c9c57600080fd5b86356001600160401b0380821115611cb357600080fd5b611cbf8a838b01611c0a565b9098509650869150611cd360208a01611c52565b95506040890135915080821115611ce957600080fd5b50611cf689828a01611c0a565b9094509250506060870135611d0a81611c6e565b809150509295509295509295565b634e487b7160e01b600052602160045260246000fd5b6020810160038310611d5057634e487b7160e01b600052602160045260246000fd5b91905290565b600080600080600060808688031215611d6e57600080fd5b8535611d7981611c6e565b94506020860135935060408601356001600160401b03811115611d9b57600080fd5b611da788828901611c0a565b9094509250506060860135611dbb81611c6e565b809150509295509295909350565b60008083601f840112611ddb57600080fd5b5081356001600160401b03811115611df257600080fd5b6020830191508360208260051b8501011115611c4b57600080fd5b60008060008060008060808789031215611e2657600080fd5b8635611e3181611c6e565b9550611e3f60208801611c52565b945060408701356001600160401b0380821115611e5b57600080fd5b611e678a838b01611dc9565b90965094506060890135915080821115611e8057600080fd5b50611e8d89828a01611dc9565b979a9699509497509295939492505050565b600060208284031215611eb157600080fd5b813561103e81611c6e565b600080600080600080600060c0888a031215611ed757600080fd5b8735611ee281611c6e565b96506020880135611ef281611c6e565b955060408801359450611f0760608901611c52565b935060808801356001600160401b03811115611f2257600080fd5b611f2e8a828b01611c0a565b90945092505060a0880135611f4281611c6e565b8091505092959891949750929550565b60008060008060008060008060e0898b031215611f6e57600080fd5b8835611f7981611c6e565b97506020890135611f8981611c6e565b965060408901359550611f9e60608a01611c52565b9450608089013563ffffffff81168114611fb757600080fd5b935060a08901356001600160401b03811115611fd257600080fd5b611fde8b828c01611c0a565b90945092505060c089013560078110611ff657600080fd5b809150509295985092959890939650565b60008060008060006080868803121561201f57600080fd5b853561202a81611c6e565b945061203860208701611c52565b935060408601356001600160401b0381111561205357600080fd5b61205f88828901611c0a565b9094509250612072905060608701611c52565b90509295509295909350565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156120bc576120bc61207e565b604052919050565b60006001600160401b038211156120dd576120dd61207e565b50601f01601f191660200190565b600082601f8301126120fc57600080fd5b813561210f61210a826120c4565b612094565b81815284602083860101111561212457600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060008060c0878903121561215a57600080fd5b863561216581611c6e565b9550602087013561217581611c6e565b94506040870135935061218a60608801611c52565b925060808701356001600160401b038111156121a557600080fd5b6121b189828a016120eb565b92505060a0870135611d0a81611c6e565b6000806000806000606086880312156121da57600080fd5b85356001600160401b03808211156121f157600080fd5b6121fd89838a01611c0a565b909750955085915061221160208901611c52565b9450604088013591508082111561222757600080fd5b5061223488828901611c0a565b969995985093965092949392505050565b60008060008060006080868803121561225d57600080fd5b853561226881611c6e565b945061227660208701611c52565b935060408601356001600160401b03811115611d9b57600080fd5b600080604083850312156122a457600080fd5b82356122af81611c6e565b946020939093013593505050565b600080600080606085870312156122d357600080fd5b84356122de81611c6e565b93506122ec60208601611c52565b925060408501356001600160401b0381111561230757600080fd5b61231387828801611c0a565b95989497509550505050565b6000806040838503121561233257600080fd5b61233b83611c52565b915060208301356001600160401b0381111561235657600080fd5b612362858286016120eb565b9150509250929050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60005b838110156123b0578181015183820152602001612398565b50506000910152565b600081518084526123d1816020860160208601612395565b601f01601f19169290920160200192915050565b6080815260006123f960808301878961236c565b6001600160401b03868116602085015285166040840152828103606084015261242281856123b9565b98975050505050505050565b6000806040838503121561244157600080fd5b823561233b81611c6e565b60006001600160a01b0380871683528086166020840152508360408301526080606083015261247e60808301846123b9565b9695505050505050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e198436030181126124b557600080fd5b8301803591506001600160401b038211156124cf57600080fd5b602001915036819003821315611c4b57600080fd5b6001600160401b038416815260406020820152600061040160408301848661236c565b634e487b7160e01b600052601160045260246000fd5b60006001600160401b0380831681810361253957612539612507565b6001019392505050565b60006001820161255557612555612507565b5060010190565b6001600160a01b038416815260406020820152600061040160408301848661236c565b6000806040838503121561259257600080fd5b825161259d81611c6e565b60208401519092506001600160401b038111156125b957600080fd5b8301601f810185136125ca57600080fd5b80516125d861210a826120c4565b8181528660208385010111156125ed57600080fd5b6125fe826020830160208601612395565b8093505050509250929050565b60006001600160a01b03808916835287602084015280871660408401526001600160401b038616606084015280851660808401525060c060a083015261242260c08301846123b9565b60008251612666818460208701612395565b6c696e76616c6964206e6f6e636560981b920191825250600d01919050565b60208152600061103e60208301846123b9565b6001600160a01b038516815260006001600160401b0380861660208401528085166040840152506080606083015261247e60808301846123b9565b6000602082840312156126e557600080fd5b8151801515811461103e57600080fd5b6001600160a01b03841681526001600160401b038316602082015260606040820152600061040160608301846123b9565b60006001600160a01b0380881683526001600160401b038716602084015280861660408401525083606083015260a0608083015261062160a08301846123b9565b60608152600061277b60608301868861236c565b6001600160401b0385166020840152828103604084015261062181856123b9565b6000602082840312156127ae57600080fd5b815161103e81611c6e565b6000602082840312156127cb57600080fd5b5051919050565b600082516127e4818460208701612395565b9190910192915050565b8082018082111561280157612801612507565b9291505056fea264697066735822122077be2d0438f7b24b1cb29ec11ab14510f4bf62c8d2b8b26fbf12997e8d615ce364736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "executeMessageWithTransferFallback(address,address,uint256,uint64,bytes,address)": {
        "params": {
          "_amount": "The amount of tokens received at this contract through the cross-chain bridge.",
          "_executor": "Address who called the MessageBus execution function",
          "_message": "Arbitrary message bytes originated from and encoded by the source app contract",
          "_sender": "The address of the source app contract",
          "_srcChainId": "The source chain ID where the transfer is originated from",
          "_token": "The address of the token that comes out of the bridge"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Application to test message with transfer refund flow ",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "executeMessageWithTransferFallback(address,address,uint256,uint64,bytes,address)": {
        "notice": "Only called by MessageBus if         1. executeMessageWithTransfer reverts, or         2. executeMessageWithTransfer returns ExecutionStatus.Fail The contract is guaranteed to have received the right amount of tokens before this function is called."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 28403,
        "contract": "contracts/message/apps/examples/MsgTest.sol:MsgTest",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 19153,
        "contract": "contracts/message/apps/examples/MsgTest.sol:MsgTest",
        "label": "messageBus",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 15858,
        "contract": "contracts/message/apps/examples/MsgTest.sol:MsgTest",
        "label": "nonce",
        "offset": 20,
        "slot": "1",
        "type": "t_uint64"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}